// $ANTLR 3.0.1 /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g 2013-07-13 22:17:07

package explain;


import org.antlr.runtime.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;

import org.antlr.runtime.tree.*;

/**
   Licensed to the Apache Software Foundation (ASF) under one or more 
   contributor license agreements.  See the NOTICE file distributed with 
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with 
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
public class HiveParser extends Parser {
	public Map<String,Integer[]> aliasmap = new HashMap<String,Integer[]>();
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "TOK_INSERT", "TOK_QUERY", "TOK_SELECT", "TOK_SELECTDI", "TOK_SELEXPR", "TOK_FROM", "TOK_TAB", "TOK_PARTSPEC", "TOK_PARTVAL", "TOK_DIR", "TOK_LOCAL_DIR", "TOK_TABREF", "TOK_SUBQUERY", "TOK_INSERT_INTO", "TOK_DESTINATION", "TOK_ALLCOLREF", "TOK_TABLE_OR_COL", "TOK_FUNCTION", "TOK_FUNCTIONDI", "TOK_FUNCTIONSTAR", "TOK_WHERE", "TOK_OP_EQ", "TOK_OP_NE", "TOK_OP_LE", "TOK_OP_LT", "TOK_OP_GE", "TOK_OP_GT", "TOK_OP_DIV", "TOK_OP_ADD", "TOK_OP_SUB", "TOK_OP_MUL", "TOK_OP_MOD", "TOK_OP_BITAND", "TOK_OP_BITNOT", "TOK_OP_BITOR", "TOK_OP_BITXOR", "TOK_OP_AND", "TOK_OP_OR", "TOK_OP_NOT", "TOK_OP_LIKE", "TOK_TRUE", "TOK_FALSE", "TOK_TRANSFORM", "TOK_SERDE", "TOK_SERDENAME", "TOK_SERDEPROPS", "TOK_EXPLIST", "TOK_ALIASLIST", "TOK_GROUPBY", "TOK_ROLLUP_GROUPBY", "TOK_CUBE_GROUPBY", "TOK_GROUPING_SETS", "TOK_GROUPING_SETS_EXPRESSION", "TOK_HAVING", "TOK_ORDERBY", "TOK_CLUSTERBY", "TOK_DISTRIBUTEBY", "TOK_SORTBY", "TOK_UNION", "TOK_JOIN", "TOK_LEFTOUTERJOIN", "TOK_RIGHTOUTERJOIN", "TOK_FULLOUTERJOIN", "TOK_UNIQUEJOIN", "TOK_CROSSJOIN", "TOK_LOAD", "TOK_EXPORT", "TOK_IMPORT", "TOK_NULL", "TOK_ISNULL", "TOK_ISNOTNULL", "TOK_TINYINT", "TOK_SMALLINT", "TOK_INT", "TOK_BIGINT", "TOK_BOOLEAN", "TOK_FLOAT", "TOK_DOUBLE", "TOK_DATE", "TOK_DATETIME", "TOK_TIMESTAMP", "TOK_STRING", "TOK_BINARY", "TOK_LIST", "TOK_STRUCT", "TOK_MAP", "TOK_UNIONTYPE", "TOK_COLTYPELIST", "TOK_CREATEDATABASE", "TOK_CREATETABLE", "TOK_TRUNCATETABLE", "TOK_CREATEINDEX", "TOK_CREATEINDEX_INDEXTBLNAME", "TOK_DEFERRED_REBUILDINDEX", "TOK_DROPINDEX", "TOK_DROPTABLE_PROPERTIES", "TOK_LIKETABLE", "TOK_DESCTABLE", "TOK_DESCFUNCTION", "TOK_ALTERTABLE_PARTITION", "TOK_ALTERTABLE_RENAME", "TOK_ALTERTABLE_ADDCOLS", "TOK_ALTERTABLE_RENAMECOL", "TOK_ALTERTABLE_RENAMEPART", "TOK_ALTERTABLE_REPLACECOLS", "TOK_ALTERTABLE_ADDPARTS", "TOK_ALTERTABLE_DROPPARTS", "TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE", "TOK_ALTERTABLE_TOUCH", "TOK_ALTERTABLE_ARCHIVE", "TOK_ALTERTABLE_UNARCHIVE", "TOK_ALTERTABLE_SERDEPROPERTIES", "TOK_ALTERTABLE_SERIALIZER", "TOK_TABLE_PARTITION", "TOK_ALTERTABLE_FILEFORMAT", "TOK_ALTERTABLE_LOCATION", "TOK_ALTERTABLE_PROPERTIES", "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION", "TOK_ALTERINDEX_REBUILD", "TOK_ALTERINDEX_PROPERTIES", "TOK_MSCK", "TOK_SHOWDATABASES", "TOK_SHOWTABLES", "TOK_SHOWCOLUMNS", "TOK_SHOWFUNCTIONS", "TOK_SHOWPARTITIONS", "TOK_SHOW_CREATETABLE", "TOK_SHOW_TABLESTATUS", "TOK_SHOW_TBLPROPERTIES", "TOK_SHOWLOCKS", "TOK_LOCKTABLE", "TOK_UNLOCKTABLE", "TOK_SWITCHDATABASE", "TOK_DROPDATABASE", "TOK_DROPTABLE", "TOK_DATABASECOMMENT", "TOK_TABCOLLIST", "TOK_TABCOL", "TOK_TABLECOMMENT", "TOK_TABLEPARTCOLS", "TOK_TABLEBUCKETS", "TOK_TABLEROWFORMAT", "TOK_TABLEROWFORMATFIELD", "TOK_TABLEROWFORMATCOLLITEMS", "TOK_TABLEROWFORMATMAPKEYS", "TOK_TABLEROWFORMATLINES", "TOK_TBLSEQUENCEFILE", "TOK_TBLTEXTFILE", "TOK_TBLRCFILE", "TOK_TABLEFILEFORMAT", "TOK_FILEFORMAT_GENERIC", "TOK_OFFLINE", "TOK_ENABLE", "TOK_DISABLE", "TOK_READONLY", "TOK_NO_DROP", "TOK_STORAGEHANDLER", "TOK_ALTERTABLE_CLUSTER_SORT", "TOK_TABCOLNAME", "TOK_TABLELOCATION", "TOK_PARTITIONLOCATION", "TOK_TABLEBUCKETSAMPLE", "TOK_TABLESPLITSAMPLE", "TOK_PERCENT", "TOK_LENGTH", "TOK_ROWCOUNT", "TOK_TMP_FILE", "TOK_TABSORTCOLNAMEASC", "TOK_TABSORTCOLNAMEDESC", "TOK_STRINGLITERALSEQUENCE", "TOK_CHARSETLITERAL", "TOK_CREATEFUNCTION", "TOK_DROPFUNCTION", "TOK_CREATEVIEW", "TOK_DROPVIEW", "TOK_ALTERVIEW_AS", "TOK_ALTERVIEW_PROPERTIES", "TOK_DROPVIEW_PROPERTIES", "TOK_ALTERVIEW_ADDPARTS", "TOK_ALTERVIEW_DROPPARTS", "TOK_ALTERVIEW_RENAME", "TOK_VIEWPARTCOLS", "TOK_EXPLAIN", "TOK_TABLESERIALIZER", "TOK_TABLEPROPERTIES", "TOK_TABLEPROPLIST", "TOK_INDEXPROPERTIES", "TOK_INDEXPROPLIST", "TOK_TABTYPE", "TOK_LIMIT", "TOK_TABLEPROPERTY", "TOK_IFEXISTS", "TOK_IFNOTEXISTS", "TOK_ORREPLACE", "TOK_HINTLIST", "TOK_HINT", "TOK_MAPJOIN", "TOK_STREAMTABLE", "TOK_HOLD_DDLTIME", "TOK_HINTARGLIST", "TOK_USERSCRIPTCOLNAMES", "TOK_USERSCRIPTCOLSCHEMA", "TOK_RECORDREADER", "TOK_RECORDWRITER", "TOK_LEFTSEMIJOIN", "TOK_LATERAL_VIEW", "TOK_TABALIAS", "TOK_ANALYZE", "TOK_CREATEROLE", "TOK_DROPROLE", "TOK_GRANT", "TOK_REVOKE", "TOK_SHOW_GRANT", "TOK_PRIVILEGE_LIST", "TOK_PRIVILEGE", "TOK_PRINCIPAL_NAME", "TOK_USER", "TOK_GROUP", "TOK_ROLE", "TOK_GRANT_WITH_OPTION", "TOK_PRIV_ALL", "TOK_PRIV_ALTER_METADATA", "TOK_PRIV_ALTER_DATA", "TOK_PRIV_DROP", "TOK_PRIV_INDEX", "TOK_PRIV_LOCK", "TOK_PRIV_SELECT", "TOK_PRIV_SHOW_DATABASE", "TOK_PRIV_CREATE", "TOK_PRIV_OBJECT", "TOK_PRIV_OBJECT_COL", "TOK_GRANT_ROLE", "TOK_REVOKE_ROLE", "TOK_SHOW_ROLE_GRANT", "TOK_SHOWINDEXES", "TOK_INDEXCOMMENT", "TOK_DESCDATABASE", "TOK_DATABASEPROPERTIES", "TOK_DATABASELOCATION", "TOK_DBPROPLIST", "TOK_ALTERDATABASE_PROPERTIES", "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES", "TOK_TABNAME", "TOK_TABSRC", "TOK_RESTRICT", "TOK_CASCADE", "TOK_TABLESKEWED", "TOK_TABCOLVALUE", "TOK_TABCOLVALUE_PAIR", "TOK_TABCOLVALUES", "TOK_ALTERTABLE_SKEWED", "TOK_ALTERTBLPART_SKEWED_LOCATION", "TOK_SKEWED_LOCATIONS", "TOK_SKEWED_LOCATION_LIST", "TOK_SKEWED_LOCATION_MAP", "TOK_STOREDASDIRS", "TOK_IGNOREPROTECTION", "KW_EXPLAIN", "KW_EXTENDED", "KW_FORMATTED", "KW_DEPENDENCY", "KW_LOAD", "KW_DATA", "KW_LOCAL", "KW_INPATH", "StringLiteral", "KW_OVERWRITE", "KW_INTO", "KW_TABLE", "KW_EXPORT", "KW_TO", "KW_IMPORT", "KW_EXTERNAL", "KW_FROM", "KW_IF", "KW_EXISTS", "KW_RESTRICT", "KW_CASCADE", "KW_NOT", "KW_STORED", "KW_AS", "KW_DIRECTORIES", "KW_OR", "KW_REPLACE", "KW_IGNORE", "KW_PROTECTION", "KW_CREATE", "KW_DATABASE", "KW_SCHEMA", "Identifier", "KW_WITH", "KW_DBPROPERTIES", "KW_LOCATION", "LPAREN", "RPAREN", "COMMA", "KW_USE", "KW_DROP", "KW_COMMENT", "KW_LIKE", "KW_TRUNCATE", "KW_INDEX", "KW_ON", "KW_DEFERRED", "KW_REBUILD", "KW_IN", "KW_IDXPROPERTIES", "KW_ALTER", "KW_VIEW", "KW_SET", "KW_RENAME", "KW_ADD", "KW_COLUMNS", "KW_CHANGE", "KW_COLUMN", "KW_FIRST", "KW_AFTER", "KW_TOUCH", "KW_ARCHIVE", "KW_UNARCHIVE", "KW_TBLPROPERTIES", "KW_UNSET", "KW_SERDE", "KW_SERDEPROPERTIES", "KW_FILEFORMAT", "KW_SKEWED", "EQUAL", "KW_CONCATENATE", "KW_ENABLE", "KW_DISABLE", "KW_OFFLINE", "KW_NO_DROP", "KW_READONLY", "Number", "KW_BUCKETS", "KW_CLUSTERED", "KW_SEQUENCEFILE", "KW_TEXTFILE", "KW_RCFILE", "KW_INPUTFORMAT", "KW_OUTPUTFORMAT", "KW_INPUTDRIVER", "KW_OUTPUTDRIVER", "DOT", "KW_ELEM_TYPE", "KW_KEY_TYPE", "KW_VALUE_TYPE", "KW_DESCRIBE", "KW_DESC", "KW_FUNCTION", "KW_ANALYZE", "KW_COMPUTE", "KW_STATISTICS", "KW_FOR", "KW_SHOW", "KW_DATABASES", "KW_SCHEMAS", "KW_TABLES", "KW_FUNCTIONS", "KW_PARTITIONS", "KW_LOCKS", "KW_INDEXES", "KW_LOCK", "KW_SHARED", "KW_EXCLUSIVE", "KW_UNLOCK", "KW_GRANT", "KW_REVOKE", "KW_ALL", "KW_UPDATE", "KW_SELECT", "KW_SHOW_DATABASE", "KW_GROUP", "KW_OPTION", "KW_MSCK", "KW_REPAIR", "KW_TEMPORARY", "KW_PARTITIONED", "KW_BY", "KW_SORTED", "KW_RECORDREADER", "KW_RECORDWRITER", "KW_ROW", "KW_FORMAT", "KW_DELIMITED", "KW_FIELDS", "KW_TERMINATED", "KW_ESCAPED", "KW_COLLECTION", "KW_ITEMS", "KW_MAP", "KW_KEYS", "KW_LINES", "KW_ASC", "COLON", "KW_TINYINT", "KW_SMALLINT", "KW_INT", "KW_BIGINT", "KW_BOOLEAN", "KW_FLOAT", "KW_DOUBLE", "KW_DATE", "KW_DATETIME", "KW_TIMESTAMP", "KW_STRING", "KW_BINARY", "KW_ARRAY", "LESSTHAN", "GREATERTHAN", "KW_STRUCT", "KW_UNIONTYPE", "KW_UNION", "KW_INSERT", "KW_DIRECTORY", "KW_LIMIT", "KW_DISTINCT", "KW_TRANSFORM", "KW_USING", "DIVIDE", "STAR", "PLUS", "KW_MAPJOIN", "KW_STREAMTABLE", "KW_HOLD_DDLTIME", "KW_REDUCE", "KW_PRESERVE", "KW_UNIQUEJOIN", "KW_JOIN", "KW_CROSS", "KW_LEFT", "KW_OUTER", "KW_RIGHT", "KW_FULL", "KW_SEMI", "KW_LATERAL", "KW_TABLESAMPLE", "KW_BUCKET", "KW_OUT", "KW_OF", "KW_PERCENT", "KW_ROWS", "ByteLengthLiteral", "KW_WHERE", "KW_ROLLUP", "KW_CUBE", "KW_GROUPING", "KW_SETS", "KW_HAVING", "KW_ORDER", "KW_CLUSTER", "KW_DISTRIBUTE", "KW_SORT", "KW_CAST", "KW_CASE", "KW_WHEN", "KW_THEN", "KW_ELSE", "KW_END", "BigintLiteral", "SmallintLiteral", "TinyintLiteral", "CharSetName", "CharSetLiteral", "KW_NULL", "LSQUARE", "RSQUARE", "MINUS", "TILDE", "KW_IS", "BITWISEXOR", "MOD", "DIV", "AMPERSAND", "BITWISEOR", "KW_RLIKE", "KW_REGEXP", "EQUAL_NS", "NOTEQUAL", "LESSTHANOREQUALTO", "GREATERTHANOREQUALTO", "KW_BETWEEN", "KW_AND", "KW_TRUE", "KW_FALSE", "KW_PARTITION", "KW_CLUSTERSTATUS", "KW_UTC", "KW_UTCTIMESTAMP", "KW_LONG", "KW_DELETE", "KW_PLUS", "KW_MINUS", "KW_FETCH", "KW_INTERSECT", "KW_MATERIALIZED", "KW_SSL", "KW_UNDO", "KW_PROCEDURE", "KW_UNSIGNED", "KW_WHILE", "KW_READ", "KW_READS", "KW_PURGE", "KW_RANGE", "KW_BEFORE", "KW_BOTH", "KW_CONTINUE", "KW_CURSOR", "KW_TRIGGER", "SEMICOLON", "LCURLY", "RCURLY", "QUESTION", "DOLLAR", "Letter", "HexDigit", "Digit", "Exponent", "RegexComponent", "WS", "COMMENT"
    };
    public static final int TOK_FUNCTIONDI=22;
    public static final int LSQUARE=469;
    public static final int TOK_PRIV_SHOW_DATABASE=231;
    public static final int KW_REPAIR=379;
    public static final int KW_FORMAT=387;
    public static final int TOK_STOREDASDIRS=259;
    public static final int TOK_ALTERTABLE_ALTERPARTS_MERGEFILES=245;
    public static final int KW_FIRST=319;
    public static final int TOK_OP_GT=30;
    public static final int TOK_ALTERTABLE_SERDEPROPERTIES=115;
    public static final int KW_GROUPING=450;
    public static final int KW_DROP=301;
    public static final int TinyintLiteral=465;
    public static final int KW_EXPLAIN=261;
    public static final int KW_PERCENT=444;
    public static final int TOK_PRIV_ALTER_DATA=226;
    public static final int TOK_OP_GE=29;
    public static final int EQUAL_NS=481;
    public static final int RPAREN=298;
    public static final int TOK_OP_ADD=32;
    public static final int TOK_SHOW_CREATETABLE=130;
    public static final int KW_DBPROPERTIES=295;
    public static final int TOK_TABCOLNAME=162;
    public static final int TOK_FUNCTIONSTAR=23;
    public static final int KW_THEN=460;
    public static final int TOK_FROM=9;
    public static final int TOK_TINYINT=75;
    public static final int DIVIDE=423;
    public static final int TOK_ALTERTABLE_LOCATION=119;
    public static final int KW_HOLD_DDLTIME=428;
    public static final int TOK_INDEXCOMMENT=239;
    public static final int TOK_ALTERTABLE_SERIALIZER=116;
    public static final int TOK_SHOW_GRANT=216;
    public static final int KW_SHOW_DATABASE=375;
    public static final int TOK_DESCDATABASE=240;
    public static final int TOK_DESCFUNCTION=102;
    public static final int KW_FETCH=497;
    public static final int KW_FILEFORMAT=328;
    public static final int KW_MATERIALIZED=499;
    public static final int KW_TRANSFORM=421;
    public static final int TOK_TABCOLVALUES=253;
    public static final int TOK_LEFTSEMIJOIN=208;
    public static final int KW_UNIQUEJOIN=431;
    public static final int TOK_TBLSEQUENCEFILE=150;
    public static final int TOK_SELEXPR=8;
    public static final int KW_SELECT=374;
    public static final int TOK_UNIQUEJOIN=67;
    public static final int TOK_MAP=89;
    public static final int TOK_PRIV_ALL=224;
    public static final int KW_BUCKET=441;
    public static final int KW_LOAD=265;
    public static final int KW_GROUP=376;
    public static final int TOK_HOLD_DDLTIME=202;
    public static final int TOK_PRIV_OBJECT=233;
    public static final int KW_TO=274;
    public static final int KW_CHANGE=317;
    public static final int KW_DISTRIBUTE=455;
    public static final int KW_NOT=282;
    public static final int KW_ELSE=461;
    public static final int TOK_TMP_FILE=170;
    public static final int KW_INPATH=268;
    public static final int KW_OUT=442;
    public static final int KW_BOOLEAN=403;
    public static final int TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE=111;
    public static final int TOK_STRUCT=88;
    public static final int TOK_DOUBLE=81;
    public static final int KW_INDEXES=365;
    public static final int TOK_SHOWLOCKS=133;
    public static final int KW_REGEXP=480;
    public static final int TOK_DATETIME=83;
    public static final int TOK_STORAGEHANDLER=160;
    public static final int HexDigit=520;
    public static final int KW_SORT=456;
    public static final int KW_FROM=277;
    public static final int KW_DEFERRED=307;
    public static final int TOK_UNLOCKTABLE=135;
    public static final int TOK_MAPJOIN=200;
    public static final int KW_REDUCE=429;
    public static final int TOK_TIMESTAMP=84;
    public static final int TOK_IFNOTEXISTS=196;
    public static final int TOK_TBLTEXTFILE=151;
    public static final int KW_FOR=357;
    public static final int TOK_ALTERTABLE_FILEFORMAT=118;
    public static final int KW_READS=506;
    public static final int KW_SET=313;
    public static final int PLUS=425;
    public static final int TOK_TABSORTCOLNAMEDESC=172;
    public static final int TOK_RESTRICT=248;
    public static final int KW_REBUILD=308;
    public static final int KW_EXTENDED=262;
    public static final int TOK_LOAD=69;
    public static final int TOK_TABALIAS=210;
    public static final int TOK_IFEXISTS=195;
    public static final int KW_LOCATION=296;
    public static final int TOK_ALTERTABLE_TOUCH=112;
    public static final int KW_MSCK=378;
    public static final int TOK_TRANSFORM=46;
    public static final int LESSTHAN=412;
    public static final int KW_DELIMITED=388;
    public static final int TOK_FUNCTION=21;
    public static final int TOK_CREATEINDEX=95;
    public static final int KW_WHEN=459;
    public static final int TOK_TABLEROWFORMATLINES=149;
    public static final int TOK_CREATEFUNCTION=175;
    public static final int AMPERSAND=477;
    public static final int TOK_SHOWTABLES=126;
    public static final int KW_EXPORT=273;
    public static final int MINUS=471;
    public static final int KW_CUBE=449;
    public static final int KW_FIELDS=389;
    public static final int KW_SEQUENCEFILE=340;
    public static final int TOK_FALSE=45;
    public static final int COLON=398;
    public static final int SmallintLiteral=464;
    public static final int TOK_TABLECOMMENT=142;
    public static final int TOK_ALTERTABLE_RENAMEPART=107;
    public static final int TOK_LIKETABLE=100;
    public static final int TOK_SMALLINT=76;
    public static final int TOK_IGNOREPROTECTION=260;
    public static final int TOK_CREATEINDEX_INDEXTBLNAME=96;
    public static final int TOK_PRIV_LOCK=229;
    public static final int TOK_OP_LT=28;
    public static final int KW_TABLESAMPLE=440;
    public static final int RCURLY=516;
    public static final int TOK_TABLEPROPERTY=194;
    public static final int TOK_GRANT_WITH_OPTION=223;
    public static final int TOK_FULLOUTERJOIN=66;
    public static final int KW_USING=422;
    public static final int TOK_OP_LE=27;
    public static final int KW_NULL=468;
    public static final int TOK_INDEXPROPERTIES=190;
    public static final int TOK_OP_AND=40;
    public static final int TOK_OP_MOD=35;
    public static final int TOK_HINTARGLIST=203;
    public static final int KW_SERDE=326;
    public static final int KW_TINYINT=399;
    public static final int TOK_TABCOLVALUE_PAIR=252;
    public static final int TOK_PERCENT=167;
    public static final int TOK_GROUPBY=52;
    public static final int KW_CROSS=433;
    public static final int TOK_CHARSETLITERAL=174;
    public static final int TOK_TABLEPARTCOLS=143;
    public static final int KW_COLLECTION=392;
    public static final int TOK_ALTERTABLE_DROPPARTS=110;
    public static final int TOK_CUBE_GROUPBY=54;
    public static final int KW_INSERT=417;
    public static final int TOK_SERDEPROPS=49;
    public static final int BITWISEXOR=474;
    public static final int TOK_DROPTABLE=138;
    public static final int TOK_OP_OR=41;
    public static final int KW_ROWS=445;
    public static final int TOK_INDEXPROPLIST=191;
    public static final int TOK_TABLEROWFORMATMAPKEYS=148;
    public static final int TOK_TABLEBUCKETSAMPLE=165;
    public static final int Identifier=293;
    public static final int TOK_PARTVAL=12;
    public static final int TOK_OP_NE=26;
    public static final int TOK_TABLEBUCKETS=144;
    public static final int KW_RLIKE=479;
    public static final int TOK_STRINGLITERALSEQUENCE=173;
    public static final int TOK_OP_NOT=42;
    public static final int KW_SCHEMAS=360;
    public static final int COMMENT=525;
    public static final int KW_PROTECTION=289;
    public static final int KW_READONLY=336;
    public static final int TOK_ALIASLIST=51;
    public static final int KW_ESCAPED=391;
    public static final int KW_INT=401;
    public static final int KW_SMALLINT=400;
    public static final int TOK_INSERT=4;
    public static final int TOK_TABSRC=247;
    public static final int TOK_SKEWED_LOCATION_LIST=257;
    public static final int KW_TEXTFILE=341;
    public static final int TOK_USERSCRIPTCOLNAMES=204;
    public static final int KW_RENAME=314;
    public static final int TOK_ALTERTABLE_REPLACECOLS=108;
    public static final int TOK_UNIONTYPE=90;
    public static final int TOK_LATERAL_VIEW=209;
    public static final int KW_BINARY=410;
    public static final int TOK_STRING=85;
    public static final int KW_END=462;
    public static final int TOK_CLUSTERBY=59;
    public static final int TOK_FLOAT=80;
    public static final int TOK_REVOKE_ROLE=236;
    public static final int TOK_SORTBY=61;
    public static final int KW_TABLES=361;
    public static final int TOK_PRIV_OBJECT_COL=234;
    public static final int Letter=519;
    public static final int KW_CURSOR=512;
    public static final int TOK_SHOWCOLUMNS=127;
    public static final int KW_TIMESTAMP=408;
    public static final int TOK_SELECTDI=7;
    public static final int KW_COLUMNS=316;
    public static final int KW_UNLOCK=369;
    public static final int KW_UNIONTYPE=415;
    public static final int KW_DESCRIBE=351;
    public static final int TOK_CREATETABLE=93;
    public static final int TOK_DROPDATABASE=137;
    public static final int KW_RCFILE=342;
    public static final int KW_CREATE=290;
    public static final int KW_MAPJOIN=426;
    public static final int TOK_DROPVIEW=178;
    public static final int KW_WITH=294;
    public static final int TOK_LENGTH=168;
    public static final int TOK_PRINCIPAL_NAME=219;
    public static final int TOK_SHOW_ROLE_GRANT=237;
    public static final int TOK_PRIVILEGE=218;
    public static final int TOK_DROPTABLE_PROPERTIES=99;
    public static final int TOK_ALTERTABLE_RENAMECOL=106;
    public static final int KW_GRANT=370;
    public static final int Number=337;
    public static final int COMMA=299;
    public static final int KW_WHILE=504;
    public static final int EQUAL=330;
    public static final int KW_UNARCHIVE=323;
    public static final int KW_RECORDREADER=384;
    public static final int TOK_DESTINATION=18;
    public static final int KW_OFFLINE=334;
    public static final int TOK_OP_BITAND=36;
    public static final int TOK_GROUPING_SETS=55;
    public static final int TOK_HAVING=57;
    public static final int KW_RESTRICT=280;
    public static final int KW_UNION=416;
    public static final int KW_TEMPORARY=380;
    public static final int KW_CAST=457;
    public static final int KW_FALSE=488;
    public static final int KW_IDXPROPERTIES=310;
    public static final int KW_INTERSECT=498;
    public static final int TOK_EXPLAIN=186;
    public static final int TOK_ALTERTABLE_PARTITION=103;
    public static final int TOK_FILEFORMAT_GENERIC=154;
    public static final int TOK_ROWCOUNT=169;
    public static final int KW_STORED=283;
    public static final int TOK_PRIV_ALTER_METADATA=225;
    public static final int KW_CASE=458;
    public static final int TOK_SKEWED_LOCATION_MAP=258;
    public static final int TOK_OP_BITNOT=37;
    public static final int TOK_TABCOLLIST=140;
    public static final int TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION=121;
    public static final int TOK_TABTYPE=192;
    public static final int QUESTION=517;
    public static final int TOK_HINTLIST=198;
    public static final int KW_AS=284;
    public static final int KW_BEFORE=509;
    public static final int TOK_OFFLINE=155;
    public static final int KW_KEY_TYPE=349;
    public static final int TOK_TABLELOCATION=163;
    public static final int TOK_ANALYZE=211;
    public static final int TOK_RECORDREADER=206;
    public static final int KW_ALTER=311;
    public static final int KW_PARTITIONED=381;
    public static final int TOK_TABREF=15;
    public static final int KW_LIKE=303;
    public static final int KW_EXCLUSIVE=368;
    public static final int KW_JOIN=432;
    public static final int STAR=424;
    public static final int TOK_GROUPING_SETS_EXPRESSION=56;
    public static final int TOK_ALTERTABLE_ARCHIVE=113;
    public static final int KW_PLUS=495;
    public static final int MOD=475;
    public static final int KW_ITEMS=393;
    public static final int KW_ROW=386;
    public static final int TOK_OP_EQ=25;
    public static final int TOK_CASCADE=249;
    public static final int TOK_VIEWPARTCOLS=185;
    public static final int KW_CONCATENATE=331;
    public static final int KW_REVOKE=371;
    public static final int ByteLengthLiteral=446;
    public static final int KW_FLOAT=404;
    public static final int KW_BOTH=510;
    public static final int EOF=-1;
    public static final int TOK_SHOWDATABASES=125;
    public static final int KW_ASC=397;
    public static final int TOK_DATABASECOMMENT=139;
    public static final int RegexComponent=523;
    public static final int KW_CASCADE=281;
    public static final int KW_PARTITIONS=363;
    public static final int KW_RANGE=508;
    public static final int TOK_GRANT=214;
    public static final int TOK_QUERY=5;
    public static final int TOK_ORREPLACE=197;
    public static final int TOK_ALTERVIEW_RENAME=184;
    public static final int TOK_RIGHTOUTERJOIN=65;
    public static final int TOK_PRIV_SELECT=230;
    public static final int KW_TABLE=272;
    public static final int TOK_RECORDWRITER=207;
    public static final int TOK_ALTERVIEW_ADDPARTS=182;
    public static final int KW_SCHEMA=292;
    public static final int KW_OPTION=377;
    public static final int TOK_TABLESPLITSAMPLE=166;
    public static final int TOK_COLTYPELIST=91;
    public static final int TOK_ALTERTBLPART_SKEWED_LOCATION=255;
    public static final int KW_ENABLE=332;
    public static final int TOK_BIGINT=78;
    public static final int KW_ADD=315;
    public static final int TOK_ALTERTABLE_RENAME=104;
    public static final int KW_LATERAL=439;
    public static final int LCURLY=515;
    public static final int SEMICOLON=514;
    public static final int TOK_TABCOL=141;
    public static final int KW_DELETE=494;
    public static final int KW_OUTPUTDRIVER=346;
    public static final int TOK_ALTERINDEX_REBUILD=122;
    public static final int TOK_WHERE=24;
    public static final int KW_TBLPROPERTIES=324;
    public static final int WS=524;
    public static final int TOK_TABLEROWFORMATFIELD=146;
    public static final int KW_REPLACE=287;
    public static final int KW_LOCK=366;
    public static final int TOK_ALTERVIEW_DROPPARTS=183;
    public static final int KW_BY=382;
    public static final int TOK_UNION=62;
    public static final int TOK_SELECT=6;
    public static final int TOK_OP_LIKE=43;
    public static final int KW_SEMI=438;
    public static final int KW_LOCAL=267;
    public static final int TOK_EXPORT=70;
    public static final int TOK_TABLEPROPLIST=189;
    public static final int KW_UTC=491;
    public static final int KW_INPUTDRIVER=345;
    public static final int TOK_PRIV_INDEX=228;
    public static final int KW_LINES=396;
    public static final int TOK_SHOW_TABLESTATUS=131;
    public static final int KW_AND=486;
    public static final int TOK_SUBQUERY=16;
    public static final int KW_CLUSTERSTATUS=490;
    public static final int CharSetName=466;
    public static final int TOK_CROSSJOIN=68;
    public static final int TOK_DROPFUNCTION=176;
    public static final int TOK_DISABLE=157;
    public static final int KW_DIRECTORY=418;
    public static final int TOK_DESCTABLE=101;
    public static final int KW_SHARED=367;
    public static final int KW_COMPUTE=355;
    public static final int KW_PARTITION=489;
    public static final int TOK_READONLY=158;
    public static final int LPAREN=297;
    public static final int GREATERTHANOREQUALTO=484;
    public static final int KW_FORMATTED=263;
    public static final int KW_STRUCT=414;
    public static final int KW_USE=300;
    public static final int KW_TERMINATED=390;
    public static final int TOK_TRUE=44;
    public static final int TOK_CREATEVIEW=177;
    public static final int TOK_LOCAL_DIR=14;
    public static final int TOK_DROPINDEX=98;
    public static final int KW_IN=309;
    public static final int KW_SSL=500;
    public static final int KW_INPUTFORMAT=343;
    public static final int KW_IS=473;
    public static final int KW_OUTER=435;
    public static final int KW_IF=278;
    public static final int KW_DATABASES=359;
    public static final int TOK_ALTERVIEW_PROPERTIES=180;
    public static final int KW_ORDER=453;
    public static final int KW_ALL=372;
    public static final int KW_HAVING=452;
    public static final int TOK_GRANT_ROLE=235;
    public static final int TOK_ISNULL=73;
    public static final int TOK_ALLCOLREF=19;
    public static final int KW_FUNCTIONS=362;
    public static final int TOK_DIR=13;
    public static final int BITWISEOR=478;
    public static final int KW_SERDEPROPERTIES=327;
    public static final int StringLiteral=269;
    public static final int KW_ANALYZE=354;
    public static final int TOK_TABCOLVALUE=251;
    public static final int CharSetLiteral=467;
    public static final int TOK_TABLE_OR_COL=20;
    public static final int KW_PROCEDURE=502;
    public static final int TOK_TRUNCATETABLE=94;
    public static final int TOK_ALTERTABLE_ADDPARTS=109;
    public static final int KW_CLUSTERED=339;
    public static final int KW_TRUNCATE=304;
    public static final int KW_DISABLE=333;
    public static final int KW_PURGE=507;
    public static final int KW_COMMENT=302;
    public static final int KW_NO_DROP=335;
    public static final int DIV=476;
    public static final int TOK_CREATEDATABASE=92;
    public static final int KW_RECORDWRITER=385;
    public static final int TOK_MSCK=124;
    public static final int KW_DATABASE=291;
    public static final int TOK_DROPROLE=213;
    public static final int TOK_OP_BITXOR=39;
    public static final int TOK_ROLE=222;
    public static final int KW_TOUCH=321;
    public static final int KW_DATETIME=407;
    public static final int TOK_ALTERTABLE_ADDCOLS=105;
    public static final int KW_STRING=409;
    public static final int TOK_CREATEROLE=212;
    public static final int TOK_SHOWINDEXES=238;
    public static final int KW_OUTPUTFORMAT=344;
    public static final int KW_LONG=493;
    public static final int TOK_NULL=72;
    public static final int TOK_GROUP=221;
    public static final int KW_WHERE=447;
    public static final int KW_EXISTS=279;
    public static final int TOK_OP_DIV=31;
    public static final int NOTEQUAL=482;
    public static final int TOK_TABNAME=246;
    public static final int KW_LOCKS=364;
    public static final int TOK_TABLE_PARTITION=117;
    public static final int TOK_INSERT_INTO=17;
    public static final int TOK_DATE=82;
    public static final int KW_UPDATE=373;
    public static final int TOK_TABLEROWFORMAT=145;
    public static final int KW_OVERWRITE=270;
    public static final int KW_DISTINCT=420;
    public static final int TOK_NO_DROP=159;
    public static final int TOK_PRIVILEGE_LIST=217;
    public static final int GREATERTHAN=413;
    public static final int TOK_SHOWPARTITIONS=129;
    public static final int TOK_ISNOTNULL=74;
    public static final int KW_CLUSTER=454;
    public static final int KW_PRESERVE=430;
    public static final int KW_FUNCTION=353;
    public static final int TOK_EXPLIST=50;
    public static final int TOK_BINARY=86;
    public static final int TOK_DISTRIBUTEBY=60;
    public static final int TOK_USER=220;
    public static final int TOK_LIST=87;
    public static final int TOK_TBLRCFILE=152;
    public static final int TOK_ALTERTABLE_UNARCHIVE=114;
    public static final int KW_SETS=451;
    public static final int TOK_TABLEPROPERTIES=188;
    public static final int TOK_HINT=199;
    public static final int KW_ARCHIVE=322;
    public static final int TOK_SERDE=47;
    public static final int KW_LEFT=434;
    public static final int KW_KEYS=395;
    public static final int KW_IMPORT=275;
    public static final int KW_DEPENDENCY=264;
    public static final int TOK_SHOWFUNCTIONS=128;
    public static final int KW_VIEW=312;
    public static final int KW_DOUBLE=405;
    public static final int TOK_TABLESERIALIZER=187;
    public static final int TOK_LEFTOUTERJOIN=64;
    public static final int KW_IGNORE=288;
    public static final int KW_SORTED=383;
    public static final int TOK_DBPROPLIST=243;
    public static final int KW_MAP=394;
    public static final int TOK_LOCKTABLE=134;
    public static final int KW_ELEM_TYPE=348;
    public static final int KW_FULL=437;
    public static final int TOK_TABLESKEWED=250;
    public static final int TOK_ENABLE=156;
    public static final int TOK_SERDENAME=48;
    public static final int LESSTHANOREQUALTO=483;
    public static final int TOK_PARTITIONLOCATION=164;
    public static final int TOK_DATABASELOCATION=242;
    public static final int KW_ARRAY=411;
    public static final int KW_BUCKETS=338;
    public static final int DOLLAR=518;
    public static final int TOK_DROPVIEW_PROPERTIES=181;
    public static final int TOK_ALTERVIEW_AS=179;
    public static final int KW_UTCTIMESTAMP=492;
    public static final int KW_READ=505;
    public static final int TOK_SKEWED_LOCATIONS=256;
    public static final int TOK_OP_MUL=34;
    public static final int TOK_ALTERTABLE_CLUSTER_SORT=161;
    public static final int KW_DESC=352;
    public static final int Exponent=522;
    public static final int TOK_PRIV_DROP=227;
    public static final int TOK_REVOKE=215;
    public static final int KW_TRUE=487;
    public static final int TOK_ALTERTABLE_PROPERTIES=120;
    public static final int KW_LIMIT=419;
    public static final int TOK_STREAMTABLE=201;
    public static final int KW_BIGINT=402;
    public static final int TOK_INT=77;
    public static final int KW_MINUS=496;
    public static final int KW_RIGHT=436;
    public static final int TOK_TABLEFILEFORMAT=153;
    public static final int TOK_ORDERBY=58;
    public static final int KW_EXTERNAL=276;
    public static final int KW_STATISTICS=356;
    public static final int KW_AFTER=320;
    public static final int TOK_PRIV_CREATE=232;
    public static final int KW_UNSET=325;
    public static final int TILDE=472;
    public static final int TOK_ALTERINDEX_PROPERTIES=123;
    public static final int TOK_JOIN=63;
    public static final int KW_INDEX=305;
    public static final int KW_COLUMN=318;
    public static final int DOT=347;
    public static final int KW_UNDO=501;
    public static final int TOK_DATABASEPROPERTIES=241;
    public static final int KW_STREAMTABLE=427;
    public static final int TOK_TAB=10;
    public static final int TOK_SHOW_TBLPROPERTIES=132;
    public static final int TOK_ROLLUP_GROUPBY=53;
    public static final int TOK_ALTERTABLE_SKEWED=254;
    public static final int KW_ROLLUP=448;
    public static final int TOK_ALTERDATABASE_PROPERTIES=244;
    public static final int TOK_DEFERRED_REBUILDINDEX=97;
    public static final int KW_DIRECTORIES=285;
    public static final int KW_TRIGGER=513;
    public static final int KW_CONTINUE=511;
    public static final int TOK_USERSCRIPTCOLSCHEMA=205;
    public static final int TOK_OP_BITOR=38;
    public static final int RSQUARE=470;
    public static final int Digit=521;
    public static final int TOK_SWITCHDATABASE=136;
    public static final int TOK_PARTSPEC=11;
    public static final int TOK_BOOLEAN=79;
    public static final int KW_UNSIGNED=503;
    public static final int KW_DATA=266;
    public static final int TOK_LIMIT=193;
    public static final int TOK_TABSORTCOLNAMEASC=171;
    public static final int KW_SKEWED=329;
    public static final int KW_SHOW=358;
    public static final int BigintLiteral=463;
    public static final int KW_DATE=406;
    public static final int KW_INTO=271;
    public static final int KW_OR=286;
    public static final int TOK_TABLEROWFORMATCOLLITEMS=147;
    public static final int KW_ON=306;
    public static final int KW_VALUE_TYPE=350;
    public static final int KW_OF=443;
    public static final int KW_BETWEEN=485;
    public static final int TOK_OP_SUB=33;
    public static final int TOK_IMPORT=71;

        public HiveParser(TokenStream input) {
            super(input);
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return tokenNames; }
    public String getGrammarFileName() { return "/home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g"; }


      Stack msgs = new Stack<String>();


    public static class statement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start statement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:307:1: statement : ( explainStatement EOF | execStatement EOF );
    public final statement_return statement() throws RecognitionException {
        statement_return retval = new statement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2=null;
        Token EOF4=null;
        explainStatement_return explainStatement1 = null;

        execStatement_return execStatement3 = null;


        CommonTree EOF2_tree=null;
        CommonTree EOF4_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:2: ( explainStatement EOF | execStatement EOF )
            int alt1=2;
            int LA1_0 = input.LA(1);

            if ( (LA1_0==KW_EXPLAIN) ) {
                alt1=1;
            }
            else if ( (LA1_0==KW_LOAD||LA1_0==KW_EXPORT||LA1_0==KW_IMPORT||LA1_0==KW_FROM||LA1_0==KW_CREATE||(LA1_0>=KW_USE && LA1_0<=KW_DROP)||LA1_0==KW_TRUNCATE||LA1_0==KW_ALTER||(LA1_0>=KW_DESCRIBE && LA1_0<=KW_DESC)||LA1_0==KW_ANALYZE||LA1_0==KW_SHOW||LA1_0==KW_LOCK||(LA1_0>=KW_UNLOCK && LA1_0<=KW_REVOKE)||LA1_0==KW_SELECT||LA1_0==KW_MSCK||LA1_0==KW_MAP||LA1_0==KW_INSERT||LA1_0==KW_REDUCE) ) {
                alt1=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("307:1: statement : ( explainStatement EOF | execStatement EOF );", 1, 0, input);

                throw nvae;
            }
            switch (alt1) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:308:4: explainStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_explainStatement_in_statement844);
                    explainStatement1=explainStatement();
                    _fsp--;

                    adaptor.addChild(root_0, explainStatement1.getTree());
                    EOF2=(Token)input.LT(1);
                    match(input,EOF,FOLLOW_EOF_in_statement846); 
                    EOF2_tree = (CommonTree)adaptor.create(EOF2);
                    adaptor.addChild(root_0, EOF2_tree);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:309:4: execStatement EOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_execStatement_in_statement851);
                    execStatement3=execStatement();
                    _fsp--;

                    adaptor.addChild(root_0, execStatement3.getTree());
                    EOF4=(Token)input.LT(1);
                    match(input,EOF,FOLLOW_EOF_in_statement853); 
                    EOF4_tree = (CommonTree)adaptor.create(EOF4);
                    adaptor.addChild(root_0, EOF4_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end statement

    public static class explainStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start explainStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:312:1: explainStatement : KW_EXPLAIN (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED | explainOptions= KW_DEPENDENCY )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) ;
    public final explainStatement_return explainStatement() throws RecognitionException {
        explainStatement_return retval = new explainStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token explainOptions=null;
        Token KW_EXPLAIN5=null;
        execStatement_return execStatement6 = null;


        CommonTree explainOptions_tree=null;
        CommonTree KW_EXPLAIN5_tree=null;
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_DEPENDENCY=new RewriteRuleTokenStream(adaptor,"token KW_DEPENDENCY");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_EXPLAIN=new RewriteRuleTokenStream(adaptor,"token KW_EXPLAIN");
        RewriteRuleSubtreeStream stream_execStatement=new RewriteRuleSubtreeStream(adaptor,"rule execStatement");
         msgs.push("explain statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:2: ( KW_EXPLAIN (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED | explainOptions= KW_DEPENDENCY )? execStatement -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:4: KW_EXPLAIN (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED | explainOptions= KW_DEPENDENCY )? execStatement
            {
            KW_EXPLAIN5=(Token)input.LT(1);
            match(input,KW_EXPLAIN,FOLLOW_KW_EXPLAIN_in_explainStatement874); 
            stream_KW_EXPLAIN.add(KW_EXPLAIN5);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:15: (explainOptions= KW_EXTENDED | explainOptions= KW_FORMATTED | explainOptions= KW_DEPENDENCY )?
            int alt2=4;
            switch ( input.LA(1) ) {
                case KW_EXTENDED:
                    {
                    alt2=1;
                    }
                    break;
                case KW_FORMATTED:
                    {
                    alt2=2;
                    }
                    break;
                case KW_DEPENDENCY:
                    {
                    alt2=3;
                    }
                    break;
            }

            switch (alt2) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:16: explainOptions= KW_EXTENDED
                    {
                    explainOptions=(Token)input.LT(1);
                    match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_explainStatement879); 
                    stream_KW_EXTENDED.add(explainOptions);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:43: explainOptions= KW_FORMATTED
                    {
                    explainOptions=(Token)input.LT(1);
                    match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_explainStatement883); 
                    stream_KW_FORMATTED.add(explainOptions);


                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:315:71: explainOptions= KW_DEPENDENCY
                    {
                    explainOptions=(Token)input.LT(1);
                    match(input,KW_DEPENDENCY,FOLLOW_KW_DEPENDENCY_in_explainStatement887); 
                    stream_KW_DEPENDENCY.add(explainOptions);


                    }
                    break;

            }

            pushFollow(FOLLOW_execStatement_in_explainStatement891);
            execStatement6=execStatement();
            _fsp--;

            stream_execStatement.add(execStatement6.getTree());

            // AST REWRITE
            // elements: explainOptions, execStatement
            // token labels: explainOptions
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_explainOptions=new RewriteRuleTokenStream(adaptor,"token explainOptions",explainOptions);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 316:7: -> ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:316:10: ^( TOK_EXPLAIN execStatement ( $explainOptions)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLAIN, "TOK_EXPLAIN"), root_1);

                adaptor.addChild(root_1, stream_execStatement.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:316:38: ( $explainOptions)?
                if ( stream_explainOptions.hasNext() ) {
                    adaptor.addChild(root_1, stream_explainOptions.next());

                }
                stream_explainOptions.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end explainStatement

    public static class execStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start execStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:319:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement );
    public final execStatement_return execStatement() throws RecognitionException {
        execStatement_return retval = new execStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        queryStatementExpression_return queryStatementExpression7 = null;

        loadStatement_return loadStatement8 = null;

        exportStatement_return exportStatement9 = null;

        importStatement_return importStatement10 = null;

        ddlStatement_return ddlStatement11 = null;



         msgs.push("statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:5: ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement )
            int alt3=5;
            switch ( input.LA(1) ) {
            case KW_FROM:
            case KW_SELECT:
            case KW_MAP:
            case KW_INSERT:
            case KW_REDUCE:
                {
                alt3=1;
                }
                break;
            case KW_LOAD:
                {
                alt3=2;
                }
                break;
            case KW_EXPORT:
                {
                alt3=3;
                }
                break;
            case KW_IMPORT:
                {
                alt3=4;
                }
                break;
            case KW_CREATE:
            case KW_USE:
            case KW_DROP:
            case KW_TRUNCATE:
            case KW_ALTER:
            case KW_DESCRIBE:
            case KW_DESC:
            case KW_ANALYZE:
            case KW_SHOW:
            case KW_LOCK:
            case KW_UNLOCK:
            case KW_GRANT:
            case KW_REVOKE:
            case KW_MSCK:
                {
                alt3=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("319:1: execStatement : ( queryStatementExpression | loadStatement | exportStatement | importStatement | ddlStatement );", 3, 0, input);

                throw nvae;
            }

            switch (alt3) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:322:7: queryStatementExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_queryStatementExpression_in_execStatement933);
                    queryStatementExpression7=queryStatementExpression();
                    _fsp--;

                    adaptor.addChild(root_0, queryStatementExpression7.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:323:7: loadStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_loadStatement_in_execStatement941);
                    loadStatement8=loadStatement();
                    _fsp--;

                    adaptor.addChild(root_0, loadStatement8.getTree());

                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:324:7: exportStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_exportStatement_in_execStatement949);
                    exportStatement9=exportStatement();
                    _fsp--;

                    adaptor.addChild(root_0, exportStatement9.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:325:7: importStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_importStatement_in_execStatement957);
                    importStatement10=importStatement();
                    _fsp--;

                    adaptor.addChild(root_0, importStatement10.getTree());

                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:326:7: ddlStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_ddlStatement_in_execStatement965);
                    ddlStatement11=ddlStatement();
                    _fsp--;

                    adaptor.addChild(root_0, ddlStatement11.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end execStatement

    public static class loadStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start loadStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:329:1: loadStatement : KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) ;
    public final loadStatement_return loadStatement() throws RecognitionException {
        loadStatement_return retval = new loadStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token islocal=null;
        Token path=null;
        Token isoverwrite=null;
        Token KW_LOAD12=null;
        Token KW_DATA13=null;
        Token KW_INPATH14=null;
        Token KW_INTO15=null;
        Token KW_TABLE16=null;
        tableOrPartition_return tab = null;


        CommonTree islocal_tree=null;
        CommonTree path_tree=null;
        CommonTree isoverwrite_tree=null;
        CommonTree KW_LOAD12_tree=null;
        CommonTree KW_DATA13_tree=null;
        CommonTree KW_INPATH14_tree=null;
        CommonTree KW_INTO15_tree=null;
        CommonTree KW_TABLE16_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPATH=new RewriteRuleTokenStream(adaptor,"token KW_INPATH");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_LOAD=new RewriteRuleTokenStream(adaptor,"token KW_LOAD");
        RewriteRuleTokenStream stream_KW_DATA=new RewriteRuleTokenStream(adaptor,"token KW_DATA");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("load statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:5: ( KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition ) -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:7: KW_LOAD KW_DATA (islocal= KW_LOCAL )? KW_INPATH (path= StringLiteral ) (isoverwrite= KW_OVERWRITE )? KW_INTO KW_TABLE (tab= tableOrPartition )
            {
            KW_LOAD12=(Token)input.LT(1);
            match(input,KW_LOAD,FOLLOW_KW_LOAD_in_loadStatement992); 
            stream_KW_LOAD.add(KW_LOAD12);

            KW_DATA13=(Token)input.LT(1);
            match(input,KW_DATA,FOLLOW_KW_DATA_in_loadStatement994); 
            stream_KW_DATA.add(KW_DATA13);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:23: (islocal= KW_LOCAL )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==KW_LOCAL) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:24: islocal= KW_LOCAL
                    {
                    islocal=(Token)input.LT(1);
                    match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_loadStatement999); 
                    stream_KW_LOCAL.add(islocal);


                    }
                    break;

            }

            KW_INPATH14=(Token)input.LT(1);
            match(input,KW_INPATH,FOLLOW_KW_INPATH_in_loadStatement1003); 
            stream_KW_INPATH.add(KW_INPATH14);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:53: (path= StringLiteral )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:54: path= StringLiteral
            {
            path=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_loadStatement1008); 
            stream_StringLiteral.add(path);


            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:74: (isoverwrite= KW_OVERWRITE )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==KW_OVERWRITE) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:75: isoverwrite= KW_OVERWRITE
                    {
                    isoverwrite=(Token)input.LT(1);
                    match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_loadStatement1014); 
                    stream_KW_OVERWRITE.add(isoverwrite);


                    }
                    break;

            }

            KW_INTO15=(Token)input.LT(1);
            match(input,KW_INTO,FOLLOW_KW_INTO_in_loadStatement1018); 
            stream_KW_INTO.add(KW_INTO15);

            KW_TABLE16=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_loadStatement1020); 
            stream_KW_TABLE.add(KW_TABLE16);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:119: (tab= tableOrPartition )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:332:120: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_loadStatement1025);
            tab=tableOrPartition();
            _fsp--;

            stream_tableOrPartition.add(tab.getTree());

            }


            // AST REWRITE
            // elements: isoverwrite, islocal, tab, path
            // token labels: islocal, isoverwrite, path
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_islocal=new RewriteRuleTokenStream(adaptor,"token islocal",islocal);
            RewriteRuleTokenStream stream_isoverwrite=new RewriteRuleTokenStream(adaptor,"token isoverwrite",isoverwrite);
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 333:5: -> ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:333:8: ^( TOK_LOAD $path $tab ( $islocal)? ( $isoverwrite)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOAD, "TOK_LOAD"), root_1);

                adaptor.addChild(root_1, stream_path.next());
                adaptor.addChild(root_1, stream_tab.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:333:30: ( $islocal)?
                if ( stream_islocal.hasNext() ) {
                    adaptor.addChild(root_1, stream_islocal.next());

                }
                stream_islocal.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:333:40: ( $isoverwrite)?
                if ( stream_isoverwrite.hasNext() ) {
                    adaptor.addChild(root_1, stream_isoverwrite.next());

                }
                stream_isoverwrite.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end loadStatement

    public static class exportStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start exportStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:336:1: exportStatement : KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) ;
    public final exportStatement_return exportStatement() throws RecognitionException {
        exportStatement_return retval = new exportStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token path=null;
        Token KW_EXPORT17=null;
        Token KW_TABLE18=null;
        Token KW_TO19=null;
        tableOrPartition_return tab = null;


        CommonTree path_tree=null;
        CommonTree KW_EXPORT17_tree=null;
        CommonTree KW_TABLE18_tree=null;
        CommonTree KW_TO19_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_EXPORT=new RewriteRuleTokenStream(adaptor,"token KW_EXPORT");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("export statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:5: ( KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral ) -> ^( TOK_EXPORT $tab $path) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:7: KW_EXPORT KW_TABLE (tab= tableOrPartition ) KW_TO (path= StringLiteral )
            {
            KW_EXPORT17=(Token)input.LT(1);
            match(input,KW_EXPORT,FOLLOW_KW_EXPORT_in_exportStatement1077); 
            stream_KW_EXPORT.add(KW_EXPORT17);

            KW_TABLE18=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_exportStatement1079); 
            stream_KW_TABLE.add(KW_TABLE18);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:26: (tab= tableOrPartition )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:27: tab= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_exportStatement1084);
            tab=tableOrPartition();
            _fsp--;

            stream_tableOrPartition.add(tab.getTree());

            }

            KW_TO19=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_exportStatement1087); 
            stream_KW_TO.add(KW_TO19);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:55: (path= StringLiteral )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:339:56: path= StringLiteral
            {
            path=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_exportStatement1092); 
            stream_StringLiteral.add(path);


            }


            // AST REWRITE
            // elements: path, tab
            // token labels: path
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 340:5: -> ^( TOK_EXPORT $tab $path)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:340:8: ^( TOK_EXPORT $tab $path)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPORT, "TOK_EXPORT"), root_1);

                adaptor.addChild(root_1, stream_tab.next());
                adaptor.addChild(root_1, stream_path.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end exportStatement

    public static class importStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start importStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:343:1: importStatement : KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) ;
    public final importStatement_return importStatement() throws RecognitionException {
        importStatement_return retval = new importStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ext=null;
        Token path=null;
        Token KW_IMPORT20=null;
        Token KW_TABLE21=null;
        Token KW_FROM22=null;
        tableOrPartition_return tab = null;

        tableLocation_return tableLocation23 = null;


        CommonTree ext_tree=null;
        CommonTree path_tree=null;
        CommonTree KW_IMPORT20_tree=null;
        CommonTree KW_TABLE21_tree=null;
        CommonTree KW_FROM22_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_IMPORT=new RewriteRuleTokenStream(adaptor,"token KW_IMPORT");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
         msgs.push("import statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:2: ( KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )? -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:4: KW_IMPORT ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )? KW_FROM (path= StringLiteral ) ( tableLocation )?
            {
            KW_IMPORT20=(Token)input.LT(1);
            match(input,KW_IMPORT,FOLLOW_KW_IMPORT_in_importStatement1133); 
            stream_KW_IMPORT.add(KW_IMPORT20);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:14: ( (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition ) )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==KW_TABLE||LA7_0==KW_EXTERNAL) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:15: (ext= KW_EXTERNAL )? KW_TABLE (tab= tableOrPartition )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:15: (ext= KW_EXTERNAL )?
                    int alt6=2;
                    int LA6_0 = input.LA(1);

                    if ( (LA6_0==KW_EXTERNAL) ) {
                        alt6=1;
                    }
                    switch (alt6) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:16: ext= KW_EXTERNAL
                            {
                            ext=(Token)input.LT(1);
                            match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_importStatement1139); 
                            stream_KW_EXTERNAL.add(ext);


                            }
                            break;

                    }

                    KW_TABLE21=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_importStatement1143); 
                    stream_KW_TABLE.add(KW_TABLE21);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:43: (tab= tableOrPartition )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:44: tab= tableOrPartition
                    {
                    pushFollow(FOLLOW_tableOrPartition_in_importStatement1148);
                    tab=tableOrPartition();
                    _fsp--;

                    stream_tableOrPartition.add(tab.getTree());

                    }


                    }
                    break;

            }

            KW_FROM22=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_importStatement1153); 
            stream_KW_FROM.add(KW_FROM22);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:76: (path= StringLiteral )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:77: path= StringLiteral
            {
            path=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_importStatement1158); 
            stream_StringLiteral.add(path);


            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:97: ( tableLocation )?
            int alt8=2;
            int LA8_0 = input.LA(1);

            if ( (LA8_0==KW_LOCATION) ) {
                alt8=1;
            }
            switch (alt8) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:346:97: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_importStatement1161);
                    tableLocation23=tableLocation();
                    _fsp--;

                    stream_tableLocation.add(tableLocation23.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: path, tab, tableLocation, ext
            // token labels: path, ext
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_path=new RewriteRuleTokenStream(adaptor,"token path",path);
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 347:5: -> ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:347:8: ^( TOK_IMPORT $path ( $tab)? ( $ext)? ( tableLocation )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IMPORT, "TOK_IMPORT"), root_1);

                adaptor.addChild(root_1, stream_path.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:347:27: ( $tab)?
                if ( stream_tab.hasNext() ) {
                    adaptor.addChild(root_1, stream_tab.next());

                }
                stream_tab.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:347:33: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.next());

                }
                stream_ext.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:347:39: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.next());

                }
                stream_tableLocation.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end importStatement

    public static class ddlStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ddlStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:350:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );
    public final ddlStatement_return ddlStatement() throws RecognitionException {
        ddlStatement_return retval = new ddlStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        createDatabaseStatement_return createDatabaseStatement24 = null;

        switchDatabaseStatement_return switchDatabaseStatement25 = null;

        dropDatabaseStatement_return dropDatabaseStatement26 = null;

        createTableStatement_return createTableStatement27 = null;

        dropTableStatement_return dropTableStatement28 = null;

        truncateTableStatement_return truncateTableStatement29 = null;

        alterStatement_return alterStatement30 = null;

        descStatement_return descStatement31 = null;

        showStatement_return showStatement32 = null;

        metastoreCheck_return metastoreCheck33 = null;

        createViewStatement_return createViewStatement34 = null;

        dropViewStatement_return dropViewStatement35 = null;

        createFunctionStatement_return createFunctionStatement36 = null;

        createIndexStatement_return createIndexStatement37 = null;

        dropIndexStatement_return dropIndexStatement38 = null;

        dropFunctionStatement_return dropFunctionStatement39 = null;

        analyzeStatement_return analyzeStatement40 = null;

        lockStatement_return lockStatement41 = null;

        unlockStatement_return unlockStatement42 = null;

        createRoleStatement_return createRoleStatement43 = null;

        dropRoleStatement_return dropRoleStatement44 = null;

        grantPrivileges_return grantPrivileges45 = null;

        revokePrivileges_return revokePrivileges46 = null;

        showGrants_return showGrants47 = null;

        showRoleGrants_return showRoleGrants48 = null;

        grantRole_return grantRole49 = null;

        revokeRole_return revokeRole50 = null;



         msgs.push("ddl statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:353:5: ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole )
            int alt9=27;
            switch ( input.LA(1) ) {
            case KW_CREATE:
                {
                switch ( input.LA(2) ) {
                case KW_INDEX:
                    {
                    alt9=14;
                    }
                    break;
                case KW_TEMPORARY:
                    {
                    alt9=13;
                    }
                    break;
                case KW_OR:
                case KW_VIEW:
                    {
                    alt9=11;
                    }
                    break;
                case KW_TABLE:
                case KW_EXTERNAL:
                    {
                    alt9=4;
                    }
                    break;
                case KW_DATABASE:
                case KW_SCHEMA:
                    {
                    alt9=1;
                    }
                    break;
                case Identifier:
                    {
                    alt9=20;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("350:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 1, input);

                    throw nvae;
                }

                }
                break;
            case KW_USE:
                {
                alt9=2;
                }
                break;
            case KW_DROP:
                {
                switch ( input.LA(2) ) {
                case KW_TABLE:
                    {
                    alt9=5;
                    }
                    break;
                case KW_VIEW:
                    {
                    alt9=12;
                    }
                    break;
                case KW_TEMPORARY:
                    {
                    alt9=16;
                    }
                    break;
                case KW_INDEX:
                    {
                    alt9=15;
                    }
                    break;
                case KW_DATABASE:
                case KW_SCHEMA:
                    {
                    alt9=3;
                    }
                    break;
                case Identifier:
                    {
                    alt9=21;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("350:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 3, input);

                    throw nvae;
                }

                }
                break;
            case KW_TRUNCATE:
                {
                alt9=6;
                }
                break;
            case KW_ALTER:
                {
                alt9=7;
                }
                break;
            case KW_DESCRIBE:
            case KW_DESC:
                {
                alt9=8;
                }
                break;
            case KW_SHOW:
                {
                switch ( input.LA(2) ) {
                case KW_FORMATTED:
                case KW_TABLE:
                case KW_CREATE:
                case KW_INDEX:
                case KW_COLUMNS:
                case KW_TBLPROPERTIES:
                case KW_DATABASES:
                case KW_SCHEMAS:
                case KW_TABLES:
                case KW_FUNCTIONS:
                case KW_PARTITIONS:
                case KW_LOCKS:
                case KW_INDEXES:
                    {
                    alt9=9;
                    }
                    break;
                case KW_GRANT:
                    {
                    alt9=24;
                    }
                    break;
                case Identifier:
                    {
                    alt9=25;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("350:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 8, input);

                    throw nvae;
                }

                }
                break;
            case KW_MSCK:
                {
                alt9=10;
                }
                break;
            case KW_ANALYZE:
                {
                alt9=17;
                }
                break;
            case KW_LOCK:
                {
                alt9=18;
                }
                break;
            case KW_UNLOCK:
                {
                alt9=19;
                }
                break;
            case KW_GRANT:
                {
                int LA9_13 = input.LA(2);

                if ( (LA9_13==KW_CREATE||LA9_13==KW_DROP||LA9_13==KW_INDEX||LA9_13==KW_ALTER||LA9_13==KW_LOCK||(LA9_13>=KW_ALL && LA9_13<=KW_SHOW_DATABASE)) ) {
                    alt9=22;
                }
                else if ( (LA9_13==Identifier) ) {
                    alt9=26;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("350:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 13, input);

                    throw nvae;
                }
                }
                break;
            case KW_REVOKE:
                {
                int LA9_14 = input.LA(2);

                if ( (LA9_14==Identifier) ) {
                    alt9=27;
                }
                else if ( (LA9_14==KW_CREATE||LA9_14==KW_DROP||LA9_14==KW_INDEX||LA9_14==KW_ALTER||LA9_14==KW_LOCK||(LA9_14>=KW_ALL && LA9_14<=KW_SHOW_DATABASE)) ) {
                    alt9=23;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("350:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 14, input);

                    throw nvae;
                }
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("350:1: ddlStatement : ( createDatabaseStatement | switchDatabaseStatement | dropDatabaseStatement | createTableStatement | dropTableStatement | truncateTableStatement | alterStatement | descStatement | showStatement | metastoreCheck | createViewStatement | dropViewStatement | createFunctionStatement | createIndexStatement | dropIndexStatement | dropFunctionStatement | analyzeStatement | lockStatement | unlockStatement | createRoleStatement | dropRoleStatement | grantPrivileges | revokePrivileges | showGrants | showRoleGrants | grantRole | revokeRole );", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:353:7: createDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createDatabaseStatement_in_ddlStatement1213);
                    createDatabaseStatement24=createDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createDatabaseStatement24.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:354:7: switchDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_switchDatabaseStatement_in_ddlStatement1221);
                    switchDatabaseStatement25=switchDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, switchDatabaseStatement25.getTree());

                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:355:7: dropDatabaseStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropDatabaseStatement_in_ddlStatement1229);
                    dropDatabaseStatement26=dropDatabaseStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropDatabaseStatement26.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:356:7: createTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createTableStatement_in_ddlStatement1237);
                    createTableStatement27=createTableStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createTableStatement27.getTree());

                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:357:7: dropTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropTableStatement_in_ddlStatement1245);
                    dropTableStatement28=dropTableStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropTableStatement28.getTree());

                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:358:7: truncateTableStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_truncateTableStatement_in_ddlStatement1253);
                    truncateTableStatement29=truncateTableStatement();
                    _fsp--;

                    adaptor.addChild(root_0, truncateTableStatement29.getTree());

                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:359:7: alterStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatement_in_ddlStatement1261);
                    alterStatement30=alterStatement();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatement30.getTree());

                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:360:7: descStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_descStatement_in_ddlStatement1269);
                    descStatement31=descStatement();
                    _fsp--;

                    adaptor.addChild(root_0, descStatement31.getTree());

                    }
                    break;
                case 9 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:361:7: showStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showStatement_in_ddlStatement1277);
                    showStatement32=showStatement();
                    _fsp--;

                    adaptor.addChild(root_0, showStatement32.getTree());

                    }
                    break;
                case 10 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:362:7: metastoreCheck
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_metastoreCheck_in_ddlStatement1285);
                    metastoreCheck33=metastoreCheck();
                    _fsp--;

                    adaptor.addChild(root_0, metastoreCheck33.getTree());

                    }
                    break;
                case 11 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:363:7: createViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createViewStatement_in_ddlStatement1293);
                    createViewStatement34=createViewStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createViewStatement34.getTree());

                    }
                    break;
                case 12 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:364:7: dropViewStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropViewStatement_in_ddlStatement1301);
                    dropViewStatement35=dropViewStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropViewStatement35.getTree());

                    }
                    break;
                case 13 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:365:7: createFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createFunctionStatement_in_ddlStatement1309);
                    createFunctionStatement36=createFunctionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createFunctionStatement36.getTree());

                    }
                    break;
                case 14 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:366:7: createIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createIndexStatement_in_ddlStatement1317);
                    createIndexStatement37=createIndexStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createIndexStatement37.getTree());

                    }
                    break;
                case 15 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:367:7: dropIndexStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropIndexStatement_in_ddlStatement1325);
                    dropIndexStatement38=dropIndexStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropIndexStatement38.getTree());

                    }
                    break;
                case 16 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:368:7: dropFunctionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropFunctionStatement_in_ddlStatement1333);
                    dropFunctionStatement39=dropFunctionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropFunctionStatement39.getTree());

                    }
                    break;
                case 17 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:369:7: analyzeStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_analyzeStatement_in_ddlStatement1341);
                    analyzeStatement40=analyzeStatement();
                    _fsp--;

                    adaptor.addChild(root_0, analyzeStatement40.getTree());

                    }
                    break;
                case 18 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:370:7: lockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lockStatement_in_ddlStatement1349);
                    lockStatement41=lockStatement();
                    _fsp--;

                    adaptor.addChild(root_0, lockStatement41.getTree());

                    }
                    break;
                case 19 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:371:7: unlockStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unlockStatement_in_ddlStatement1357);
                    unlockStatement42=unlockStatement();
                    _fsp--;

                    adaptor.addChild(root_0, unlockStatement42.getTree());

                    }
                    break;
                case 20 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:372:7: createRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createRoleStatement_in_ddlStatement1365);
                    createRoleStatement43=createRoleStatement();
                    _fsp--;

                    adaptor.addChild(root_0, createRoleStatement43.getTree());

                    }
                    break;
                case 21 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:373:7: dropRoleStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_dropRoleStatement_in_ddlStatement1373);
                    dropRoleStatement44=dropRoleStatement();
                    _fsp--;

                    adaptor.addChild(root_0, dropRoleStatement44.getTree());

                    }
                    break;
                case 22 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:374:7: grantPrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_grantPrivileges_in_ddlStatement1381);
                    grantPrivileges45=grantPrivileges();
                    _fsp--;

                    adaptor.addChild(root_0, grantPrivileges45.getTree());

                    }
                    break;
                case 23 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:375:7: revokePrivileges
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_revokePrivileges_in_ddlStatement1389);
                    revokePrivileges46=revokePrivileges();
                    _fsp--;

                    adaptor.addChild(root_0, revokePrivileges46.getTree());

                    }
                    break;
                case 24 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:376:7: showGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showGrants_in_ddlStatement1397);
                    showGrants47=showGrants();
                    _fsp--;

                    adaptor.addChild(root_0, showGrants47.getTree());

                    }
                    break;
                case 25 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:377:7: showRoleGrants
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_showRoleGrants_in_ddlStatement1405);
                    showRoleGrants48=showRoleGrants();
                    _fsp--;

                    adaptor.addChild(root_0, showRoleGrants48.getTree());

                    }
                    break;
                case 26 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:378:7: grantRole
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_grantRole_in_ddlStatement1413);
                    grantRole49=grantRole();
                    _fsp--;

                    adaptor.addChild(root_0, grantRole49.getTree());

                    }
                    break;
                case 27 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:379:7: revokeRole
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_revokeRole_in_ddlStatement1421);
                    revokeRole50=revokeRole();
                    _fsp--;

                    adaptor.addChild(root_0, revokeRole50.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ddlStatement

    public static class ifExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifExists
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:382:1: ifExists : KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) ;
    public final ifExists_return ifExists() throws RecognitionException {
        ifExists_return retval = new ifExists_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IF51=null;
        Token KW_EXISTS52=null;

        CommonTree KW_IF51_tree=null;
        CommonTree KW_EXISTS52_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if exists clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:385:5: ( KW_IF KW_EXISTS -> ^( TOK_IFEXISTS ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:385:7: KW_IF KW_EXISTS
            {
            KW_IF51=(Token)input.LT(1);
            match(input,KW_IF,FOLLOW_KW_IF_in_ifExists1448); 
            stream_KW_IF.add(KW_IF51);

            KW_EXISTS52=(Token)input.LT(1);
            match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifExists1450); 
            stream_KW_EXISTS.add(KW_EXISTS52);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 386:5: -> ^( TOK_IFEXISTS )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:386:8: ^( TOK_IFEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IFEXISTS, "TOK_IFEXISTS"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifExists

    public static class restrictOrCascade_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start restrictOrCascade
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:389:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );
    public final restrictOrCascade_return restrictOrCascade() throws RecognitionException {
        restrictOrCascade_return retval = new restrictOrCascade_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RESTRICT53=null;
        Token KW_CASCADE54=null;

        CommonTree KW_RESTRICT53_tree=null;
        CommonTree KW_CASCADE54_tree=null;
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_RESTRICT=new RewriteRuleTokenStream(adaptor,"token KW_RESTRICT");

         msgs.push("restrict or cascade clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:392:5: ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==KW_RESTRICT) ) {
                alt10=1;
            }
            else if ( (LA10_0==KW_CASCADE) ) {
                alt10=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("389:1: restrictOrCascade : ( KW_RESTRICT -> ^( TOK_RESTRICT ) | KW_CASCADE -> ^( TOK_CASCADE ) );", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:392:7: KW_RESTRICT
                    {
                    KW_RESTRICT53=(Token)input.LT(1);
                    match(input,KW_RESTRICT,FOLLOW_KW_RESTRICT_in_restrictOrCascade1487); 
                    stream_KW_RESTRICT.add(KW_RESTRICT53);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 393:5: -> ^( TOK_RESTRICT )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:393:8: ^( TOK_RESTRICT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RESTRICT, "TOK_RESTRICT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:394:7: KW_CASCADE
                    {
                    KW_CASCADE54=(Token)input.LT(1);
                    match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_restrictOrCascade1505); 
                    stream_KW_CASCADE.add(KW_CASCADE54);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 395:5: -> ^( TOK_CASCADE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:395:8: ^( TOK_CASCADE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CASCADE, "TOK_CASCADE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end restrictOrCascade

    public static class ifNotExists_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ifNotExists
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:398:1: ifNotExists : KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) ;
    public final ifNotExists_return ifNotExists() throws RecognitionException {
        ifNotExists_return retval = new ifNotExists_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IF55=null;
        Token KW_NOT56=null;
        Token KW_EXISTS57=null;

        CommonTree KW_IF55_tree=null;
        CommonTree KW_NOT56_tree=null;
        CommonTree KW_EXISTS57_tree=null;
        RewriteRuleTokenStream stream_KW_IF=new RewriteRuleTokenStream(adaptor,"token KW_IF");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleTokenStream stream_KW_EXISTS=new RewriteRuleTokenStream(adaptor,"token KW_EXISTS");

         msgs.push("if not exists clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:401:5: ( KW_IF KW_NOT KW_EXISTS -> ^( TOK_IFNOTEXISTS ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:401:7: KW_IF KW_NOT KW_EXISTS
            {
            KW_IF55=(Token)input.LT(1);
            match(input,KW_IF,FOLLOW_KW_IF_in_ifNotExists1542); 
            stream_KW_IF.add(KW_IF55);

            KW_NOT56=(Token)input.LT(1);
            match(input,KW_NOT,FOLLOW_KW_NOT_in_ifNotExists1544); 
            stream_KW_NOT.add(KW_NOT56);

            KW_EXISTS57=(Token)input.LT(1);
            match(input,KW_EXISTS,FOLLOW_KW_EXISTS_in_ifNotExists1546); 
            stream_KW_EXISTS.add(KW_EXISTS57);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 402:5: -> ^( TOK_IFNOTEXISTS )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:402:8: ^( TOK_IFNOTEXISTS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IFNOTEXISTS, "TOK_IFNOTEXISTS"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ifNotExists

    public static class storedAsDirs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start storedAsDirs
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:405:1: storedAsDirs : KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) ;
    public final storedAsDirs_return storedAsDirs() throws RecognitionException {
        storedAsDirs_return retval = new storedAsDirs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_STORED58=null;
        Token KW_AS59=null;
        Token KW_DIRECTORIES60=null;

        CommonTree KW_STORED58_tree=null;
        CommonTree KW_AS59_tree=null;
        CommonTree KW_DIRECTORIES60_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_DIRECTORIES=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORIES");

         msgs.push("stored as directories"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:408:5: ( KW_STORED KW_AS KW_DIRECTORIES -> ^( TOK_STOREDASDIRS ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:408:7: KW_STORED KW_AS KW_DIRECTORIES
            {
            KW_STORED58=(Token)input.LT(1);
            match(input,KW_STORED,FOLLOW_KW_STORED_in_storedAsDirs1583); 
            stream_KW_STORED.add(KW_STORED58);

            KW_AS59=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_storedAsDirs1585); 
            stream_KW_AS.add(KW_AS59);

            KW_DIRECTORIES60=(Token)input.LT(1);
            match(input,KW_DIRECTORIES,FOLLOW_KW_DIRECTORIES_in_storedAsDirs1587); 
            stream_KW_DIRECTORIES.add(KW_DIRECTORIES60);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 409:5: -> ^( TOK_STOREDASDIRS )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:409:8: ^( TOK_STOREDASDIRS )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STOREDASDIRS, "TOK_STOREDASDIRS"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end storedAsDirs

    public static class orReplace_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orReplace
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:412:1: orReplace : KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) ;
    public final orReplace_return orReplace() throws RecognitionException {
        orReplace_return retval = new orReplace_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_OR61=null;
        Token KW_REPLACE62=null;

        CommonTree KW_OR61_tree=null;
        CommonTree KW_REPLACE62_tree=null;
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_OR=new RewriteRuleTokenStream(adaptor,"token KW_OR");

         msgs.push("or replace clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:415:5: ( KW_OR KW_REPLACE -> ^( TOK_ORREPLACE ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:415:7: KW_OR KW_REPLACE
            {
            KW_OR61=(Token)input.LT(1);
            match(input,KW_OR,FOLLOW_KW_OR_in_orReplace1624); 
            stream_KW_OR.add(KW_OR61);

            KW_REPLACE62=(Token)input.LT(1);
            match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_orReplace1626); 
            stream_KW_REPLACE.add(KW_REPLACE62);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 416:5: -> ^( TOK_ORREPLACE )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:416:8: ^( TOK_ORREPLACE )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ORREPLACE, "TOK_ORREPLACE"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end orReplace

    public static class ignoreProtection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start ignoreProtection
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:419:1: ignoreProtection : KW_IGNORE KW_PROTECTION -> ^( TOK_IGNOREPROTECTION ) ;
    public final ignoreProtection_return ignoreProtection() throws RecognitionException {
        ignoreProtection_return retval = new ignoreProtection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IGNORE63=null;
        Token KW_PROTECTION64=null;

        CommonTree KW_IGNORE63_tree=null;
        CommonTree KW_PROTECTION64_tree=null;
        RewriteRuleTokenStream stream_KW_PROTECTION=new RewriteRuleTokenStream(adaptor,"token KW_PROTECTION");
        RewriteRuleTokenStream stream_KW_IGNORE=new RewriteRuleTokenStream(adaptor,"token KW_IGNORE");

         msgs.push("ignore protection clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:422:9: ( KW_IGNORE KW_PROTECTION -> ^( TOK_IGNOREPROTECTION ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:422:11: KW_IGNORE KW_PROTECTION
            {
            KW_IGNORE63=(Token)input.LT(1);
            match(input,KW_IGNORE,FOLLOW_KW_IGNORE_in_ignoreProtection1667); 
            stream_KW_IGNORE.add(KW_IGNORE63);

            KW_PROTECTION64=(Token)input.LT(1);
            match(input,KW_PROTECTION,FOLLOW_KW_PROTECTION_in_ignoreProtection1669); 
            stream_KW_PROTECTION.add(KW_PROTECTION64);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 423:9: -> ^( TOK_IGNOREPROTECTION )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:423:12: ^( TOK_IGNOREPROTECTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_IGNOREPROTECTION, "TOK_IGNOREPROTECTION"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end ignoreProtection

    public static class createDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createDatabaseStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:426:1: createDatabaseStatement : KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) ;
    public final createDatabaseStatement_return createDatabaseStatement() throws RecognitionException {
        createDatabaseStatement_return retval = new createDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_CREATE65=null;
        Token KW_DATABASE66=null;
        Token KW_SCHEMA67=null;
        Token KW_WITH71=null;
        Token KW_DBPROPERTIES72=null;
        dbProperties_return dbprops = null;

        ifNotExists_return ifNotExists68 = null;

        databaseComment_return databaseComment69 = null;

        dbLocation_return dbLocation70 = null;


        CommonTree name_tree=null;
        CommonTree KW_CREATE65_tree=null;
        CommonTree KW_DATABASE66_tree=null;
        CommonTree KW_SCHEMA67_tree=null;
        CommonTree KW_WITH71_tree=null;
        CommonTree KW_DBPROPERTIES72_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
        RewriteRuleSubtreeStream stream_dbLocation=new RewriteRuleSubtreeStream(adaptor,"rule dbLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_databaseComment=new RewriteRuleSubtreeStream(adaptor,"rule databaseComment");
         msgs.push("create database statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:429:5: ( KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )? -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:429:7: KW_CREATE ( KW_DATABASE | KW_SCHEMA ) ( ifNotExists )? name= Identifier ( databaseComment )? ( dbLocation )? ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            {
            KW_CREATE65=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createDatabaseStatement1714); 
            stream_KW_CREATE.add(KW_CREATE65);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:429:17: ( KW_DATABASE | KW_SCHEMA )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==KW_DATABASE) ) {
                alt11=1;
            }
            else if ( (LA11_0==KW_SCHEMA) ) {
                alt11=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("429:17: ( KW_DATABASE | KW_SCHEMA )", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:429:18: KW_DATABASE
                    {
                    KW_DATABASE66=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_createDatabaseStatement1717); 
                    stream_KW_DATABASE.add(KW_DATABASE66);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:429:30: KW_SCHEMA
                    {
                    KW_SCHEMA67=(Token)input.LT(1);
                    match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_createDatabaseStatement1719); 
                    stream_KW_SCHEMA.add(KW_SCHEMA67);


                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:430:9: ( ifNotExists )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==KW_IF) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:430:9: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createDatabaseStatement1730);
                    ifNotExists68=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists68.getTree());

                    }
                    break;

            }

            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createDatabaseStatement1743); 
            stream_Identifier.add(name);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:432:9: ( databaseComment )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==KW_COMMENT) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:432:9: databaseComment
                    {
                    pushFollow(FOLLOW_databaseComment_in_createDatabaseStatement1753);
                    databaseComment69=databaseComment();
                    _fsp--;

                    stream_databaseComment.add(databaseComment69.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:433:9: ( dbLocation )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==KW_LOCATION) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:433:9: dbLocation
                    {
                    pushFollow(FOLLOW_dbLocation_in_createDatabaseStatement1764);
                    dbLocation70=dbLocation();
                    _fsp--;

                    stream_dbLocation.add(dbLocation70.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:434:9: ( KW_WITH KW_DBPROPERTIES dbprops= dbProperties )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==KW_WITH) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:434:10: KW_WITH KW_DBPROPERTIES dbprops= dbProperties
                    {
                    KW_WITH71=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_createDatabaseStatement1776); 
                    stream_KW_WITH.add(KW_WITH71);

                    KW_DBPROPERTIES72=(Token)input.LT(1);
                    match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1778); 
                    stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES72);

                    pushFollow(FOLLOW_dbProperties_in_createDatabaseStatement1782);
                    dbprops=dbProperties();
                    _fsp--;

                    stream_dbProperties.add(dbprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: dbprops, databaseComment, name, ifNotExists, dbLocation
            // token labels: name
            // rule labels: retval, dbprops
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_dbprops=new RewriteRuleSubtreeStream(adaptor,"token dbprops",dbprops!=null?dbprops.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 435:5: -> ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:8: ^( TOK_CREATEDATABASE $name ( ifNotExists )? ( dbLocation )? ( databaseComment )? ( $dbprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEDATABASE, "TOK_CREATEDATABASE"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:35: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:48: ( dbLocation )?
                if ( stream_dbLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbLocation.next());

                }
                stream_dbLocation.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:60: ( databaseComment )?
                if ( stream_databaseComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseComment.next());

                }
                stream_databaseComment.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:435:77: ( $dbprops)?
                if ( stream_dbprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_dbprops.next());

                }
                stream_dbprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createDatabaseStatement

    public static class dbLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dbLocation
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:438:1: dbLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) ;
    public final dbLocation_return dbLocation() throws RecognitionException {
        dbLocation_return retval = new dbLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION73=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION73_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("database location specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:441:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_DATABASELOCATION $locn) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION73=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_dbLocation1843); 
            stream_KW_LOCATION.add(KW_LOCATION73);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_dbLocation1847); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 442:38: -> ^( TOK_DATABASELOCATION $locn)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:442:41: ^( TOK_DATABASELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DATABASELOCATION, "TOK_DATABASELOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dbLocation

    public static class dbProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dbProperties
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:445:1: dbProperties : LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) ;
    public final dbProperties_return dbProperties() throws RecognitionException {
        dbProperties_return retval = new dbProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN74=null;
        Token RPAREN76=null;
        dbPropertiesList_return dbPropertiesList75 = null;


        CommonTree LPAREN74_tree=null;
        CommonTree RPAREN76_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_dbPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule dbPropertiesList");
         msgs.push("dbproperties"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:448:5: ( LPAREN dbPropertiesList RPAREN -> ^( TOK_DATABASEPROPERTIES dbPropertiesList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:449:7: LPAREN dbPropertiesList RPAREN
            {
            LPAREN74=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_dbProperties1889); 
            stream_LPAREN.add(LPAREN74);

            pushFollow(FOLLOW_dbPropertiesList_in_dbProperties1891);
            dbPropertiesList75=dbPropertiesList();
            _fsp--;

            stream_dbPropertiesList.add(dbPropertiesList75.getTree());
            RPAREN76=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_dbProperties1893); 
            stream_RPAREN.add(RPAREN76);


            // AST REWRITE
            // elements: dbPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 449:38: -> ^( TOK_DATABASEPROPERTIES dbPropertiesList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:449:41: ^( TOK_DATABASEPROPERTIES dbPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DATABASEPROPERTIES, "TOK_DATABASEPROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_dbPropertiesList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dbProperties

    public static class dbPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dbPropertiesList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:452:1: dbPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) ;
    public final dbPropertiesList_return dbPropertiesList() throws RecognitionException {
        dbPropertiesList_return retval = new dbPropertiesList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA78=null;
        keyValueProperty_return keyValueProperty77 = null;

        keyValueProperty_return keyValueProperty79 = null;


        CommonTree COMMA78_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("database properties list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:455:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_DBPROPLIST ( keyValueProperty )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1934);
            keyValueProperty77=keyValueProperty();
            _fsp--;

            stream_keyValueProperty.add(keyValueProperty77.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:24: ( COMMA keyValueProperty )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==COMMA) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:25: COMMA keyValueProperty
            	    {
            	    COMMA78=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dbPropertiesList1937); 
            	    stream_COMMA.add(COMMA78);

            	    pushFollow(FOLLOW_keyValueProperty_in_dbPropertiesList1939);
            	    keyValueProperty79=keyValueProperty();
            	    _fsp--;

            	    stream_keyValueProperty.add(keyValueProperty79.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 456:50: -> ^( TOK_DBPROPLIST ( keyValueProperty )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:456:53: ^( TOK_DBPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DBPROPLIST, "TOK_DBPROPLIST"), root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.next());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dbPropertiesList

    public static class switchDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start switchDatabaseStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:460:1: switchDatabaseStatement : KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) ;
    public final switchDatabaseStatement_return switchDatabaseStatement() throws RecognitionException {
        switchDatabaseStatement_return retval = new switchDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_USE80=null;
        Token Identifier81=null;

        CommonTree KW_USE80_tree=null;
        CommonTree Identifier81_tree=null;
        RewriteRuleTokenStream stream_KW_USE=new RewriteRuleTokenStream(adaptor,"token KW_USE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("switch database statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:463:5: ( KW_USE Identifier -> ^( TOK_SWITCHDATABASE Identifier ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:463:7: KW_USE Identifier
            {
            KW_USE80=(Token)input.LT(1);
            match(input,KW_USE,FOLLOW_KW_USE_in_switchDatabaseStatement1978); 
            stream_KW_USE.add(KW_USE80);

            Identifier81=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_switchDatabaseStatement1980); 
            stream_Identifier.add(Identifier81);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 464:5: -> ^( TOK_SWITCHDATABASE Identifier )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:464:8: ^( TOK_SWITCHDATABASE Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SWITCHDATABASE, "TOK_SWITCHDATABASE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end switchDatabaseStatement

    public static class dropDatabaseStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropDatabaseStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:467:1: dropDatabaseStatement : KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) ;
    public final dropDatabaseStatement_return dropDatabaseStatement() throws RecognitionException {
        dropDatabaseStatement_return retval = new dropDatabaseStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP82=null;
        Token KW_DATABASE83=null;
        Token KW_SCHEMA84=null;
        Token Identifier86=null;
        ifExists_return ifExists85 = null;

        restrictOrCascade_return restrictOrCascade87 = null;


        CommonTree KW_DROP82_tree=null;
        CommonTree KW_DATABASE83_tree=null;
        CommonTree KW_SCHEMA84_tree=null;
        CommonTree Identifier86_tree=null;
        RewriteRuleTokenStream stream_KW_SCHEMA=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMA");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_restrictOrCascade=new RewriteRuleSubtreeStream(adaptor,"rule restrictOrCascade");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop database statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:5: ( KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )? -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:7: KW_DROP ( KW_DATABASE | KW_SCHEMA ) ( ifExists )? Identifier ( restrictOrCascade )?
            {
            KW_DROP82=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropDatabaseStatement2019); 
            stream_KW_DROP.add(KW_DROP82);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:15: ( KW_DATABASE | KW_SCHEMA )
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==KW_DATABASE) ) {
                alt17=1;
            }
            else if ( (LA17_0==KW_SCHEMA) ) {
                alt17=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("470:15: ( KW_DATABASE | KW_SCHEMA )", 17, 0, input);

                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:16: KW_DATABASE
                    {
                    KW_DATABASE83=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_dropDatabaseStatement2022); 
                    stream_KW_DATABASE.add(KW_DATABASE83);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:28: KW_SCHEMA
                    {
                    KW_SCHEMA84=(Token)input.LT(1);
                    match(input,KW_SCHEMA,FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2024); 
                    stream_KW_SCHEMA.add(KW_SCHEMA84);


                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:39: ( ifExists )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==KW_IF) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:39: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropDatabaseStatement2027);
                    ifExists85=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists85.getTree());

                    }
                    break;

            }

            Identifier86=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropDatabaseStatement2030); 
            stream_Identifier.add(Identifier86);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:60: ( restrictOrCascade )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( ((LA19_0>=KW_RESTRICT && LA19_0<=KW_CASCADE)) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:470:60: restrictOrCascade
                    {
                    pushFollow(FOLLOW_restrictOrCascade_in_dropDatabaseStatement2032);
                    restrictOrCascade87=restrictOrCascade();
                    _fsp--;

                    stream_restrictOrCascade.add(restrictOrCascade87.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ifExists, Identifier, restrictOrCascade
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 471:5: -> ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:471:8: ^( TOK_DROPDATABASE Identifier ( ifExists )? ( restrictOrCascade )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPDATABASE, "TOK_DROPDATABASE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:471:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:471:48: ( restrictOrCascade )?
                if ( stream_restrictOrCascade.hasNext() ) {
                    adaptor.addChild(root_1, stream_restrictOrCascade.next());

                }
                stream_restrictOrCascade.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropDatabaseStatement

    public static class databaseComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start databaseComment
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:474:1: databaseComment : KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) ;
    public final databaseComment_return databaseComment() throws RecognitionException {
        databaseComment_return retval = new databaseComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT88=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT88_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("database's comment"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:477:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_DATABASECOMMENT $comment) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:477:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT88=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_databaseComment2078); 
            stream_KW_COMMENT.add(KW_COMMENT88);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_databaseComment2082); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 478:5: -> ^( TOK_DATABASECOMMENT $comment)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:478:8: ^( TOK_DATABASECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DATABASECOMMENT, "TOK_DATABASECOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end databaseComment

    public static class createTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createTableStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:481:1: createTableStatement : KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) ;
    public final createTableStatement_return createTableStatement() throws RecognitionException {
        createTableStatement_return retval = new createTableStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ext=null;
        Token like=null;
        Token KW_CREATE89=null;
        Token KW_TABLE90=null;
        Token LPAREN93=null;
        Token RPAREN95=null;
        Token KW_AS104=null;
        tableName_return name = null;

        tableName_return likeName = null;

        ifNotExists_return ifNotExists91 = null;

        tableLocation_return tableLocation92 = null;

        columnNameTypeList_return columnNameTypeList94 = null;

        tableComment_return tableComment96 = null;

        tablePartition_return tablePartition97 = null;

        tableBuckets_return tableBuckets98 = null;

        tableSkewed_return tableSkewed99 = null;

        tableRowFormat_return tableRowFormat100 = null;

        tableFileFormat_return tableFileFormat101 = null;

        tableLocation_return tableLocation102 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed103 = null;

        selectStatement_return selectStatement105 = null;


        CommonTree ext_tree=null;
        CommonTree like_tree=null;
        CommonTree KW_CREATE89_tree=null;
        CommonTree KW_TABLE90_tree=null;
        CommonTree LPAREN93_tree=null;
        CommonTree RPAREN95_tree=null;
        CommonTree KW_AS104_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_EXTERNAL=new RewriteRuleTokenStream(adaptor,"token KW_EXTERNAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_tablePartition=new RewriteRuleSubtreeStream(adaptor,"rule tablePartition");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
         msgs.push("create table statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:5: ( KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? ) -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:7: KW_CREATE (ext= KW_EXTERNAL )? KW_TABLE ( ifNotExists )? name= tableName (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            {
            KW_CREATE89=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createTableStatement2122); 
            stream_KW_CREATE.add(KW_CREATE89);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:17: (ext= KW_EXTERNAL )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==KW_EXTERNAL) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:18: ext= KW_EXTERNAL
                    {
                    ext=(Token)input.LT(1);
                    match(input,KW_EXTERNAL,FOLLOW_KW_EXTERNAL_in_createTableStatement2127); 
                    stream_KW_EXTERNAL.add(ext);


                    }
                    break;

            }

            KW_TABLE90=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createTableStatement2131); 
            stream_KW_TABLE.add(KW_TABLE90);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:45: ( ifNotExists )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==KW_IF) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:484:45: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createTableStatement2133);
                    ifNotExists91=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists91.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_tableName_in_createTableStatement2138);
            name=tableName();
            _fsp--;

            stream_tableName.add(name.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:7: (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==KW_LIKE) ) {
                alt33=1;
            }
            else if ( (LA33_0==EOF||(LA33_0>=KW_STORED && LA33_0<=KW_AS)||(LA33_0>=KW_LOCATION && LA33_0<=LPAREN)||LA33_0==KW_COMMENT||LA33_0==KW_TBLPROPERTIES||LA33_0==KW_SKEWED||LA33_0==KW_CLUSTERED||LA33_0==KW_PARTITIONED||LA33_0==KW_ROW) ) {
                alt33=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("485:7: (like= KW_LIKE likeName= tableName ( tableLocation )? | ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )? )", 33, 0, input);

                throw nvae;
            }
            switch (alt33) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:485:10: like= KW_LIKE likeName= tableName ( tableLocation )?
                    {
                    like=(Token)input.LT(1);
                    match(input,KW_LIKE,FOLLOW_KW_LIKE_in_createTableStatement2151); 
                    stream_KW_LIKE.add(like);

                    pushFollow(FOLLOW_tableName_in_createTableStatement2155);
                    likeName=tableName();
                    _fsp--;

                    stream_tableName.add(likeName.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:486:10: ( tableLocation )?
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==KW_LOCATION) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:486:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement2166);
                            tableLocation92=tableLocation();
                            _fsp--;

                            stream_tableLocation.add(tableLocation92.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:487:10: ( LPAREN columnNameTypeList RPAREN )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( KW_AS selectStatement )?
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:487:10: ( LPAREN columnNameTypeList RPAREN )?
                    int alt23=2;
                    int LA23_0 = input.LA(1);

                    if ( (LA23_0==LPAREN) ) {
                        alt23=1;
                    }
                    switch (alt23) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:487:11: LPAREN columnNameTypeList RPAREN
                            {
                            LPAREN93=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_createTableStatement2179); 
                            stream_LPAREN.add(LPAREN93);

                            pushFollow(FOLLOW_columnNameTypeList_in_createTableStatement2181);
                            columnNameTypeList94=columnNameTypeList();
                            _fsp--;

                            stream_columnNameTypeList.add(columnNameTypeList94.getTree());
                            RPAREN95=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_createTableStatement2183); 
                            stream_RPAREN.add(RPAREN95);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:488:10: ( tableComment )?
                    int alt24=2;
                    int LA24_0 = input.LA(1);

                    if ( (LA24_0==KW_COMMENT) ) {
                        alt24=1;
                    }
                    switch (alt24) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:488:10: tableComment
                            {
                            pushFollow(FOLLOW_tableComment_in_createTableStatement2196);
                            tableComment96=tableComment();
                            _fsp--;

                            stream_tableComment.add(tableComment96.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:489:10: ( tablePartition )?
                    int alt25=2;
                    int LA25_0 = input.LA(1);

                    if ( (LA25_0==KW_PARTITIONED) ) {
                        alt25=1;
                    }
                    switch (alt25) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:489:10: tablePartition
                            {
                            pushFollow(FOLLOW_tablePartition_in_createTableStatement2208);
                            tablePartition97=tablePartition();
                            _fsp--;

                            stream_tablePartition.add(tablePartition97.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:490:10: ( tableBuckets )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==KW_CLUSTERED) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:490:10: tableBuckets
                            {
                            pushFollow(FOLLOW_tableBuckets_in_createTableStatement2220);
                            tableBuckets98=tableBuckets();
                            _fsp--;

                            stream_tableBuckets.add(tableBuckets98.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:491:10: ( tableSkewed )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==KW_SKEWED) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:491:10: tableSkewed
                            {
                            pushFollow(FOLLOW_tableSkewed_in_createTableStatement2232);
                            tableSkewed99=tableSkewed();
                            _fsp--;

                            stream_tableSkewed.add(tableSkewed99.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:492:10: ( tableRowFormat )?
                    int alt28=2;
                    int LA28_0 = input.LA(1);

                    if ( (LA28_0==KW_ROW) ) {
                        alt28=1;
                    }
                    switch (alt28) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:492:10: tableRowFormat
                            {
                            pushFollow(FOLLOW_tableRowFormat_in_createTableStatement2244);
                            tableRowFormat100=tableRowFormat();
                            _fsp--;

                            stream_tableRowFormat.add(tableRowFormat100.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:493:10: ( tableFileFormat )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==KW_STORED) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:493:10: tableFileFormat
                            {
                            pushFollow(FOLLOW_tableFileFormat_in_createTableStatement2256);
                            tableFileFormat101=tableFileFormat();
                            _fsp--;

                            stream_tableFileFormat.add(tableFileFormat101.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:494:10: ( tableLocation )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==KW_LOCATION) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:494:10: tableLocation
                            {
                            pushFollow(FOLLOW_tableLocation_in_createTableStatement2268);
                            tableLocation102=tableLocation();
                            _fsp--;

                            stream_tableLocation.add(tableLocation102.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:495:10: ( tablePropertiesPrefixed )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==KW_TBLPROPERTIES) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:495:10: tablePropertiesPrefixed
                            {
                            pushFollow(FOLLOW_tablePropertiesPrefixed_in_createTableStatement2280);
                            tablePropertiesPrefixed103=tablePropertiesPrefixed();
                            _fsp--;

                            stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed103.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:496:10: ( KW_AS selectStatement )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==KW_AS) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:496:11: KW_AS selectStatement
                            {
                            KW_AS104=(Token)input.LT(1);
                            match(input,KW_AS,FOLLOW_KW_AS_in_createTableStatement2293); 
                            stream_KW_AS.add(KW_AS104);

                            pushFollow(FOLLOW_selectStatement_in_createTableStatement2295);
                            selectStatement105=selectStatement();
                            _fsp--;

                            stream_selectStatement.add(selectStatement105.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }


            // AST REWRITE
            // elements: tablePartition, tablePropertiesPrefixed, tableLocation, tableSkewed, ext, tableFileFormat, selectStatement, name, tableComment, columnNameTypeList, likeName, tableRowFormat, ifNotExists, tableBuckets
            // token labels: ext
            // rule labels: retval, likeName, name
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ext=new RewriteRuleTokenStream(adaptor,"token ext",ext);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_likeName=new RewriteRuleSubtreeStream(adaptor,"token likeName",likeName!=null?likeName.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 498:5: -> ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:498:8: ^( TOK_CREATETABLE $name ( $ext)? ( ifNotExists )? ^( TOK_LIKETABLE ( $likeName)? ) ( columnNameTypeList )? ( tableComment )? ( tablePartition )? ( tableBuckets )? ( tableSkewed )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( selectStatement )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATETABLE, "TOK_CREATETABLE"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:498:32: ( $ext)?
                if ( stream_ext.hasNext() ) {
                    adaptor.addChild(root_1, stream_ext.next());

                }
                stream_ext.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:498:38: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:499:10: ^( TOK_LIKETABLE ( $likeName)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIKETABLE, "TOK_LIKETABLE"), root_2);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:499:26: ( $likeName)?
                if ( stream_likeName.hasNext() ) {
                    adaptor.addChild(root_2, stream_likeName.next());

                }
                stream_likeName.reset();

                adaptor.addChild(root_1, root_2);
                }
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:500:10: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:501:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.next());

                }
                stream_tableComment.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:502:10: ( tablePartition )?
                if ( stream_tablePartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePartition.next());

                }
                stream_tablePartition.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:503:10: ( tableBuckets )?
                if ( stream_tableBuckets.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableBuckets.next());

                }
                stream_tableBuckets.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:504:10: ( tableSkewed )?
                if ( stream_tableSkewed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableSkewed.next());

                }
                stream_tableSkewed.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:505:10: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.next());

                }
                stream_tableRowFormat.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:506:10: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.next());

                }
                stream_tableFileFormat.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:507:10: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.next());

                }
                stream_tableLocation.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:508:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:509:10: ( selectStatement )?
                if ( stream_selectStatement.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectStatement.next());

                }
                stream_selectStatement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createTableStatement

    public static class truncateTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start truncateTableStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:513:1: truncateTableStatement : KW_TRUNCATE KW_TABLE tablePartitionPrefix -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ) ;
    public final truncateTableStatement_return truncateTableStatement() throws RecognitionException {
        truncateTableStatement_return retval = new truncateTableStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TRUNCATE106=null;
        Token KW_TABLE107=null;
        tablePartitionPrefix_return tablePartitionPrefix108 = null;


        CommonTree KW_TRUNCATE106_tree=null;
        CommonTree KW_TABLE107_tree=null;
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_TRUNCATE=new RewriteRuleTokenStream(adaptor,"token KW_TRUNCATE");
        RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
         msgs.push("truncate table statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:516:5: ( KW_TRUNCATE KW_TABLE tablePartitionPrefix -> ^( TOK_TRUNCATETABLE tablePartitionPrefix ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:516:7: KW_TRUNCATE KW_TABLE tablePartitionPrefix
            {
            KW_TRUNCATE106=(Token)input.LT(1);
            match(input,KW_TRUNCATE,FOLLOW_KW_TRUNCATE_in_truncateTableStatement2498); 
            stream_KW_TRUNCATE.add(KW_TRUNCATE106);

            KW_TABLE107=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_truncateTableStatement2500); 
            stream_KW_TABLE.add(KW_TABLE107);

            pushFollow(FOLLOW_tablePartitionPrefix_in_truncateTableStatement2502);
            tablePartitionPrefix108=tablePartitionPrefix();
            _fsp--;

            stream_tablePartitionPrefix.add(tablePartitionPrefix108.getTree());

            // AST REWRITE
            // elements: tablePartitionPrefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 516:49: -> ^( TOK_TRUNCATETABLE tablePartitionPrefix )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:516:52: ^( TOK_TRUNCATETABLE tablePartitionPrefix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TRUNCATETABLE, "TOK_TRUNCATETABLE"), root_1);

                adaptor.addChild(root_1, stream_tablePartitionPrefix.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end truncateTableStatement

    public static class createIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createIndexStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:518:1: createIndexStatement : KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) ;
    public final createIndexStatement_return createIndexStatement() throws RecognitionException {
        createIndexStatement_return retval = new createIndexStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token indexName=null;
        Token typeName=null;
        Token KW_CREATE109=null;
        Token KW_INDEX110=null;
        Token KW_ON111=null;
        Token KW_TABLE112=null;
        Token LPAREN113=null;
        Token RPAREN114=null;
        Token KW_AS115=null;
        tableName_return tab = null;

        columnNameList_return indexedCols = null;

        autoRebuild_return autoRebuild116 = null;

        indexPropertiesPrefixed_return indexPropertiesPrefixed117 = null;

        indexTblName_return indexTblName118 = null;

        tableRowFormat_return tableRowFormat119 = null;

        tableFileFormat_return tableFileFormat120 = null;

        tableLocation_return tableLocation121 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed122 = null;

        indexComment_return indexComment123 = null;


        CommonTree indexName_tree=null;
        CommonTree typeName_tree=null;
        CommonTree KW_CREATE109_tree=null;
        CommonTree KW_INDEX110_tree=null;
        CommonTree KW_ON111_tree=null;
        CommonTree KW_TABLE112_tree=null;
        CommonTree LPAREN113_tree=null;
        CommonTree RPAREN114_tree=null;
        CommonTree KW_AS115_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_indexPropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesPrefixed");
        RewriteRuleSubtreeStream stream_tableRowFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormat");
        RewriteRuleSubtreeStream stream_tableFileFormat=new RewriteRuleSubtreeStream(adaptor,"rule tableFileFormat");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_autoRebuild=new RewriteRuleSubtreeStream(adaptor,"rule autoRebuild");
        RewriteRuleSubtreeStream stream_tableLocation=new RewriteRuleSubtreeStream(adaptor,"rule tableLocation");
        RewriteRuleSubtreeStream stream_indexTblName=new RewriteRuleSubtreeStream(adaptor,"rule indexTblName");
        RewriteRuleSubtreeStream stream_indexComment=new RewriteRuleSubtreeStream(adaptor,"rule indexComment");
         msgs.push("create index statement");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:521:5: ( KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:521:7: KW_CREATE KW_INDEX indexName= Identifier KW_ON KW_TABLE tab= tableName LPAREN indexedCols= columnNameList RPAREN KW_AS typeName= StringLiteral ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )?
            {
            KW_CREATE109=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createIndexStatement2532); 
            stream_KW_CREATE.add(KW_CREATE109);

            KW_INDEX110=(Token)input.LT(1);
            match(input,KW_INDEX,FOLLOW_KW_INDEX_in_createIndexStatement2534); 
            stream_KW_INDEX.add(KW_INDEX110);

            indexName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createIndexStatement2538); 
            stream_Identifier.add(indexName);

            KW_ON111=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_createIndexStatement2546); 
            stream_KW_ON.add(KW_ON111);

            KW_TABLE112=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_createIndexStatement2548); 
            stream_KW_TABLE.add(KW_TABLE112);

            pushFollow(FOLLOW_tableName_in_createIndexStatement2552);
            tab=tableName();
            _fsp--;

            stream_tableName.add(tab.getTree());
            LPAREN113=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_createIndexStatement2554); 
            stream_LPAREN.add(LPAREN113);

            pushFollow(FOLLOW_columnNameList_in_createIndexStatement2558);
            indexedCols=columnNameList();
            _fsp--;

            stream_columnNameList.add(indexedCols.getTree());
            RPAREN114=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_createIndexStatement2560); 
            stream_RPAREN.add(RPAREN114);

            KW_AS115=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createIndexStatement2568); 
            stream_KW_AS.add(KW_AS115);

            typeName=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_createIndexStatement2572); 
            stream_StringLiteral.add(typeName);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:524:7: ( autoRebuild )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==KW_WITH) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:524:7: autoRebuild
                    {
                    pushFollow(FOLLOW_autoRebuild_in_createIndexStatement2580);
                    autoRebuild116=autoRebuild();
                    _fsp--;

                    stream_autoRebuild.add(autoRebuild116.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:525:7: ( indexPropertiesPrefixed )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==KW_IDXPROPERTIES) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:525:7: indexPropertiesPrefixed
                    {
                    pushFollow(FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2589);
                    indexPropertiesPrefixed117=indexPropertiesPrefixed();
                    _fsp--;

                    stream_indexPropertiesPrefixed.add(indexPropertiesPrefixed117.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:526:7: ( indexTblName )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==KW_IN) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:526:7: indexTblName
                    {
                    pushFollow(FOLLOW_indexTblName_in_createIndexStatement2598);
                    indexTblName118=indexTblName();
                    _fsp--;

                    stream_indexTblName.add(indexTblName118.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:527:7: ( tableRowFormat )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==KW_ROW) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:527:7: tableRowFormat
                    {
                    pushFollow(FOLLOW_tableRowFormat_in_createIndexStatement2607);
                    tableRowFormat119=tableRowFormat();
                    _fsp--;

                    stream_tableRowFormat.add(tableRowFormat119.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:528:7: ( tableFileFormat )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==KW_STORED) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:528:7: tableFileFormat
                    {
                    pushFollow(FOLLOW_tableFileFormat_in_createIndexStatement2616);
                    tableFileFormat120=tableFileFormat();
                    _fsp--;

                    stream_tableFileFormat.add(tableFileFormat120.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:529:7: ( tableLocation )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==KW_LOCATION) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:529:7: tableLocation
                    {
                    pushFollow(FOLLOW_tableLocation_in_createIndexStatement2625);
                    tableLocation121=tableLocation();
                    _fsp--;

                    stream_tableLocation.add(tableLocation121.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:530:7: ( tablePropertiesPrefixed )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==KW_TBLPROPERTIES) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:530:7: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2634);
                    tablePropertiesPrefixed122=tablePropertiesPrefixed();
                    _fsp--;

                    stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed122.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:531:7: ( indexComment )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==KW_COMMENT) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:531:7: indexComment
                    {
                    pushFollow(FOLLOW_indexComment_in_createIndexStatement2643);
                    indexComment123=indexComment();
                    _fsp--;

                    stream_indexComment.add(indexComment123.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: indexName, tab, autoRebuild, tableRowFormat, tableFileFormat, indexedCols, indexTblName, tablePropertiesPrefixed, indexComment, tableLocation, indexPropertiesPrefixed, typeName
            // token labels: typeName, indexName
            // rule labels: indexedCols, retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_typeName=new RewriteRuleTokenStream(adaptor,"token typeName",typeName);
            RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
            RewriteRuleSubtreeStream stream_indexedCols=new RewriteRuleSubtreeStream(adaptor,"token indexedCols",indexedCols!=null?indexedCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 532:5: -> ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:532:7: ^( TOK_CREATEINDEX $indexName $typeName $tab $indexedCols ( autoRebuild )? ( indexPropertiesPrefixed )? ( indexTblName )? ( tableRowFormat )? ( tableFileFormat )? ( tableLocation )? ( tablePropertiesPrefixed )? ( indexComment )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEINDEX, "TOK_CREATEINDEX"), root_1);

                adaptor.addChild(root_1, stream_indexName.next());
                adaptor.addChild(root_1, stream_typeName.next());
                adaptor.addChild(root_1, stream_tab.next());
                adaptor.addChild(root_1, stream_indexedCols.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:533:9: ( autoRebuild )?
                if ( stream_autoRebuild.hasNext() ) {
                    adaptor.addChild(root_1, stream_autoRebuild.next());

                }
                stream_autoRebuild.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:534:9: ( indexPropertiesPrefixed )?
                if ( stream_indexPropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexPropertiesPrefixed.next());

                }
                stream_indexPropertiesPrefixed.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:535:9: ( indexTblName )?
                if ( stream_indexTblName.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexTblName.next());

                }
                stream_indexTblName.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:536:9: ( tableRowFormat )?
                if ( stream_tableRowFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormat.next());

                }
                stream_tableRowFormat.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:537:9: ( tableFileFormat )?
                if ( stream_tableFileFormat.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableFileFormat.next());

                }
                stream_tableFileFormat.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:538:9: ( tableLocation )?
                if ( stream_tableLocation.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableLocation.next());

                }
                stream_tableLocation.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:539:9: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:540:9: ( indexComment )?
                if ( stream_indexComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_indexComment.next());

                }
                stream_indexComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createIndexStatement

    public static class indexComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexComment
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:543:1: indexComment : KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) ;
    public final indexComment_return indexComment() throws RecognitionException {
        indexComment_return retval = new indexComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT124=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT124_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("comment on an index");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:546:9: ( KW_COMMENT comment= StringLiteral -> ^( TOK_INDEXCOMMENT $comment) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:547:17: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT124=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_indexComment2800); 
            stream_KW_COMMENT.add(KW_COMMENT124);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_indexComment2804); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 547:51: -> ^( TOK_INDEXCOMMENT $comment)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:547:54: ^( TOK_INDEXCOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INDEXCOMMENT, "TOK_INDEXCOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexComment

    public static class autoRebuild_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start autoRebuild
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:550:1: autoRebuild : KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) ;
    public final autoRebuild_return autoRebuild() throws RecognitionException {
        autoRebuild_return retval = new autoRebuild_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_WITH125=null;
        Token KW_DEFERRED126=null;
        Token KW_REBUILD127=null;

        CommonTree KW_WITH125_tree=null;
        CommonTree KW_DEFERRED126_tree=null;
        CommonTree KW_REBUILD127_tree=null;
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_DEFERRED=new RewriteRuleTokenStream(adaptor,"token KW_DEFERRED");

         msgs.push("auto rebuild index");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:553:5: ( KW_WITH KW_DEFERRED KW_REBUILD -> ^( TOK_DEFERRED_REBUILDINDEX ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:553:7: KW_WITH KW_DEFERRED KW_REBUILD
            {
            KW_WITH125=(Token)input.LT(1);
            match(input,KW_WITH,FOLLOW_KW_WITH_in_autoRebuild2845); 
            stream_KW_WITH.add(KW_WITH125);

            KW_DEFERRED126=(Token)input.LT(1);
            match(input,KW_DEFERRED,FOLLOW_KW_DEFERRED_in_autoRebuild2847); 
            stream_KW_DEFERRED.add(KW_DEFERRED126);

            KW_REBUILD127=(Token)input.LT(1);
            match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_autoRebuild2849); 
            stream_KW_REBUILD.add(KW_REBUILD127);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 554:5: -> ^( TOK_DEFERRED_REBUILDINDEX )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:554:7: ^( TOK_DEFERRED_REBUILDINDEX )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DEFERRED_REBUILDINDEX, "TOK_DEFERRED_REBUILDINDEX"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end autoRebuild

    public static class indexTblName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexTblName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:557:1: indexTblName : KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) ;
    public final indexTblName_return indexTblName() throws RecognitionException {
        indexTblName_return retval = new indexTblName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IN128=null;
        Token KW_TABLE129=null;
        tableName_return indexTbl = null;


        CommonTree KW_IN128_tree=null;
        CommonTree KW_TABLE129_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
         msgs.push("index table name");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:560:5: ( KW_IN KW_TABLE indexTbl= tableName -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:560:7: KW_IN KW_TABLE indexTbl= tableName
            {
            KW_IN128=(Token)input.LT(1);
            match(input,KW_IN,FOLLOW_KW_IN_in_indexTblName2885); 
            stream_KW_IN.add(KW_IN128);

            KW_TABLE129=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_indexTblName2887); 
            stream_KW_TABLE.add(KW_TABLE129);

            pushFollow(FOLLOW_tableName_in_indexTblName2891);
            indexTbl=tableName();
            _fsp--;

            stream_tableName.add(indexTbl.getTree());

            // AST REWRITE
            // elements: indexTbl
            // token labels: 
            // rule labels: retval, indexTbl
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_indexTbl=new RewriteRuleSubtreeStream(adaptor,"token indexTbl",indexTbl!=null?indexTbl.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 561:5: -> ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:561:7: ^( TOK_CREATEINDEX_INDEXTBLNAME $indexTbl)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEINDEX_INDEXTBLNAME, "TOK_CREATEINDEX_INDEXTBLNAME"), root_1);

                adaptor.addChild(root_1, stream_indexTbl.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexTblName

    public static class indexPropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexPropertiesPrefixed
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:564:1: indexPropertiesPrefixed : KW_IDXPROPERTIES indexProperties ;
    public final indexPropertiesPrefixed_return indexPropertiesPrefixed() throws RecognitionException {
        indexPropertiesPrefixed_return retval = new indexPropertiesPrefixed_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_IDXPROPERTIES130=null;
        indexProperties_return indexProperties131 = null;


        CommonTree KW_IDXPROPERTIES130_tree=null;

         msgs.push("table properties with prefix"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:567:5: ( KW_IDXPROPERTIES indexProperties )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:568:9: KW_IDXPROPERTIES indexProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_IDXPROPERTIES130=(Token)input.LT(1);
            match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2938); 
            pushFollow(FOLLOW_indexProperties_in_indexPropertiesPrefixed2941);
            indexProperties131=indexProperties();
            _fsp--;

            adaptor.addChild(root_0, indexProperties131.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexPropertiesPrefixed

    public static class indexProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexProperties
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:571:1: indexProperties : LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) ;
    public final indexProperties_return indexProperties() throws RecognitionException {
        indexProperties_return retval = new indexProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN132=null;
        Token RPAREN134=null;
        indexPropertiesList_return indexPropertiesList133 = null;


        CommonTree LPAREN132_tree=null;
        CommonTree RPAREN134_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_indexPropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule indexPropertiesList");
         msgs.push("index properties"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:574:5: ( LPAREN indexPropertiesList RPAREN -> ^( TOK_INDEXPROPERTIES indexPropertiesList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:575:7: LPAREN indexPropertiesList RPAREN
            {
            LPAREN132=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_indexProperties2974); 
            stream_LPAREN.add(LPAREN132);

            pushFollow(FOLLOW_indexPropertiesList_in_indexProperties2976);
            indexPropertiesList133=indexPropertiesList();
            _fsp--;

            stream_indexPropertiesList.add(indexPropertiesList133.getTree());
            RPAREN134=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_indexProperties2978); 
            stream_RPAREN.add(RPAREN134);


            // AST REWRITE
            // elements: indexPropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 575:41: -> ^( TOK_INDEXPROPERTIES indexPropertiesList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:575:44: ^( TOK_INDEXPROPERTIES indexPropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INDEXPROPERTIES, "TOK_INDEXPROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_indexPropertiesList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexProperties

    public static class indexPropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start indexPropertiesList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:578:1: indexPropertiesList : keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) ;
    public final indexPropertiesList_return indexPropertiesList() throws RecognitionException {
        indexPropertiesList_return retval = new indexPropertiesList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA136=null;
        keyValueProperty_return keyValueProperty135 = null;

        keyValueProperty_return keyValueProperty137 = null;


        CommonTree COMMA136_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
         msgs.push("index properties list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:581:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:7: keyValueProperty ( COMMA keyValueProperty )*
            {
            pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3019);
            keyValueProperty135=keyValueProperty();
            _fsp--;

            stream_keyValueProperty.add(keyValueProperty135.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:24: ( COMMA keyValueProperty )*
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);

                if ( (LA42_0==COMMA) ) {
                    alt42=1;
                }


                switch (alt42) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:25: COMMA keyValueProperty
            	    {
            	    COMMA136=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_indexPropertiesList3022); 
            	    stream_COMMA.add(COMMA136);

            	    pushFollow(FOLLOW_keyValueProperty_in_indexPropertiesList3024);
            	    keyValueProperty137=keyValueProperty();
            	    _fsp--;

            	    stream_keyValueProperty.add(keyValueProperty137.getTree());

            	    }
            	    break;

            	default :
            	    break loop42;
                }
            } while (true);


            // AST REWRITE
            // elements: keyValueProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 582:50: -> ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:582:53: ^( TOK_INDEXPROPLIST ( keyValueProperty )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INDEXPROPLIST, "TOK_INDEXPROPLIST"), root_1);

                if ( !(stream_keyValueProperty.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_keyValueProperty.hasNext() ) {
                    adaptor.addChild(root_1, stream_keyValueProperty.next());

                }
                stream_keyValueProperty.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end indexPropertiesList

    public static class dropIndexStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropIndexStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:585:1: dropIndexStatement : KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) ;
    public final dropIndexStatement_return dropIndexStatement() throws RecognitionException {
        dropIndexStatement_return retval = new dropIndexStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token indexName=null;
        Token KW_DROP138=null;
        Token KW_INDEX139=null;
        Token KW_ON141=null;
        tableName_return tab = null;

        ifExists_return ifExists140 = null;


        CommonTree indexName_tree=null;
        CommonTree KW_DROP138_tree=null;
        CommonTree KW_INDEX139_tree=null;
        CommonTree KW_ON141_tree=null;
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop index statement");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:588:5: ( KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:588:7: KW_DROP KW_INDEX ( ifExists )? indexName= Identifier KW_ON tab= tableName
            {
            KW_DROP138=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropIndexStatement3062); 
            stream_KW_DROP.add(KW_DROP138);

            KW_INDEX139=(Token)input.LT(1);
            match(input,KW_INDEX,FOLLOW_KW_INDEX_in_dropIndexStatement3064); 
            stream_KW_INDEX.add(KW_INDEX139);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:588:24: ( ifExists )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==KW_IF) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:588:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropIndexStatement3066);
                    ifExists140=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists140.getTree());

                    }
                    break;

            }

            indexName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropIndexStatement3071); 
            stream_Identifier.add(indexName);

            KW_ON141=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_dropIndexStatement3073); 
            stream_KW_ON.add(KW_ON141);

            pushFollow(FOLLOW_tableName_in_dropIndexStatement3077);
            tab=tableName();
            _fsp--;

            stream_tableName.add(tab.getTree());

            // AST REWRITE
            // elements: tab, ifExists, indexName
            // token labels: indexName
            // rule labels: retval, tab
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_tab=new RewriteRuleSubtreeStream(adaptor,"token tab",tab!=null?tab.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 589:5: -> ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:589:7: ^( TOK_DROPINDEX $indexName $tab ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPINDEX, "TOK_DROPINDEX"), root_1);

                adaptor.addChild(root_1, stream_indexName.next());
                adaptor.addChild(root_1, stream_tab.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:589:39: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropIndexStatement

    public static class dropTableStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropTableStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:592:1: dropTableStatement : KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) ;
    public final dropTableStatement_return dropTableStatement() throws RecognitionException {
        dropTableStatement_return retval = new dropTableStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP142=null;
        Token KW_TABLE143=null;
        ifExists_return ifExists144 = null;

        tableName_return tableName145 = null;


        CommonTree KW_DROP142_tree=null;
        CommonTree KW_TABLE143_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:595:5: ( KW_DROP KW_TABLE ( ifExists )? tableName -> ^( TOK_DROPTABLE tableName ( ifExists )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:595:7: KW_DROP KW_TABLE ( ifExists )? tableName
            {
            KW_DROP142=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropTableStatement3122); 
            stream_KW_DROP.add(KW_DROP142);

            KW_TABLE143=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_dropTableStatement3124); 
            stream_KW_TABLE.add(KW_TABLE143);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:595:24: ( ifExists )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==KW_IF) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:595:24: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropTableStatement3126);
                    ifExists144=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists144.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_tableName_in_dropTableStatement3129);
            tableName145=tableName();
            _fsp--;

            stream_tableName.add(tableName145.getTree());

            // AST REWRITE
            // elements: ifExists, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 595:44: -> ^( TOK_DROPTABLE tableName ( ifExists )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:595:47: ^( TOK_DROPTABLE tableName ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPTABLE, "TOK_DROPTABLE"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:595:73: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropTableStatement

    public static class alterStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:598:1: alterStatement : KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix ) ;
    public final alterStatement_return alterStatement() throws RecognitionException {
        alterStatement_return retval = new alterStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ALTER146=null;
        Token KW_TABLE147=null;
        Token KW_VIEW149=null;
        Token KW_INDEX151=null;
        Token KW_DATABASE153=null;
        alterTableStatementSuffix_return alterTableStatementSuffix148 = null;

        alterViewStatementSuffix_return alterViewStatementSuffix150 = null;

        alterIndexStatementSuffix_return alterIndexStatementSuffix152 = null;

        alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix154 = null;


        CommonTree KW_ALTER146_tree=null;
        CommonTree KW_TABLE147_tree=null;
        CommonTree KW_VIEW149_tree=null;
        CommonTree KW_INDEX151_tree=null;
        CommonTree KW_DATABASE153_tree=null;

         msgs.push("alter statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:601:5: ( KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:601:7: KW_ALTER ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix )
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_ALTER146=(Token)input.LT(1);
            match(input,KW_ALTER,FOLLOW_KW_ALTER_in_alterStatement3167); 
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:602:9: ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix )
            int alt45=4;
            switch ( input.LA(1) ) {
            case KW_TABLE:
                {
                alt45=1;
                }
                break;
            case KW_VIEW:
                {
                alt45=2;
                }
                break;
            case KW_INDEX:
                {
                alt45=3;
                }
                break;
            case KW_DATABASE:
                {
                alt45=4;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("602:9: ( KW_TABLE alterTableStatementSuffix | KW_VIEW alterViewStatementSuffix | KW_INDEX alterIndexStatementSuffix | KW_DATABASE alterDatabaseStatementSuffix )", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:603:13: KW_TABLE alterTableStatementSuffix
                    {
                    KW_TABLE147=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_alterStatement3192); 
                    pushFollow(FOLLOW_alterTableStatementSuffix_in_alterStatement3195);
                    alterTableStatementSuffix148=alterTableStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterTableStatementSuffix148.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:605:13: KW_VIEW alterViewStatementSuffix
                    {
                    KW_VIEW149=(Token)input.LT(1);
                    match(input,KW_VIEW,FOLLOW_KW_VIEW_in_alterStatement3219); 
                    pushFollow(FOLLOW_alterViewStatementSuffix_in_alterStatement3222);
                    alterViewStatementSuffix150=alterViewStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterViewStatementSuffix150.getTree());

                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:607:13: KW_INDEX alterIndexStatementSuffix
                    {
                    KW_INDEX151=(Token)input.LT(1);
                    match(input,KW_INDEX,FOLLOW_KW_INDEX_in_alterStatement3246); 
                    pushFollow(FOLLOW_alterIndexStatementSuffix_in_alterStatement3249);
                    alterIndexStatementSuffix152=alterIndexStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterIndexStatementSuffix152.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:609:13: KW_DATABASE alterDatabaseStatementSuffix
                    {
                    KW_DATABASE153=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_alterStatement3273); 
                    pushFollow(FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3276);
                    alterDatabaseStatementSuffix154=alterDatabaseStatementSuffix();
                    _fsp--;

                    adaptor.addChild(root_0, alterDatabaseStatementSuffix154.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatement

    public static class alterTableStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTableStatementSuffix
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:613:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );
    public final alterTableStatementSuffix_return alterTableStatementSuffix() throws RecognitionException {
        alterTableStatementSuffix_return retval = new alterTableStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterStatementSuffixRename_return alterStatementSuffixRename155 = null;

        alterStatementSuffixAddCol_return alterStatementSuffixAddCol156 = null;

        alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol157 = null;

        alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions158 = null;

        alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions159 = null;

        alterStatementSuffixTouch_return alterStatementSuffixTouch160 = null;

        alterStatementSuffixArchive_return alterStatementSuffixArchive161 = null;

        alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive162 = null;

        alterStatementSuffixProperties_return alterStatementSuffixProperties163 = null;

        alterTblPartitionStatement_return alterTblPartitionStatement164 = null;

        alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby165 = null;

        alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby166 = null;



         msgs.push("alter table statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:616:5: ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby )
            int alt46=12;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==Identifier) ) {
                switch ( input.LA(2) ) {
                case KW_UNSET:
                    {
                    alt46=9;
                    }
                    break;
                case KW_SET:
                    {
                    int LA46_3 = input.LA(3);

                    if ( (LA46_3==KW_LOCATION||(LA46_3>=KW_SERDE && LA46_3<=KW_SKEWED)) ) {
                        alt46=10;
                    }
                    else if ( (LA46_3==KW_TBLPROPERTIES) ) {
                        alt46=9;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("613:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );", 46, 3, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_ADD:
                    {
                    int LA46_4 = input.LA(3);

                    if ( (LA46_4==KW_IF||LA46_4==KW_PARTITION) ) {
                        alt46=5;
                    }
                    else if ( (LA46_4==KW_COLUMNS) ) {
                        alt46=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("613:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );", 46, 4, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_NOT:
                    {
                    int LA46_5 = input.LA(3);

                    if ( (LA46_5==KW_CLUSTERED) ) {
                        alt46=11;
                    }
                    else if ( (LA46_5==KW_STORED||LA46_5==KW_SKEWED) ) {
                        alt46=12;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("613:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );", 46, 5, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_RENAME:
                    {
                    int LA46_6 = input.LA(3);

                    if ( (LA46_6==KW_TO) ) {
                        alt46=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("613:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );", 46, 6, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_TOUCH:
                    {
                    alt46=6;
                    }
                    break;
                case KW_ARCHIVE:
                    {
                    alt46=7;
                    }
                    break;
                case KW_UNARCHIVE:
                    {
                    alt46=8;
                    }
                    break;
                case KW_CHANGE:
                    {
                    alt46=3;
                    }
                    break;
                case KW_DROP:
                    {
                    alt46=4;
                    }
                    break;
                case KW_INTO:
                case KW_CONCATENATE:
                case KW_ENABLE:
                case KW_DISABLE:
                case KW_PARTITION:
                    {
                    alt46=10;
                    }
                    break;
                case KW_CLUSTERED:
                    {
                    alt46=11;
                    }
                    break;
                case KW_SKEWED:
                    {
                    alt46=12;
                    }
                    break;
                case KW_REPLACE:
                    {
                    alt46=2;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("613:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );", 46, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("613:1: alterTableStatementSuffix : ( alterStatementSuffixRename | alterStatementSuffixAddCol | alterStatementSuffixRenameCol | alterStatementSuffixDropPartitions | alterStatementSuffixAddPartitions | alterStatementSuffixTouch | alterStatementSuffixArchive | alterStatementSuffixUnArchive | alterStatementSuffixProperties | alterTblPartitionStatement | alterStatementSuffixClusterbySortby | alterStatementSuffixSkewedby );", 46, 0, input);

                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:616:7: alterStatementSuffixRename
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3313);
                    alterStatementSuffixRename155=alterStatementSuffixRename();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRename155.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:617:7: alterStatementSuffixAddCol
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3321);
                    alterStatementSuffixAddCol156=alterStatementSuffixAddCol();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddCol156.getTree());

                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:618:7: alterStatementSuffixRenameCol
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3329);
                    alterStatementSuffixRenameCol157=alterStatementSuffixRenameCol();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRenameCol157.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:619:7: alterStatementSuffixDropPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3337);
                    alterStatementSuffixDropPartitions158=alterStatementSuffixDropPartitions();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixDropPartitions158.getTree());

                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:620:7: alterStatementSuffixAddPartitions
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3345);
                    alterStatementSuffixAddPartitions159=alterStatementSuffixAddPartitions();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixAddPartitions159.getTree());

                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:621:7: alterStatementSuffixTouch
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3353);
                    alterStatementSuffixTouch160=alterStatementSuffixTouch();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixTouch160.getTree());

                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:622:7: alterStatementSuffixArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3361);
                    alterStatementSuffixArchive161=alterStatementSuffixArchive();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixArchive161.getTree());

                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:623:7: alterStatementSuffixUnArchive
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3369);
                    alterStatementSuffixUnArchive162=alterStatementSuffixUnArchive();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixUnArchive162.getTree());

                    }
                    break;
                case 9 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:624:7: alterStatementSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3377);
                    alterStatementSuffixProperties163=alterStatementSuffixProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixProperties163.getTree());

                    }
                    break;
                case 10 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:625:7: alterTblPartitionStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3385);
                    alterTblPartitionStatement164=alterTblPartitionStatement();
                    _fsp--;

                    adaptor.addChild(root_0, alterTblPartitionStatement164.getTree());

                    }
                    break;
                case 11 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:626:7: alterStatementSuffixClusterbySortby
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3393);
                    alterStatementSuffixClusterbySortby165=alterStatementSuffixClusterbySortby();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixClusterbySortby165.getTree());

                    }
                    break;
                case 12 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:627:7: alterStatementSuffixSkewedby
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3401);
                    alterStatementSuffixSkewedby166=alterStatementSuffixSkewedby();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixSkewedby166.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTableStatementSuffix

    public static class alterViewStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterViewStatementSuffix
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:630:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) | name= tableName KW_AS selectStatement -> ^( TOK_ALTERVIEW_AS $name selectStatement ) );
    public final alterViewStatementSuffix_return alterViewStatementSuffix() throws RecognitionException {
        alterViewStatementSuffix_return retval = new alterViewStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_AS171=null;
        tableName_return name = null;

        alterViewSuffixProperties_return alterViewSuffixProperties167 = null;

        alterStatementSuffixRename_return alterStatementSuffixRename168 = null;

        alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions169 = null;

        alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions170 = null;

        selectStatement_return selectStatement172 = null;


        CommonTree KW_AS171_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_alterStatementSuffixAddPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixAddPartitions");
        RewriteRuleSubtreeStream stream_alterStatementSuffixRename=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixRename");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_alterStatementSuffixDropPartitions=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementSuffixDropPartitions");
         msgs.push("alter view statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:633:5: ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) | name= tableName KW_AS selectStatement -> ^( TOK_ALTERVIEW_AS $name selectStatement ) )
            int alt47=5;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==Identifier) ) {
                switch ( input.LA(2) ) {
                case KW_RENAME:
                    {
                    alt47=2;
                    }
                    break;
                case KW_ADD:
                    {
                    alt47=3;
                    }
                    break;
                case KW_SET:
                case KW_UNSET:
                    {
                    alt47=1;
                    }
                    break;
                case KW_AS:
                case DOT:
                    {
                    alt47=5;
                    }
                    break;
                case KW_DROP:
                    {
                    alt47=4;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("630:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) | name= tableName KW_AS selectStatement -> ^( TOK_ALTERVIEW_AS $name selectStatement ) );", 47, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("630:1: alterViewStatementSuffix : ( alterViewSuffixProperties | alterStatementSuffixRename -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename ) | alterStatementSuffixAddPartitions -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions ) | alterStatementSuffixDropPartitions -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions ) | name= tableName KW_AS selectStatement -> ^( TOK_ALTERVIEW_AS $name selectStatement ) );", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:633:7: alterViewSuffixProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3428);
                    alterViewSuffixProperties167=alterViewSuffixProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterViewSuffixProperties167.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:634:7: alterStatementSuffixRename
                    {
                    pushFollow(FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3436);
                    alterStatementSuffixRename168=alterStatementSuffixRename();
                    _fsp--;

                    stream_alterStatementSuffixRename.add(alterStatementSuffixRename168.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixRename
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 635:9: -> ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:635:12: ^( TOK_ALTERVIEW_RENAME alterStatementSuffixRename )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_RENAME, "TOK_ALTERVIEW_RENAME"), root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixRename.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:636:7: alterStatementSuffixAddPartitions
                    {
                    pushFollow(FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3460);
                    alterStatementSuffixAddPartitions169=alterStatementSuffixAddPartitions();
                    _fsp--;

                    stream_alterStatementSuffixAddPartitions.add(alterStatementSuffixAddPartitions169.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixAddPartitions
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 637:9: -> ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:637:12: ^( TOK_ALTERVIEW_ADDPARTS alterStatementSuffixAddPartitions )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_ADDPARTS, "TOK_ALTERVIEW_ADDPARTS"), root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixAddPartitions.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:638:7: alterStatementSuffixDropPartitions
                    {
                    pushFollow(FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3484);
                    alterStatementSuffixDropPartitions170=alterStatementSuffixDropPartitions();
                    _fsp--;

                    stream_alterStatementSuffixDropPartitions.add(alterStatementSuffixDropPartitions170.getTree());

                    // AST REWRITE
                    // elements: alterStatementSuffixDropPartitions
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 639:9: -> ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:639:12: ^( TOK_ALTERVIEW_DROPPARTS alterStatementSuffixDropPartitions )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_DROPPARTS, "TOK_ALTERVIEW_DROPPARTS"), root_1);

                        adaptor.addChild(root_1, stream_alterStatementSuffixDropPartitions.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:640:7: name= tableName KW_AS selectStatement
                    {
                    pushFollow(FOLLOW_tableName_in_alterViewStatementSuffix3510);
                    name=tableName();
                    _fsp--;

                    stream_tableName.add(name.getTree());
                    KW_AS171=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_alterViewStatementSuffix3512); 
                    stream_KW_AS.add(KW_AS171);

                    pushFollow(FOLLOW_selectStatement_in_alterViewStatementSuffix3514);
                    selectStatement172=selectStatement();
                    _fsp--;

                    stream_selectStatement.add(selectStatement172.getTree());

                    // AST REWRITE
                    // elements: name, selectStatement
                    // token labels: 
                    // rule labels: retval, name
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 641:9: -> ^( TOK_ALTERVIEW_AS $name selectStatement )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:641:12: ^( TOK_ALTERVIEW_AS $name selectStatement )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_AS, "TOK_ALTERVIEW_AS"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_selectStatement.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterViewStatementSuffix

    public static class alterIndexStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterIndexStatementSuffix
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:644:1: alterIndexStatementSuffix : indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) ;
    public final alterIndexStatementSuffix_return alterIndexStatementSuffix() throws RecognitionException {
        alterIndexStatementSuffix_return retval = new alterIndexStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token indexName=null;
        Token tableNameId=null;
        Token KW_ON173=null;
        Token KW_REBUILD175=null;
        Token KW_SET176=null;
        Token KW_IDXPROPERTIES177=null;
        partitionSpec_return partitionSpec174 = null;

        indexProperties_return indexProperties178 = null;


        CommonTree indexName_tree=null;
        CommonTree tableNameId_tree=null;
        CommonTree KW_ON173_tree=null;
        CommonTree KW_REBUILD175_tree=null;
        CommonTree KW_SET176_tree=null;
        CommonTree KW_IDXPROPERTIES177_tree=null;
        RewriteRuleTokenStream stream_KW_REBUILD=new RewriteRuleTokenStream(adaptor,"token KW_REBUILD");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_IDXPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_IDXPROPERTIES");
        RewriteRuleSubtreeStream stream_indexProperties=new RewriteRuleSubtreeStream(adaptor,"rule indexProperties");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("alter index statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:647:5: (indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:647:7: indexName= Identifier ( KW_ON tableNameId= Identifier ) ( partitionSpec )? ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
            {
            indexName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3562); 
            stream_Identifier.add(indexName);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:648:7: ( KW_ON tableNameId= Identifier )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:648:8: KW_ON tableNameId= Identifier
            {
            KW_ON173=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_alterIndexStatementSuffix3571); 
            stream_KW_ON.add(KW_ON173);

            tableNameId=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterIndexStatementSuffix3575); 
            stream_Identifier.add(tableNameId);


            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:649:7: ( partitionSpec )?
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==KW_PARTITION) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:649:7: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_alterIndexStatementSuffix3584);
                    partitionSpec174=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec174.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:650:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==KW_REBUILD) ) {
                alt49=1;
            }
            else if ( (LA49_0==KW_SET) ) {
                alt49=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("650:5: ( KW_REBUILD -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? ) | KW_SET KW_IDXPROPERTIES indexProperties -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties ) )", 49, 0, input);

                throw nvae;
            }
            switch (alt49) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:651:7: KW_REBUILD
                    {
                    KW_REBUILD175=(Token)input.LT(1);
                    match(input,KW_REBUILD,FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3599); 
                    stream_KW_REBUILD.add(KW_REBUILD175);


                    // AST REWRITE
                    // elements: indexName, tableNameId, partitionSpec
                    // token labels: tableNameId, indexName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
                    RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 652:7: -> ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:652:9: ^( TOK_ALTERINDEX_REBUILD $tableNameId $indexName ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERINDEX_REBUILD, "TOK_ALTERINDEX_REBUILD"), root_1);

                        adaptor.addChild(root_1, stream_tableNameId.next());
                        adaptor.addChild(root_1, stream_indexName.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:652:58: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:654:7: KW_SET KW_IDXPROPERTIES indexProperties
                    {
                    KW_SET176=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterIndexStatementSuffix3633); 
                    stream_KW_SET.add(KW_SET176);

                    KW_IDXPROPERTIES177=(Token)input.LT(1);
                    match(input,KW_IDXPROPERTIES,FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3635); 
                    stream_KW_IDXPROPERTIES.add(KW_IDXPROPERTIES177);

                    pushFollow(FOLLOW_indexProperties_in_alterIndexStatementSuffix3643);
                    indexProperties178=indexProperties();
                    _fsp--;

                    stream_indexProperties.add(indexProperties178.getTree());

                    // AST REWRITE
                    // elements: indexProperties, indexName, tableNameId
                    // token labels: tableNameId, indexName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tableNameId=new RewriteRuleTokenStream(adaptor,"token tableNameId",tableNameId);
                    RewriteRuleTokenStream stream_indexName=new RewriteRuleTokenStream(adaptor,"token indexName",indexName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 656:7: -> ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:656:9: ^( TOK_ALTERINDEX_PROPERTIES $tableNameId $indexName indexProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERINDEX_PROPERTIES, "TOK_ALTERINDEX_PROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_tableNameId.next());
                        adaptor.addChild(root_1, stream_indexName.next());
                        adaptor.addChild(root_1, stream_indexProperties.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterIndexStatementSuffix

    public static class alterDatabaseStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterDatabaseStatementSuffix
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:660:1: alterDatabaseStatementSuffix : alterDatabaseSuffixProperties ;
    public final alterDatabaseStatementSuffix_return alterDatabaseStatementSuffix() throws RecognitionException {
        alterDatabaseStatementSuffix_return retval = new alterDatabaseStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties179 = null;



         msgs.push("alter database statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:663:5: ( alterDatabaseSuffixProperties )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:663:7: alterDatabaseSuffixProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3695);
            alterDatabaseSuffixProperties179=alterDatabaseSuffixProperties();
            _fsp--;

            adaptor.addChild(root_0, alterDatabaseSuffixProperties179.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterDatabaseStatementSuffix

    public static class alterDatabaseSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterDatabaseSuffixProperties
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:666:1: alterDatabaseSuffixProperties : name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) ;
    public final alterDatabaseSuffixProperties_return alterDatabaseSuffixProperties() throws RecognitionException {
        alterDatabaseSuffixProperties_return retval = new alterDatabaseSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET180=null;
        Token KW_DBPROPERTIES181=null;
        dbProperties_return dbProperties182 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET180_tree=null;
        CommonTree KW_DBPROPERTIES181_tree=null;
        RewriteRuleTokenStream stream_KW_DBPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_DBPROPERTIES");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_dbProperties=new RewriteRuleSubtreeStream(adaptor,"rule dbProperties");
         msgs.push("alter database properties statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:669:5: (name= Identifier KW_SET KW_DBPROPERTIES dbProperties -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:669:7: name= Identifier KW_SET KW_DBPROPERTIES dbProperties
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterDatabaseSuffixProperties3724); 
            stream_Identifier.add(name);

            KW_SET180=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3726); 
            stream_KW_SET.add(KW_SET180);

            KW_DBPROPERTIES181=(Token)input.LT(1);
            match(input,KW_DBPROPERTIES,FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3728); 
            stream_KW_DBPROPERTIES.add(KW_DBPROPERTIES181);

            pushFollow(FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3730);
            dbProperties182=dbProperties();
            _fsp--;

            stream_dbProperties.add(dbProperties182.getTree());

            // AST REWRITE
            // elements: dbProperties, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 670:5: -> ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:670:8: ^( TOK_ALTERDATABASE_PROPERTIES $name dbProperties )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERDATABASE_PROPERTIES, "TOK_ALTERDATABASE_PROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                adaptor.addChild(root_1, stream_dbProperties.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterDatabaseSuffixProperties

    public static class alterStatementSuffixRename_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRename
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:673:1: alterStatementSuffixRename : oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) ;
    public final alterStatementSuffixRename_return alterStatementSuffixRename() throws RecognitionException {
        alterStatementSuffixRename_return retval = new alterStatementSuffixRename_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token KW_RENAME183=null;
        Token KW_TO184=null;

        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree KW_RENAME183_tree=null;
        CommonTree KW_TO184_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");

         msgs.push("rename statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:676:5: (oldName= Identifier KW_RENAME KW_TO newName= Identifier -> ^( TOK_ALTERTABLE_RENAME $oldName $newName) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:676:7: oldName= Identifier KW_RENAME KW_TO newName= Identifier
            {
            oldName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3774); 
            stream_Identifier.add(oldName);

            KW_RENAME183=(Token)input.LT(1);
            match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRename3776); 
            stream_KW_RENAME.add(KW_RENAME183);

            KW_TO184=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRename3778); 
            stream_KW_TO.add(KW_TO184);

            newName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRename3782); 
            stream_Identifier.add(newName);


            // AST REWRITE
            // elements: newName, oldName
            // token labels: newName, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 677:5: -> ^( TOK_ALTERTABLE_RENAME $oldName $newName)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:677:8: ^( TOK_ALTERTABLE_RENAME $oldName $newName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAME, "TOK_ALTERTABLE_RENAME"), root_1);

                adaptor.addChild(root_1, stream_oldName.next());
                adaptor.addChild(root_1, stream_newName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRename

    public static class alterStatementSuffixAddCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixAddCol
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:680:1: alterStatementSuffixAddCol : Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) ;
    public final alterStatementSuffixAddCol_return alterStatementSuffixAddCol() throws RecognitionException {
        alterStatementSuffixAddCol_return retval = new alterStatementSuffixAddCol_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token add=null;
        Token replace=null;
        Token Identifier185=null;
        Token KW_COLUMNS186=null;
        Token LPAREN187=null;
        Token RPAREN189=null;
        columnNameTypeList_return columnNameTypeList188 = null;


        CommonTree add_tree=null;
        CommonTree replace_tree=null;
        CommonTree Identifier185_tree=null;
        CommonTree KW_COLUMNS186_tree=null;
        CommonTree LPAREN187_tree=null;
        CommonTree RPAREN189_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REPLACE=new RewriteRuleTokenStream(adaptor,"token KW_REPLACE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("add column statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:5: ( Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList ) -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:7: Identifier (add= KW_ADD | replace= KW_REPLACE ) KW_COLUMNS LPAREN columnNameTypeList RPAREN
            {
            Identifier185=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddCol3825); 
            stream_Identifier.add(Identifier185);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:18: (add= KW_ADD | replace= KW_REPLACE )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==KW_ADD) ) {
                alt50=1;
            }
            else if ( (LA50_0==KW_REPLACE) ) {
                alt50=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("683:18: (add= KW_ADD | replace= KW_REPLACE )", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:19: add= KW_ADD
                    {
                    add=(Token)input.LT(1);
                    match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3830); 
                    stream_KW_ADD.add(add);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:683:32: replace= KW_REPLACE
                    {
                    replace=(Token)input.LT(1);
                    match(input,KW_REPLACE,FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3836); 
                    stream_KW_REPLACE.add(replace);


                    }
                    break;

            }

            KW_COLUMNS186=(Token)input.LT(1);
            match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3839); 
            stream_KW_COLUMNS.add(KW_COLUMNS186);

            LPAREN187=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_alterStatementSuffixAddCol3841); 
            stream_LPAREN.add(LPAREN187);

            pushFollow(FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3843);
            columnNameTypeList188=columnNameTypeList();
            _fsp--;

            stream_columnNameTypeList.add(columnNameTypeList188.getTree());
            RPAREN189=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_alterStatementSuffixAddCol3845); 
            stream_RPAREN.add(RPAREN189);


            // AST REWRITE
            // elements: Identifier, columnNameTypeList, columnNameTypeList, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 684:5: -> {$add != null}? ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
            if (add != null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:684:24: ^( TOK_ALTERTABLE_ADDCOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ADDCOLS, "TOK_ALTERTABLE_ADDCOLS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 685:5: -> ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:685:24: ^( TOK_ALTERTABLE_REPLACECOLS Identifier columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_REPLACECOLS, "TOK_ALTERTABLE_REPLACECOLS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixAddCol

    public static class alterStatementSuffixRenameCol_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRenameCol
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:688:1: alterStatementSuffixRenameCol : Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) ;
    public final alterStatementSuffixRenameCol_return alterStatementSuffixRenameCol() throws RecognitionException {
        alterStatementSuffixRenameCol_return retval = new alterStatementSuffixRenameCol_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token oldName=null;
        Token newName=null;
        Token comment=null;
        Token Identifier190=null;
        Token KW_CHANGE191=null;
        Token KW_COLUMN192=null;
        Token KW_COMMENT194=null;
        colType_return colType193 = null;

        alterStatementChangeColPosition_return alterStatementChangeColPosition195 = null;


        CommonTree oldName_tree=null;
        CommonTree newName_tree=null;
        CommonTree comment_tree=null;
        CommonTree Identifier190_tree=null;
        CommonTree KW_CHANGE191_tree=null;
        CommonTree KW_COLUMN192_tree=null;
        CommonTree KW_COMMENT194_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_KW_COLUMN=new RewriteRuleTokenStream(adaptor,"token KW_COLUMN");
        RewriteRuleTokenStream stream_KW_CHANGE=new RewriteRuleTokenStream(adaptor,"token KW_CHANGE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_alterStatementChangeColPosition=new RewriteRuleSubtreeStream(adaptor,"rule alterStatementChangeColPosition");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("rename column name"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:5: ( Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )? -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:7: Identifier KW_CHANGE ( KW_COLUMN )? oldName= Identifier newName= Identifier colType ( KW_COMMENT comment= StringLiteral )? ( alterStatementChangeColPosition )?
            {
            Identifier190=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3918); 
            stream_Identifier.add(Identifier190);

            KW_CHANGE191=(Token)input.LT(1);
            match(input,KW_CHANGE,FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3920); 
            stream_KW_CHANGE.add(KW_CHANGE191);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:28: ( KW_COLUMN )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==KW_COLUMN) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:28: KW_COLUMN
                    {
                    KW_COLUMN192=(Token)input.LT(1);
                    match(input,KW_COLUMN,FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3922); 
                    stream_KW_COLUMN.add(KW_COLUMN192);


                    }
                    break;

            }

            oldName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3927); 
            stream_Identifier.add(oldName);

            newName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixRenameCol3931); 
            stream_Identifier.add(newName);

            pushFollow(FOLLOW_colType_in_alterStatementSuffixRenameCol3933);
            colType193=colType();
            _fsp--;

            stream_colType.add(colType193.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:85: ( KW_COMMENT comment= StringLiteral )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==KW_COMMENT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:86: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT194=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3936); 
                    stream_KW_COMMENT.add(KW_COMMENT194);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3940); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:121: ( alterStatementChangeColPosition )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( ((LA53_0>=KW_FIRST && LA53_0<=KW_AFTER)) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:691:121: alterStatementChangeColPosition
                    {
                    pushFollow(FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3944);
                    alterStatementChangeColPosition195=alterStatementChangeColPosition();
                    _fsp--;

                    stream_alterStatementChangeColPosition.add(alterStatementChangeColPosition195.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: newName, colType, oldName, comment, alterStatementChangeColPosition, Identifier
            // token labels: newName, comment, oldName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newName=new RewriteRuleTokenStream(adaptor,"token newName",newName);
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_oldName=new RewriteRuleTokenStream(adaptor,"token oldName",oldName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 692:5: -> ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:692:7: ^( TOK_ALTERTABLE_RENAMECOL Identifier $oldName $newName colType ( $comment)? ( alterStatementChangeColPosition )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAMECOL, "TOK_ALTERTABLE_RENAMECOL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_oldName.next());
                adaptor.addChild(root_1, stream_newName.next());
                adaptor.addChild(root_1, stream_colType.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:692:71: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.next());

                }
                stream_comment.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:692:81: ( alterStatementChangeColPosition )?
                if ( stream_alterStatementChangeColPosition.hasNext() ) {
                    adaptor.addChild(root_1, stream_alterStatementChangeColPosition.next());

                }
                stream_alterStatementChangeColPosition.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRenameCol

    public static class alterStatementChangeColPosition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementChangeColPosition
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:695:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );
    public final alterStatementChangeColPosition_return alterStatementChangeColPosition() throws RecognitionException {
        alterStatementChangeColPosition_return retval = new alterStatementChangeColPosition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token first=null;
        Token afterCol=null;
        Token KW_AFTER196=null;

        CommonTree first_tree=null;
        CommonTree afterCol_tree=null;
        CommonTree KW_AFTER196_tree=null;
        RewriteRuleTokenStream stream_KW_AFTER=new RewriteRuleTokenStream(adaptor,"token KW_AFTER");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:696:5: (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) )
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==KW_FIRST) ) {
                alt54=1;
            }
            else if ( (LA54_0==KW_AFTER) ) {
                alt54=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("695:1: alterStatementChangeColPosition : (first= KW_FIRST | KW_AFTER afterCol= Identifier -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION ) -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol) );", 54, 0, input);

                throw nvae;
            }
            switch (alt54) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:696:7: first= KW_FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    first=(Token)input.LT(1);
                    match(input,KW_FIRST,FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3990); 
                    first_tree = (CommonTree)adaptor.create(first);
                    adaptor.addChild(root_0, first_tree);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:696:22: KW_AFTER afterCol= Identifier
                    {
                    KW_AFTER196=(Token)input.LT(1);
                    match(input,KW_AFTER,FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3992); 
                    stream_KW_AFTER.add(KW_AFTER196);

                    afterCol=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementChangeColPosition3996); 
                    stream_Identifier.add(afterCol);


                    // AST REWRITE
                    // elements: afterCol
                    // token labels: afterCol
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_afterCol=new RewriteRuleTokenStream(adaptor,"token afterCol",afterCol);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 697:5: -> {$first != null}? ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                    if (first != null) {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:697:25: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 698:5: -> ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:698:8: ^( TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION $afterCol)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION, "TOK_ALTERTABLE_CHANGECOL_AFTER_POSITION"), root_1);

                        adaptor.addChild(root_1, stream_afterCol.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementChangeColPosition

    public static class alterStatementSuffixAddPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixAddPartitions
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:701:1: alterStatementSuffixAddPartitions : Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) ;
    public final alterStatementSuffixAddPartitions_return alterStatementSuffixAddPartitions() throws RecognitionException {
        alterStatementSuffixAddPartitions_return retval = new alterStatementSuffixAddPartitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier197=null;
        Token KW_ADD198=null;
        ifNotExists_return ifNotExists199 = null;

        partitionSpec_return partitionSpec200 = null;

        partitionLocation_return partitionLocation201 = null;

        partitionSpec_return partitionSpec202 = null;

        partitionLocation_return partitionLocation203 = null;


        CommonTree Identifier197_tree=null;
        CommonTree KW_ADD198_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ADD=new RewriteRuleTokenStream(adaptor,"token KW_ADD");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_partitionLocation=new RewriteRuleSubtreeStream(adaptor,"rule partitionLocation");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
         msgs.push("add partition statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:5: ( Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )* -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:7: Identifier KW_ADD ( ifNotExists )? partitionSpec ( partitionLocation )? ( partitionSpec ( partitionLocation )? )*
            {
            Identifier197=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixAddPartitions4048); 
            stream_Identifier.add(Identifier197);

            KW_ADD198=(Token)input.LT(1);
            match(input,KW_ADD,FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4050); 
            stream_KW_ADD.add(KW_ADD198);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:25: ( ifNotExists )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==KW_IF) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:25: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4052);
                    ifNotExists199=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists199.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions4055);
            partitionSpec200=partitionSpec();
            _fsp--;

            stream_partitionSpec.add(partitionSpec200.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:52: ( partitionLocation )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==KW_LOCATION) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:52: partitionLocation
                    {
                    pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions4057);
                    partitionLocation201=partitionLocation();
                    _fsp--;

                    stream_partitionLocation.add(partitionLocation201.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:71: ( partitionSpec ( partitionLocation )? )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==KW_PARTITION) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:72: partitionSpec ( partitionLocation )?
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions4061);
            	    partitionSpec202=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec202.getTree());
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:86: ( partitionLocation )?
            	    int alt57=2;
            	    int LA57_0 = input.LA(1);

            	    if ( (LA57_0==KW_LOCATION) ) {
            	        alt57=1;
            	    }
            	    switch (alt57) {
            	        case 1 :
            	            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:704:86: partitionLocation
            	            {
            	            pushFollow(FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions4063);
            	            partitionLocation203=partitionLocation();
            	            _fsp--;

            	            stream_partitionLocation.add(partitionLocation203.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);


            // AST REWRITE
            // elements: partitionSpec, partitionLocation, Identifier, ifNotExists
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 705:5: -> ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:705:8: ^( TOK_ALTERTABLE_ADDPARTS Identifier ( ifNotExists )? ( partitionSpec ( partitionLocation )? )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ADDPARTS, "TOK_ALTERTABLE_ADDPARTS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:705:45: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                if ( !(stream_partitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:705:73: ( partitionLocation )?
                    if ( stream_partitionLocation.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionLocation.next());

                    }
                    stream_partitionLocation.reset();

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixAddPartitions

    public static class alterStatementSuffixTouch_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixTouch
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:708:1: alterStatementSuffixTouch : Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixTouch_return alterStatementSuffixTouch() throws RecognitionException {
        alterStatementSuffixTouch_return retval = new alterStatementSuffixTouch_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier204=null;
        Token KW_TOUCH205=null;
        partitionSpec_return partitionSpec206 = null;


        CommonTree Identifier204_tree=null;
        CommonTree KW_TOUCH205_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TOUCH=new RewriteRuleTokenStream(adaptor,"token KW_TOUCH");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("touch statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:711:5: ( Identifier KW_TOUCH ( partitionSpec )* -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:711:7: Identifier KW_TOUCH ( partitionSpec )*
            {
            Identifier204=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixTouch4116); 
            stream_Identifier.add(Identifier204);

            KW_TOUCH205=(Token)input.LT(1);
            match(input,KW_TOUCH,FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch4118); 
            stream_KW_TOUCH.add(KW_TOUCH205);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:711:27: ( partitionSpec )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==KW_PARTITION) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:711:28: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixTouch4121);
            	    partitionSpec206=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec206.getTree());

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 712:5: -> ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:712:8: ^( TOK_ALTERTABLE_TOUCH Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_TOUCH, "TOK_ALTERTABLE_TOUCH"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:712:42: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixTouch

    public static class alterStatementSuffixArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixArchive
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:715:1: alterStatementSuffixArchive : Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixArchive_return alterStatementSuffixArchive() throws RecognitionException {
        alterStatementSuffixArchive_return retval = new alterStatementSuffixArchive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier207=null;
        Token KW_ARCHIVE208=null;
        partitionSpec_return partitionSpec209 = null;


        CommonTree Identifier207_tree=null;
        CommonTree KW_ARCHIVE208_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_ARCHIVE");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("archive statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:5: ( Identifier KW_ARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:7: Identifier KW_ARCHIVE ( partitionSpec )*
            {
            Identifier207=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixArchive4167); 
            stream_Identifier.add(Identifier207);

            KW_ARCHIVE208=(Token)input.LT(1);
            match(input,KW_ARCHIVE,FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4169); 
            stream_KW_ARCHIVE.add(KW_ARCHIVE208);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:29: ( partitionSpec )*
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( (LA60_0==KW_PARTITION) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:718:30: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixArchive4172);
            	    partitionSpec209=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec209.getTree());

            	    }
            	    break;

            	default :
            	    break loop60;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 719:5: -> ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:719:8: ^( TOK_ALTERTABLE_ARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ARCHIVE, "TOK_ALTERTABLE_ARCHIVE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:719:44: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixArchive

    public static class alterStatementSuffixUnArchive_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixUnArchive
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:722:1: alterStatementSuffixUnArchive : Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) ;
    public final alterStatementSuffixUnArchive_return alterStatementSuffixUnArchive() throws RecognitionException {
        alterStatementSuffixUnArchive_return retval = new alterStatementSuffixUnArchive_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier210=null;
        Token KW_UNARCHIVE211=null;
        partitionSpec_return partitionSpec212 = null;


        CommonTree Identifier210_tree=null;
        CommonTree KW_UNARCHIVE211_tree=null;
        RewriteRuleTokenStream stream_KW_UNARCHIVE=new RewriteRuleTokenStream(adaptor,"token KW_UNARCHIVE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("unarchive statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:725:5: ( Identifier KW_UNARCHIVE ( partitionSpec )* -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:725:7: Identifier KW_UNARCHIVE ( partitionSpec )*
            {
            Identifier210=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixUnArchive4218); 
            stream_Identifier.add(Identifier210);

            KW_UNARCHIVE211=(Token)input.LT(1);
            match(input,KW_UNARCHIVE,FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4220); 
            stream_KW_UNARCHIVE.add(KW_UNARCHIVE211);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:725:31: ( partitionSpec )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==KW_PARTITION) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:725:32: partitionSpec
            	    {
            	    pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4223);
            	    partitionSpec212=partitionSpec();
            	    _fsp--;

            	    stream_partitionSpec.add(partitionSpec212.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 726:5: -> ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:726:8: ^( TOK_ALTERTABLE_UNARCHIVE Identifier ( partitionSpec )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_UNARCHIVE, "TOK_ALTERTABLE_UNARCHIVE"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:726:46: ( partitionSpec )*
                while ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixUnArchive

    public static class partitionLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionLocation
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:729:1: partitionLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) ;
    public final partitionLocation_return partitionLocation() throws RecognitionException {
        partitionLocation_return retval = new partitionLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION213=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION213_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("partition location"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:732:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_PARTITIONLOCATION $locn) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:733:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION213=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_partitionLocation4275); 
            stream_KW_LOCATION.add(KW_LOCATION213);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_partitionLocation4279); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 733:38: -> ^( TOK_PARTITIONLOCATION $locn)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:733:41: ^( TOK_PARTITIONLOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTITIONLOCATION, "TOK_PARTITIONLOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionLocation

    public static class alterStatementSuffixDropPartitions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixDropPartitions
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:736:1: alterStatementSuffixDropPartitions : Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )? -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ) ;
    public final alterStatementSuffixDropPartitions_return alterStatementSuffixDropPartitions() throws RecognitionException {
        alterStatementSuffixDropPartitions_return retval = new alterStatementSuffixDropPartitions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier214=null;
        Token KW_DROP215=null;
        Token COMMA218=null;
        ifExists_return ifExists216 = null;

        dropPartitionSpec_return dropPartitionSpec217 = null;

        dropPartitionSpec_return dropPartitionSpec219 = null;

        ignoreProtection_return ignoreProtection220 = null;


        CommonTree Identifier214_tree=null;
        CommonTree KW_DROP215_tree=null;
        CommonTree COMMA218_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dropPartitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionSpec");
        RewriteRuleSubtreeStream stream_ignoreProtection=new RewriteRuleSubtreeStream(adaptor,"rule ignoreProtection");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop partition statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:5: ( Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )? -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:7: Identifier KW_DROP ( ifExists )? dropPartitionSpec ( COMMA dropPartitionSpec )* ( ignoreProtection )?
            {
            Identifier214=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4315); 
            stream_Identifier.add(Identifier214);

            KW_DROP215=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4317); 
            stream_KW_DROP.add(KW_DROP215);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:26: ( ifExists )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==KW_IF) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:26: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4319);
                    ifExists216=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists216.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4322);
            dropPartitionSpec217=dropPartitionSpec();
            _fsp--;

            stream_dropPartitionSpec.add(dropPartitionSpec217.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:54: ( COMMA dropPartitionSpec )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:55: COMMA dropPartitionSpec
            	    {
            	    COMMA218=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4325); 
            	    stream_COMMA.add(COMMA218);

            	    pushFollow(FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4327);
            	    dropPartitionSpec219=dropPartitionSpec();
            	    _fsp--;

            	    stream_dropPartitionSpec.add(dropPartitionSpec219.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:81: ( ignoreProtection )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==KW_IGNORE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:739:81: ignoreProtection
                    {
                    pushFollow(FOLLOW_ignoreProtection_in_alterStatementSuffixDropPartitions4331);
                    ignoreProtection220=ignoreProtection();
                    _fsp--;

                    stream_ignoreProtection.add(ignoreProtection220.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: ignoreProtection, Identifier, dropPartitionSpec, ifExists
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 740:5: -> ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:740:8: ^( TOK_ALTERTABLE_DROPPARTS Identifier ( dropPartitionSpec )+ ( ifExists )? ( ignoreProtection )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_DROPPARTS, "TOK_ALTERTABLE_DROPPARTS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                if ( !(stream_dropPartitionSpec.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionSpec.next());

                }
                stream_dropPartitionSpec.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:740:65: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:740:75: ( ignoreProtection )?
                if ( stream_ignoreProtection.hasNext() ) {
                    adaptor.addChild(root_1, stream_ignoreProtection.next());

                }
                stream_ignoreProtection.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixDropPartitions

    public static class alterStatementSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixProperties
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:743:1: alterStatementSuffixProperties : (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? ) );
    public final alterStatementSuffixProperties_return alterStatementSuffixProperties() throws RecognitionException {
        alterStatementSuffixProperties_return retval = new alterStatementSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET221=null;
        Token KW_TBLPROPERTIES222=null;
        Token KW_UNSET224=null;
        Token KW_TBLPROPERTIES225=null;
        tableProperties_return tableProperties223 = null;

        ifExists_return ifExists226 = null;

        tableProperties_return tableProperties227 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET221_tree=null;
        CommonTree KW_TBLPROPERTIES222_tree=null;
        CommonTree KW_UNSET224_tree=null;
        CommonTree KW_TBLPROPERTIES225_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("alter properties statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:746:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Identifier) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==KW_UNSET) ) {
                    alt66=2;
                }
                else if ( (LA66_1==KW_SET) ) {
                    alt66=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("743:1: alterStatementSuffixProperties : (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? ) );", 66, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("743:1: alterStatementSuffixProperties : (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? ) );", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:746:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixProperties4382); 
                    stream_Identifier.add(name);

                    KW_SET221=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixProperties4384); 
                    stream_KW_SET.add(KW_SET221);

                    KW_TBLPROPERTIES222=(Token)input.LT(1);
                    match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4386); 
                    stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES222);

                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties4388);
                    tableProperties223=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(tableProperties223.getTree());

                    // AST REWRITE
                    // elements: name, tableProperties
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 747:5: -> ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:747:8: ^( TOK_ALTERTABLE_PROPERTIES $name tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_PROPERTIES, "TOK_ALTERTABLE_PROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableProperties.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:7: name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixProperties4413); 
                    stream_Identifier.add(name);

                    KW_UNSET224=(Token)input.LT(1);
                    match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterStatementSuffixProperties4415); 
                    stream_KW_UNSET.add(KW_UNSET224);

                    KW_TBLPROPERTIES225=(Token)input.LT(1);
                    match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4417); 
                    stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES225);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:49: ( ifExists )?
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==KW_IF) ) {
                        alt65=1;
                    }
                    switch (alt65) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:748:49: ifExists
                            {
                            pushFollow(FOLLOW_ifExists_in_alterStatementSuffixProperties4419);
                            ifExists226=ifExists();
                            _fsp--;

                            stream_ifExists.add(ifExists226.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixProperties4422);
                    tableProperties227=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(tableProperties227.getTree());

                    // AST REWRITE
                    // elements: ifExists, tableProperties, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 749:5: -> ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:749:8: ^( TOK_DROPTABLE_PROPERTIES $name tableProperties ( ifExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPTABLE_PROPERTIES, "TOK_DROPTABLE_PROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableProperties.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:749:57: ( ifExists )?
                        if ( stream_ifExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifExists.next());

                        }
                        stream_ifExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixProperties

    public static class alterViewSuffixProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterViewSuffixProperties
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:752:1: alterViewSuffixProperties : (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? ) );
    public final alterViewSuffixProperties_return alterViewSuffixProperties() throws RecognitionException {
        alterViewSuffixProperties_return retval = new alterViewSuffixProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_SET228=null;
        Token KW_TBLPROPERTIES229=null;
        Token KW_UNSET231=null;
        Token KW_TBLPROPERTIES232=null;
        tableProperties_return tableProperties230 = null;

        ifExists_return ifExists233 = null;

        tableProperties_return tableProperties234 = null;


        CommonTree name_tree=null;
        CommonTree KW_SET228_tree=null;
        CommonTree KW_TBLPROPERTIES229_tree=null;
        CommonTree KW_UNSET231_tree=null;
        CommonTree KW_TBLPROPERTIES232_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_UNSET=new RewriteRuleTokenStream(adaptor,"token KW_UNSET");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("alter view properties statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:755:5: (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? ) )
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==Identifier) ) {
                int LA68_1 = input.LA(2);

                if ( (LA68_1==KW_SET) ) {
                    alt68=1;
                }
                else if ( (LA68_1==KW_UNSET) ) {
                    alt68=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("752:1: alterViewSuffixProperties : (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? ) );", 68, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("752:1: alterViewSuffixProperties : (name= Identifier KW_SET KW_TBLPROPERTIES tableProperties -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties ) | name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? ) );", 68, 0, input);

                throw nvae;
            }
            switch (alt68) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:755:7: name= Identifier KW_SET KW_TBLPROPERTIES tableProperties
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterViewSuffixProperties4469); 
                    stream_Identifier.add(name);

                    KW_SET228=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterViewSuffixProperties4471); 
                    stream_KW_SET.add(KW_SET228);

                    KW_TBLPROPERTIES229=(Token)input.LT(1);
                    match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4473); 
                    stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES229);

                    pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties4475);
                    tableProperties230=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(tableProperties230.getTree());

                    // AST REWRITE
                    // elements: tableProperties, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 756:5: -> ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:756:8: ^( TOK_ALTERVIEW_PROPERTIES $name tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERVIEW_PROPERTIES, "TOK_ALTERVIEW_PROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableProperties.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:757:7: name= Identifier KW_UNSET KW_TBLPROPERTIES ( ifExists )? tableProperties
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterViewSuffixProperties4500); 
                    stream_Identifier.add(name);

                    KW_UNSET231=(Token)input.LT(1);
                    match(input,KW_UNSET,FOLLOW_KW_UNSET_in_alterViewSuffixProperties4502); 
                    stream_KW_UNSET.add(KW_UNSET231);

                    KW_TBLPROPERTIES232=(Token)input.LT(1);
                    match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4504); 
                    stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES232);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:757:49: ( ifExists )?
                    int alt67=2;
                    int LA67_0 = input.LA(1);

                    if ( (LA67_0==KW_IF) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:757:49: ifExists
                            {
                            pushFollow(FOLLOW_ifExists_in_alterViewSuffixProperties4506);
                            ifExists233=ifExists();
                            _fsp--;

                            stream_ifExists.add(ifExists233.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_tableProperties_in_alterViewSuffixProperties4509);
                    tableProperties234=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(tableProperties234.getTree());

                    // AST REWRITE
                    // elements: name, tableProperties, ifExists
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 758:5: -> ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:758:8: ^( TOK_DROPVIEW_PROPERTIES $name tableProperties ( ifExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPVIEW_PROPERTIES, "TOK_DROPVIEW_PROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableProperties.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:758:56: ( ifExists )?
                        if ( stream_ifExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifExists.next());

                        }
                        stream_ifExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterViewSuffixProperties

    public static class alterStatementSuffixSerdeProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixSerdeProperties
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:761:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );
    public final alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties() throws RecognitionException {
        alterStatementSuffixSerdeProperties_return retval = new alterStatementSuffixSerdeProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token serdeName=null;
        Token KW_SET235=null;
        Token KW_SERDE236=null;
        Token KW_WITH237=null;
        Token KW_SERDEPROPERTIES238=null;
        Token KW_SET240=null;
        Token KW_SERDEPROPERTIES241=null;
        tableProperties_return tableProperties239 = null;

        tableProperties_return tableProperties242 = null;


        CommonTree serdeName_tree=null;
        CommonTree KW_SET235_tree=null;
        CommonTree KW_SERDE236_tree=null;
        CommonTree KW_WITH237_tree=null;
        CommonTree KW_SERDEPROPERTIES238_tree=null;
        CommonTree KW_SET240_tree=null;
        CommonTree KW_SERDEPROPERTIES241_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("alter serdes statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:764:5: ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==KW_SET) ) {
                int LA70_1 = input.LA(2);

                if ( (LA70_1==KW_SERDE) ) {
                    alt70=1;
                }
                else if ( (LA70_1==KW_SERDEPROPERTIES) ) {
                    alt70=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("761:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );", 70, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("761:1: alterStatementSuffixSerdeProperties : ( KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )? -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? ) | KW_SET KW_SERDEPROPERTIES tableProperties -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties ) );", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:764:7: KW_SET KW_SERDE serdeName= StringLiteral ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    {
                    KW_SET235=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4554); 
                    stream_KW_SET.add(KW_SET235);

                    KW_SERDE236=(Token)input.LT(1);
                    match(input,KW_SERDE,FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4556); 
                    stream_KW_SERDE.add(KW_SERDE236);

                    serdeName=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4560); 
                    stream_StringLiteral.add(serdeName);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:764:47: ( KW_WITH KW_SERDEPROPERTIES tableProperties )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==KW_WITH) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:764:48: KW_WITH KW_SERDEPROPERTIES tableProperties
                            {
                            KW_WITH237=(Token)input.LT(1);
                            match(input,KW_WITH,FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4563); 
                            stream_KW_WITH.add(KW_WITH237);

                            KW_SERDEPROPERTIES238=(Token)input.LT(1);
                            match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4565); 
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES238);

                            pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4567);
                            tableProperties239=tableProperties();
                            _fsp--;

                            stream_tableProperties.add(tableProperties239.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tableProperties, serdeName
                    // token labels: serdeName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_serdeName=new RewriteRuleTokenStream(adaptor,"token serdeName",serdeName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 765:5: -> ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:765:8: ^( TOK_ALTERTABLE_SERIALIZER $serdeName ( tableProperties )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SERIALIZER, "TOK_ALTERTABLE_SERIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_serdeName.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:765:47: ( tableProperties )?
                        if ( stream_tableProperties.hasNext() ) {
                            adaptor.addChild(root_1, stream_tableProperties.next());

                        }
                        stream_tableProperties.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:766:7: KW_SET KW_SERDEPROPERTIES tableProperties
                    {
                    KW_SET240=(Token)input.LT(1);
                    match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4593); 
                    stream_KW_SET.add(KW_SET240);

                    KW_SERDEPROPERTIES241=(Token)input.LT(1);
                    match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4595); 
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES241);

                    pushFollow(FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4597);
                    tableProperties242=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(tableProperties242.getTree());

                    // AST REWRITE
                    // elements: tableProperties
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 767:5: -> ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:767:8: ^( TOK_ALTERTABLE_SERDEPROPERTIES tableProperties )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SERDEPROPERTIES, "TOK_ALTERTABLE_SERDEPROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_tableProperties.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixSerdeProperties

    public static class tablePartitionPrefix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePartitionPrefix
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:770:1: tablePartitionPrefix : name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) ;
    public final tablePartitionPrefix_return tablePartitionPrefix() throws RecognitionException {
        tablePartitionPrefix_return retval = new tablePartitionPrefix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        partitionSpec_return partitionSpec243 = null;


        CommonTree name_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("table partition prefix");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:773:3: (name= Identifier ( partitionSpec )? -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:773:4: name= Identifier ( partitionSpec )?
            {
            name=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tablePartitionPrefix4635); 
            stream_Identifier.add(name);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:773:20: ( partitionSpec )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==KW_PARTITION) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:773:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tablePartitionPrefix4637);
                    partitionSpec243=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec243.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, name
            // token labels: name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 774:3: -> ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:774:5: ^( TOK_TABLE_PARTITION $name ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLE_PARTITION, "TOK_TABLE_PARTITION"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:774:33: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePartitionPrefix

    public static class alterTblPartitionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTblPartitionStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:777:1: alterTblPartitionStatement : tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) ;
    public final alterTblPartitionStatement_return alterTblPartitionStatement() throws RecognitionException {
        alterTblPartitionStatement_return retval = new alterTblPartitionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tablePartitionPrefix_return tablePartitionPrefix244 = null;

        alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix245 = null;


        RewriteRuleSubtreeStream stream_alterTblPartitionStatementSuffix=new RewriteRuleSubtreeStream(adaptor,"rule alterTblPartitionStatementSuffix");
        RewriteRuleSubtreeStream stream_tablePartitionPrefix=new RewriteRuleSubtreeStream(adaptor,"rule tablePartitionPrefix");
        msgs.push("alter table partition statement");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:780:3: ( tablePartitionPrefix alterTblPartitionStatementSuffix -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:780:6: tablePartitionPrefix alterTblPartitionStatementSuffix
            {
            pushFollow(FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4675);
            tablePartitionPrefix244=tablePartitionPrefix();
            _fsp--;

            stream_tablePartitionPrefix.add(tablePartitionPrefix244.getTree());
            pushFollow(FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4677);
            alterTblPartitionStatementSuffix245=alterTblPartitionStatementSuffix();
            _fsp--;

            stream_alterTblPartitionStatementSuffix.add(alterTblPartitionStatementSuffix245.getTree());

            // AST REWRITE
            // elements: alterTblPartitionStatementSuffix, tablePartitionPrefix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 781:3: -> ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:781:6: ^( TOK_ALTERTABLE_PARTITION tablePartitionPrefix alterTblPartitionStatementSuffix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_PARTITION, "TOK_ALTERTABLE_PARTITION"), root_1);

                adaptor.addChild(root_1, stream_tablePartitionPrefix.next());
                adaptor.addChild(root_1, stream_alterTblPartitionStatementSuffix.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTblPartitionStatement

    public static class alterTblPartitionStatementSuffix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTblPartitionStatementSuffix
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:784:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation );
    public final alterTblPartitionStatementSuffix_return alterTblPartitionStatementSuffix() throws RecognitionException {
        alterTblPartitionStatementSuffix_return retval = new alterTblPartitionStatementSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat246 = null;

        alterStatementSuffixLocation_return alterStatementSuffixLocation247 = null;

        alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode248 = null;

        alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles249 = null;

        alterStatementSuffixSerdeProperties_return alterStatementSuffixSerdeProperties250 = null;

        alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart251 = null;

        alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum252 = null;

        alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation253 = null;



        msgs.push("alter table partition statement suffix");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:787:3: ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation )
            int alt72=8;
            switch ( input.LA(1) ) {
            case KW_SET:
                {
                switch ( input.LA(2) ) {
                case KW_SERDE:
                case KW_SERDEPROPERTIES:
                    {
                    alt72=5;
                    }
                    break;
                case KW_SKEWED:
                    {
                    alt72=8;
                    }
                    break;
                case KW_LOCATION:
                    {
                    alt72=2;
                    }
                    break;
                case KW_FILEFORMAT:
                    {
                    alt72=1;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("784:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation );", 72, 1, input);

                    throw nvae;
                }

                }
                break;
            case KW_ENABLE:
            case KW_DISABLE:
                {
                alt72=3;
                }
                break;
            case KW_CONCATENATE:
                {
                alt72=4;
                }
                break;
            case KW_RENAME:
                {
                alt72=6;
                }
                break;
            case KW_INTO:
                {
                alt72=7;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("784:1: alterTblPartitionStatementSuffix : ( alterStatementSuffixFileFormat | alterStatementSuffixLocation | alterStatementSuffixProtectMode | alterStatementSuffixMergeFiles | alterStatementSuffixSerdeProperties | alterStatementSuffixRenamePart | alterStatementSuffixBucketNum | alterTblPartitionStatementSuffixSkewedLocation );", 72, 0, input);

                throw nvae;
            }

            switch (alt72) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:787:5: alterStatementSuffixFileFormat
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4712);
                    alterStatementSuffixFileFormat246=alterStatementSuffixFileFormat();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixFileFormat246.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:788:5: alterStatementSuffixLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4718);
                    alterStatementSuffixLocation247=alterStatementSuffixLocation();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixLocation247.getTree());

                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:789:5: alterStatementSuffixProtectMode
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4724);
                    alterStatementSuffixProtectMode248=alterStatementSuffixProtectMode();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixProtectMode248.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:790:5: alterStatementSuffixMergeFiles
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4730);
                    alterStatementSuffixMergeFiles249=alterStatementSuffixMergeFiles();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixMergeFiles249.getTree());

                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:791:5: alterStatementSuffixSerdeProperties
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4736);
                    alterStatementSuffixSerdeProperties250=alterStatementSuffixSerdeProperties();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixSerdeProperties250.getTree());

                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:792:5: alterStatementSuffixRenamePart
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4742);
                    alterStatementSuffixRenamePart251=alterStatementSuffixRenamePart();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixRenamePart251.getTree());

                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:793:5: alterStatementSuffixBucketNum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4748);
                    alterStatementSuffixBucketNum252=alterStatementSuffixBucketNum();
                    _fsp--;

                    adaptor.addChild(root_0, alterStatementSuffixBucketNum252.getTree());

                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:794:5: alterTblPartitionStatementSuffixSkewedLocation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4754);
                    alterTblPartitionStatementSuffixSkewedLocation253=alterTblPartitionStatementSuffixSkewedLocation();
                    _fsp--;

                    adaptor.addChild(root_0, alterTblPartitionStatementSuffixSkewedLocation253.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTblPartitionStatementSuffix

    public static class alterStatementSuffixFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixFileFormat
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:797:1: alterStatementSuffixFileFormat : KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) ;
    public final alterStatementSuffixFileFormat_return alterStatementSuffixFileFormat() throws RecognitionException {
        alterStatementSuffixFileFormat_return retval = new alterStatementSuffixFileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SET254=null;
        Token KW_FILEFORMAT255=null;
        fileFormat_return fileFormat256 = null;


        CommonTree KW_SET254_tree=null;
        CommonTree KW_FILEFORMAT255_tree=null;
        RewriteRuleTokenStream stream_KW_FILEFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FILEFORMAT");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleSubtreeStream stream_fileFormat=new RewriteRuleSubtreeStream(adaptor,"rule fileFormat");
        msgs.push("alter fileformat statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:800:2: ( KW_SET KW_FILEFORMAT fileFormat -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:800:4: KW_SET KW_FILEFORMAT fileFormat
            {
            KW_SET254=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4776); 
            stream_KW_SET.add(KW_SET254);

            KW_FILEFORMAT255=(Token)input.LT(1);
            match(input,KW_FILEFORMAT,FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4778); 
            stream_KW_FILEFORMAT.add(KW_FILEFORMAT255);

            pushFollow(FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4780);
            fileFormat256=fileFormat();
            _fsp--;

            stream_fileFormat.add(fileFormat256.getTree());

            // AST REWRITE
            // elements: fileFormat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 801:2: -> ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:801:5: ^( TOK_ALTERTABLE_FILEFORMAT fileFormat )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_FILEFORMAT, "TOK_ALTERTABLE_FILEFORMAT"), root_1);

                adaptor.addChild(root_1, stream_fileFormat.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixFileFormat

    public static class alterTblPartitionStatementSuffixSkewedLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterTblPartitionStatementSuffixSkewedLocation
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:804:1: alterTblPartitionStatementSuffixSkewedLocation : KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations ) ;
    public final alterTblPartitionStatementSuffixSkewedLocation_return alterTblPartitionStatementSuffixSkewedLocation() throws RecognitionException {
        alterTblPartitionStatementSuffixSkewedLocation_return retval = new alterTblPartitionStatementSuffixSkewedLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SET257=null;
        Token KW_SKEWED258=null;
        Token KW_LOCATION259=null;
        skewedLocations_return skewedLocations260 = null;


        CommonTree KW_SET257_tree=null;
        CommonTree KW_SKEWED258_tree=null;
        CommonTree KW_LOCATION259_tree=null;
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");
        RewriteRuleSubtreeStream stream_skewedLocations=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocations");
        msgs.push("alter partition skewed location");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:807:3: ( KW_SET KW_SKEWED KW_LOCATION skewedLocations -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:807:5: KW_SET KW_SKEWED KW_LOCATION skewedLocations
            {
            KW_SET257=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation4811); 
            stream_KW_SET.add(KW_SET257);

            KW_SKEWED258=(Token)input.LT(1);
            match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation4813); 
            stream_KW_SKEWED.add(KW_SKEWED258);

            KW_LOCATION259=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation4815); 
            stream_KW_LOCATION.add(KW_LOCATION259);

            pushFollow(FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation4817);
            skewedLocations260=skewedLocations();
            _fsp--;

            stream_skewedLocations.add(skewedLocations260.getTree());

            // AST REWRITE
            // elements: skewedLocations
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 808:3: -> ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:808:6: ^( TOK_ALTERTBLPART_SKEWED_LOCATION skewedLocations )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTBLPART_SKEWED_LOCATION, "TOK_ALTERTBLPART_SKEWED_LOCATION"), root_1);

                adaptor.addChild(root_1, stream_skewedLocations.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterTblPartitionStatementSuffixSkewedLocation

    public static class skewedLocations_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedLocations
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:811:1: skewedLocations : LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) ;
    public final skewedLocations_return skewedLocations() throws RecognitionException {
        skewedLocations_return retval = new skewedLocations_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN261=null;
        Token RPAREN263=null;
        skewedLocationsList_return skewedLocationsList262 = null;


        CommonTree LPAREN261_tree=null;
        CommonTree RPAREN263_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_skewedLocationsList=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationsList");
         msgs.push("skewed locations"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:814:5: ( LPAREN skewedLocationsList RPAREN -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:815:7: LPAREN skewedLocationsList RPAREN
            {
            LPAREN261=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_skewedLocations4860); 
            stream_LPAREN.add(LPAREN261);

            pushFollow(FOLLOW_skewedLocationsList_in_skewedLocations4862);
            skewedLocationsList262=skewedLocationsList();
            _fsp--;

            stream_skewedLocationsList.add(skewedLocationsList262.getTree());
            RPAREN263=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_skewedLocations4864); 
            stream_RPAREN.add(RPAREN263);


            // AST REWRITE
            // elements: skewedLocationsList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 815:41: -> ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:815:44: ^( TOK_SKEWED_LOCATIONS skewedLocationsList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SKEWED_LOCATIONS, "TOK_SKEWED_LOCATIONS"), root_1);

                adaptor.addChild(root_1, stream_skewedLocationsList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedLocations

    public static class skewedLocationsList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedLocationsList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:818:1: skewedLocationsList : skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) ;
    public final skewedLocationsList_return skewedLocationsList() throws RecognitionException {
        skewedLocationsList_return retval = new skewedLocationsList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA265=null;
        skewedLocationMap_return skewedLocationMap264 = null;

        skewedLocationMap_return skewedLocationMap266 = null;


        CommonTree COMMA265_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedLocationMap=new RewriteRuleSubtreeStream(adaptor,"rule skewedLocationMap");
         msgs.push("skewed locations list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:821:5: ( skewedLocationMap ( COMMA skewedLocationMap )* -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:822:7: skewedLocationMap ( COMMA skewedLocationMap )*
            {
            pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList4905);
            skewedLocationMap264=skewedLocationMap();
            _fsp--;

            stream_skewedLocationMap.add(skewedLocationMap264.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:822:25: ( COMMA skewedLocationMap )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:822:26: COMMA skewedLocationMap
            	    {
            	    COMMA265=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_skewedLocationsList4908); 
            	    stream_COMMA.add(COMMA265);

            	    pushFollow(FOLLOW_skewedLocationMap_in_skewedLocationsList4910);
            	    skewedLocationMap266=skewedLocationMap();
            	    _fsp--;

            	    stream_skewedLocationMap.add(skewedLocationMap266.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedLocationMap
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 822:52: -> ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:822:55: ^( TOK_SKEWED_LOCATION_LIST ( skewedLocationMap )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SKEWED_LOCATION_LIST, "TOK_SKEWED_LOCATION_LIST"), root_1);

                if ( !(stream_skewedLocationMap.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedLocationMap.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedLocationMap.next());

                }
                stream_skewedLocationMap.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedLocationsList

    public static class skewedLocationMap_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedLocationMap
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:825:1: skewedLocationMap : key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) ;
    public final skewedLocationMap_return skewedLocationMap() throws RecognitionException {
        skewedLocationMap_return retval = new skewedLocationMap_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token value=null;
        Token EQUAL267=null;
        skewedValueLocationElement_return key = null;


        CommonTree value_tree=null;
        CommonTree EQUAL267_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_skewedValueLocationElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueLocationElement");
         msgs.push("specifying skewed location map"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:828:5: (key= skewedValueLocationElement EQUAL value= StringLiteral -> ^( TOK_SKEWED_LOCATION_MAP $key $value) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:829:7: key= skewedValueLocationElement EQUAL value= StringLiteral
            {
            pushFollow(FOLLOW_skewedValueLocationElement_in_skewedLocationMap4956);
            key=skewedValueLocationElement();
            _fsp--;

            stream_skewedValueLocationElement.add(key.getTree());
            EQUAL267=(Token)input.LT(1);
            match(input,EQUAL,FOLLOW_EQUAL_in_skewedLocationMap4958); 
            stream_EQUAL.add(EQUAL267);

            value=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_skewedLocationMap4962); 
            stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: key, value
            // token labels: value
            // rule labels: retval, key
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_key=new RewriteRuleSubtreeStream(adaptor,"token key",key!=null?key.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 829:64: -> ^( TOK_SKEWED_LOCATION_MAP $key $value)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:829:67: ^( TOK_SKEWED_LOCATION_MAP $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SKEWED_LOCATION_MAP, "TOK_SKEWED_LOCATION_MAP"), root_1);

                adaptor.addChild(root_1, stream_key.next());
                adaptor.addChild(root_1, stream_value.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedLocationMap

    public static class alterStatementSuffixLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixLocation
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:832:1: alterStatementSuffixLocation : KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) ;
    public final alterStatementSuffixLocation_return alterStatementSuffixLocation() throws RecognitionException {
        alterStatementSuffixLocation_return retval = new alterStatementSuffixLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token newLoc=null;
        Token KW_SET268=null;
        Token KW_LOCATION269=null;

        CommonTree newLoc_tree=null;
        CommonTree KW_SET268_tree=null;
        CommonTree KW_LOCATION269_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SET=new RewriteRuleTokenStream(adaptor,"token KW_SET");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

        msgs.push("alter location");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:835:3: ( KW_SET KW_LOCATION newLoc= StringLiteral -> ^( TOK_ALTERTABLE_LOCATION $newLoc) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:835:5: KW_SET KW_LOCATION newLoc= StringLiteral
            {
            KW_SET268=(Token)input.LT(1);
            match(input,KW_SET,FOLLOW_KW_SET_in_alterStatementSuffixLocation4999); 
            stream_KW_SET.add(KW_SET268);

            KW_LOCATION269=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5001); 
            stream_KW_LOCATION.add(KW_LOCATION269);

            newLoc=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_alterStatementSuffixLocation5005); 
            stream_StringLiteral.add(newLoc);


            // AST REWRITE
            // elements: newLoc
            // token labels: newLoc
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_newLoc=new RewriteRuleTokenStream(adaptor,"token newLoc",newLoc);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 836:3: -> ^( TOK_ALTERTABLE_LOCATION $newLoc)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:836:6: ^( TOK_ALTERTABLE_LOCATION $newLoc)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_LOCATION, "TOK_ALTERTABLE_LOCATION"), root_1);

                adaptor.addChild(root_1, stream_newLoc.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixLocation

    public static class alterStatementSuffixSkewedby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixSkewedby
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:840:1: alterStatementSuffixSkewedby : (name= Identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) | name= Identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) | name= Identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) );
    public final alterStatementSuffixSkewedby_return alterStatementSuffixSkewedby() throws RecognitionException {
        alterStatementSuffixSkewedby_return retval = new alterStatementSuffixSkewedby_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_NOT271=null;
        Token KW_SKEWED272=null;
        Token KW_NOT273=null;
        tableSkewed_return tableSkewed270 = null;

        storedAsDirs_return storedAsDirs274 = null;


        CommonTree name_tree=null;
        CommonTree KW_NOT271_tree=null;
        CommonTree KW_SKEWED272_tree=null;
        CommonTree KW_NOT273_tree=null;
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
        RewriteRuleSubtreeStream stream_tableSkewed=new RewriteRuleSubtreeStream(adaptor,"rule tableSkewed");
        msgs.push("alter skewed by statement");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:843:2: (name= Identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) | name= Identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) | name= Identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) )
            int alt74=3;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==Identifier) ) {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==KW_NOT) ) {
                    int LA74_2 = input.LA(3);

                    if ( (LA74_2==KW_SKEWED) ) {
                        alt74=2;
                    }
                    else if ( (LA74_2==KW_STORED) ) {
                        alt74=3;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("840:1: alterStatementSuffixSkewedby : (name= Identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) | name= Identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) | name= Identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) );", 74, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA74_1==KW_SKEWED) ) {
                    alt74=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("840:1: alterStatementSuffixSkewedby : (name= Identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) | name= Identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) | name= Identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) );", 74, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("840:1: alterStatementSuffixSkewedby : (name= Identifier tableSkewed -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed ) | name= Identifier KW_NOT KW_SKEWED -> ^( TOK_ALTERTABLE_SKEWED $name) | name= Identifier KW_NOT storedAsDirs -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs ) );", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:843:3: name= Identifier tableSkewed
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSkewedby5040); 
                    stream_Identifier.add(name);

                    pushFollow(FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5042);
                    tableSkewed270=tableSkewed();
                    _fsp--;

                    stream_tableSkewed.add(tableSkewed270.getTree());

                    // AST REWRITE
                    // elements: tableSkewed, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 844:2: -> ^( TOK_ALTERTABLE_SKEWED $name tableSkewed )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:844:4: ^( TOK_ALTERTABLE_SKEWED $name tableSkewed )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableSkewed.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:846:2: name= Identifier KW_NOT KW_SKEWED
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSkewedby5061); 
                    stream_Identifier.add(name);

                    KW_NOT271=(Token)input.LT(1);
                    match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5063); 
                    stream_KW_NOT.add(KW_NOT271);

                    KW_SKEWED272=(Token)input.LT(1);
                    match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5065); 
                    stream_KW_SKEWED.add(KW_SKEWED272);


                    // AST REWRITE
                    // elements: name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 847:2: -> ^( TOK_ALTERTABLE_SKEWED $name)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:847:4: ^( TOK_ALTERTABLE_SKEWED $name)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);

                        adaptor.addChild(root_1, stream_name.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:849:2: name= Identifier KW_NOT storedAsDirs
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixSkewedby5082); 
                    stream_Identifier.add(name);

                    KW_NOT273=(Token)input.LT(1);
                    match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5084); 
                    stream_KW_NOT.add(KW_NOT273);

                    pushFollow(FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby5086);
                    storedAsDirs274=storedAsDirs();
                    _fsp--;

                    stream_storedAsDirs.add(storedAsDirs274.getTree());

                    // AST REWRITE
                    // elements: name, storedAsDirs
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 850:2: -> ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:850:4: ^( TOK_ALTERTABLE_SKEWED $name storedAsDirs )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_SKEWED, "TOK_ALTERTABLE_SKEWED"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_storedAsDirs.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixSkewedby

    public static class alterStatementSuffixProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixProtectMode
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:853:1: alterStatementSuffixProtectMode : alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) ;
    public final alterStatementSuffixProtectMode_return alterStatementSuffixProtectMode() throws RecognitionException {
        alterStatementSuffixProtectMode_return retval = new alterStatementSuffixProtectMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        alterProtectMode_return alterProtectMode275 = null;


        RewriteRuleSubtreeStream stream_alterProtectMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectMode");
         msgs.push("alter partition protect mode statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:856:5: ( alterProtectMode -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:856:7: alterProtectMode
            {
            pushFollow(FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode5121);
            alterProtectMode275=alterProtectMode();
            _fsp--;

            stream_alterProtectMode.add(alterProtectMode275.getTree());

            // AST REWRITE
            // elements: alterProtectMode
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 857:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:857:8: ^( TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE alterProtectMode )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE, "TOK_ALTERTABLE_ALTERPARTS_PROTECTMODE"), root_1);

                adaptor.addChild(root_1, stream_alterProtectMode.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixProtectMode

    public static class alterStatementSuffixRenamePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixRenamePart
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:860:1: alterStatementSuffixRenamePart : KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) ;
    public final alterStatementSuffixRenamePart_return alterStatementSuffixRenamePart() throws RecognitionException {
        alterStatementSuffixRenamePart_return retval = new alterStatementSuffixRenamePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RENAME276=null;
        Token KW_TO277=null;
        partitionSpec_return partitionSpec278 = null;


        CommonTree KW_RENAME276_tree=null;
        CommonTree KW_TO277_tree=null;
        RewriteRuleTokenStream stream_KW_RENAME=new RewriteRuleTokenStream(adaptor,"token KW_RENAME");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("alter table rename partition statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:863:5: ( KW_RENAME KW_TO partitionSpec -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:863:7: KW_RENAME KW_TO partitionSpec
            {
            KW_RENAME276=(Token)input.LT(1);
            match(input,KW_RENAME,FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart5160); 
            stream_KW_RENAME.add(KW_RENAME276);

            KW_TO277=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_alterStatementSuffixRenamePart5162); 
            stream_KW_TO.add(KW_TO277);

            pushFollow(FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart5164);
            partitionSpec278=partitionSpec();
            _fsp--;

            stream_partitionSpec.add(partitionSpec278.getTree());

            // AST REWRITE
            // elements: partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 864:5: -> ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:864:7: ^( TOK_ALTERTABLE_RENAMEPART partitionSpec )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_RENAMEPART, "TOK_ALTERTABLE_RENAMEPART"), root_1);

                adaptor.addChild(root_1, stream_partitionSpec.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixRenamePart

    public static class alterStatementSuffixMergeFiles_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixMergeFiles
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:867:1: alterStatementSuffixMergeFiles : KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) ;
    public final alterStatementSuffixMergeFiles_return alterStatementSuffixMergeFiles() throws RecognitionException {
        alterStatementSuffixMergeFiles_return retval = new alterStatementSuffixMergeFiles_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CONCATENATE279=null;

        CommonTree KW_CONCATENATE279_tree=null;
        RewriteRuleTokenStream stream_KW_CONCATENATE=new RewriteRuleTokenStream(adaptor,"token KW_CONCATENATE");

         msgs.push(""); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:870:5: ( KW_CONCATENATE -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:870:7: KW_CONCATENATE
            {
            KW_CONCATENATE279=(Token)input.LT(1);
            match(input,KW_CONCATENATE,FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles5202); 
            stream_KW_CONCATENATE.add(KW_CONCATENATE279);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 871:5: -> ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:871:8: ^( TOK_ALTERTABLE_ALTERPARTS_MERGEFILES )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_ALTERPARTS_MERGEFILES, "TOK_ALTERTABLE_ALTERPARTS_MERGEFILES"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixMergeFiles

    public static class alterProtectMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterProtectMode
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:874:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );
    public final alterProtectMode_return alterProtectMode() throws RecognitionException {
        alterProtectMode_return retval = new alterProtectMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ENABLE280=null;
        Token KW_DISABLE282=null;
        alterProtectModeMode_return alterProtectModeMode281 = null;

        alterProtectModeMode_return alterProtectModeMode283 = null;


        CommonTree KW_ENABLE280_tree=null;
        CommonTree KW_DISABLE282_tree=null;
        RewriteRuleTokenStream stream_KW_DISABLE=new RewriteRuleTokenStream(adaptor,"token KW_DISABLE");
        RewriteRuleTokenStream stream_KW_ENABLE=new RewriteRuleTokenStream(adaptor,"token KW_ENABLE");
        RewriteRuleSubtreeStream stream_alterProtectModeMode=new RewriteRuleSubtreeStream(adaptor,"rule alterProtectModeMode");
         msgs.push("protect mode specification enable"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:877:5: ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) )
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==KW_ENABLE) ) {
                alt75=1;
            }
            else if ( (LA75_0==KW_DISABLE) ) {
                alt75=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("874:1: alterProtectMode : ( KW_ENABLE alterProtectModeMode -> ^( TOK_ENABLE alterProtectModeMode ) | KW_DISABLE alterProtectModeMode -> ^( TOK_DISABLE alterProtectModeMode ) );", 75, 0, input);

                throw nvae;
            }
            switch (alt75) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:877:7: KW_ENABLE alterProtectModeMode
                    {
                    KW_ENABLE280=(Token)input.LT(1);
                    match(input,KW_ENABLE,FOLLOW_KW_ENABLE_in_alterProtectMode5239); 
                    stream_KW_ENABLE.add(KW_ENABLE280);

                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode5241);
                    alterProtectModeMode281=alterProtectModeMode();
                    _fsp--;

                    stream_alterProtectModeMode.add(alterProtectModeMode281.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 877:39: -> ^( TOK_ENABLE alterProtectModeMode )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:877:42: ^( TOK_ENABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ENABLE, "TOK_ENABLE"), root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:878:7: KW_DISABLE alterProtectModeMode
                    {
                    KW_DISABLE282=(Token)input.LT(1);
                    match(input,KW_DISABLE,FOLLOW_KW_DISABLE_in_alterProtectMode5258); 
                    stream_KW_DISABLE.add(KW_DISABLE282);

                    pushFollow(FOLLOW_alterProtectModeMode_in_alterProtectMode5260);
                    alterProtectModeMode283=alterProtectModeMode();
                    _fsp--;

                    stream_alterProtectModeMode.add(alterProtectModeMode283.getTree());

                    // AST REWRITE
                    // elements: alterProtectModeMode
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 878:40: -> ^( TOK_DISABLE alterProtectModeMode )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:878:43: ^( TOK_DISABLE alterProtectModeMode )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DISABLE, "TOK_DISABLE"), root_1);

                        adaptor.addChild(root_1, stream_alterProtectModeMode.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterProtectMode

    public static class alterProtectModeMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterProtectModeMode
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:881:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );
    public final alterProtectModeMode_return alterProtectModeMode() throws RecognitionException {
        alterProtectModeMode_return retval = new alterProtectModeMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_OFFLINE284=null;
        Token KW_NO_DROP285=null;
        Token KW_CASCADE286=null;
        Token KW_READONLY287=null;

        CommonTree KW_OFFLINE284_tree=null;
        CommonTree KW_NO_DROP285_tree=null;
        CommonTree KW_CASCADE286_tree=null;
        CommonTree KW_READONLY287_tree=null;
        RewriteRuleTokenStream stream_KW_READONLY=new RewriteRuleTokenStream(adaptor,"token KW_READONLY");
        RewriteRuleTokenStream stream_KW_NO_DROP=new RewriteRuleTokenStream(adaptor,"token KW_NO_DROP");
        RewriteRuleTokenStream stream_KW_CASCADE=new RewriteRuleTokenStream(adaptor,"token KW_CASCADE");
        RewriteRuleTokenStream stream_KW_OFFLINE=new RewriteRuleTokenStream(adaptor,"token KW_OFFLINE");

         msgs.push("protect mode specification enable"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:884:5: ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) )
            int alt77=3;
            switch ( input.LA(1) ) {
            case KW_OFFLINE:
                {
                alt77=1;
                }
                break;
            case KW_NO_DROP:
                {
                alt77=2;
                }
                break;
            case KW_READONLY:
                {
                alt77=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("881:1: alterProtectModeMode : ( KW_OFFLINE -> ^( TOK_OFFLINE ) | KW_NO_DROP ( KW_CASCADE )? -> ^( TOK_NO_DROP ( KW_CASCADE )? ) | KW_READONLY -> ^( TOK_READONLY ) );", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:884:7: KW_OFFLINE
                    {
                    KW_OFFLINE284=(Token)input.LT(1);
                    match(input,KW_OFFLINE,FOLLOW_KW_OFFLINE_in_alterProtectModeMode5296); 
                    stream_KW_OFFLINE.add(KW_OFFLINE284);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 884:19: -> ^( TOK_OFFLINE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:884:22: ^( TOK_OFFLINE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_OFFLINE, "TOK_OFFLINE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:7: KW_NO_DROP ( KW_CASCADE )?
                    {
                    KW_NO_DROP285=(Token)input.LT(1);
                    match(input,KW_NO_DROP,FOLLOW_KW_NO_DROP_in_alterProtectModeMode5311); 
                    stream_KW_NO_DROP.add(KW_NO_DROP285);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:18: ( KW_CASCADE )?
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==KW_CASCADE) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:18: KW_CASCADE
                            {
                            KW_CASCADE286=(Token)input.LT(1);
                            match(input,KW_CASCADE,FOLLOW_KW_CASCADE_in_alterProtectModeMode5313); 
                            stream_KW_CASCADE.add(KW_CASCADE286);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: KW_CASCADE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 885:30: -> ^( TOK_NO_DROP ( KW_CASCADE )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:33: ^( TOK_NO_DROP ( KW_CASCADE )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_NO_DROP, "TOK_NO_DROP"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:885:47: ( KW_CASCADE )?
                        if ( stream_KW_CASCADE.hasNext() ) {
                            adaptor.addChild(root_1, stream_KW_CASCADE.next());

                        }
                        stream_KW_CASCADE.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:886:7: KW_READONLY
                    {
                    KW_READONLY287=(Token)input.LT(1);
                    match(input,KW_READONLY,FOLLOW_KW_READONLY_in_alterProtectModeMode5331); 
                    stream_KW_READONLY.add(KW_READONLY287);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 886:20: -> ^( TOK_READONLY )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:886:23: ^( TOK_READONLY )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_READONLY, "TOK_READONLY"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterProtectModeMode

    public static class alterStatementSuffixBucketNum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixBucketNum
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:889:1: alterStatementSuffixBucketNum : KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $num) ;
    public final alterStatementSuffixBucketNum_return alterStatementSuffixBucketNum() throws RecognitionException {
        alterStatementSuffixBucketNum_return retval = new alterStatementSuffixBucketNum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token num=null;
        Token KW_INTO288=null;
        Token KW_BUCKETS289=null;

        CommonTree num_tree=null;
        CommonTree KW_INTO288_tree=null;
        CommonTree KW_BUCKETS289_tree=null;
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");

         msgs.push(""); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:892:5: ( KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $num) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:892:7: KW_INTO num= Number KW_BUCKETS
            {
            KW_INTO288=(Token)input.LT(1);
            match(input,KW_INTO,FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum5365); 
            stream_KW_INTO.add(KW_INTO288);

            num=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_alterStatementSuffixBucketNum5369); 
            stream_Number.add(num);

            KW_BUCKETS289=(Token)input.LT(1);
            match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum5371); 
            stream_KW_BUCKETS.add(KW_BUCKETS289);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 893:5: -> ^( TOK_TABLEBUCKETS $num)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:893:8: ^( TOK_TABLEBUCKETS $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS"), root_1);

                adaptor.addChild(root_1, stream_num.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixBucketNum

    public static class alterStatementSuffixClusterbySortby_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start alterStatementSuffixClusterbySortby
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:896:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );
    public final alterStatementSuffixClusterbySortby_return alterStatementSuffixClusterbySortby() throws RecognitionException {
        alterStatementSuffixClusterbySortby_return retval = new alterStatementSuffixClusterbySortby_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_NOT291=null;
        Token KW_CLUSTERED292=null;
        tableBuckets_return tableBuckets290 = null;


        CommonTree name_tree=null;
        CommonTree KW_NOT291_tree=null;
        CommonTree KW_CLUSTERED292_tree=null;
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_tableBuckets=new RewriteRuleSubtreeStream(adaptor,"rule tableBuckets");
        msgs.push("alter cluster by sort by statement");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:899:2: (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) )
            int alt78=2;
            int LA78_0 = input.LA(1);

            if ( (LA78_0==Identifier) ) {
                int LA78_1 = input.LA(2);

                if ( (LA78_1==KW_NOT) ) {
                    alt78=2;
                }
                else if ( (LA78_1==KW_CLUSTERED) ) {
                    alt78=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("896:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );", 78, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("896:1: alterStatementSuffixClusterbySortby : (name= Identifier tableBuckets -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets ) | name= Identifier KW_NOT KW_CLUSTERED -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name) );", 78, 0, input);

                throw nvae;
            }
            switch (alt78) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:899:3: name= Identifier tableBuckets
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5408); 
                    stream_Identifier.add(name);

                    pushFollow(FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5410);
                    tableBuckets290=tableBuckets();
                    _fsp--;

                    stream_tableBuckets.add(tableBuckets290.getTree());

                    // AST REWRITE
                    // elements: tableBuckets, name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 900:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:900:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name tableBuckets )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        adaptor.addChild(root_1, stream_tableBuckets.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:902:2: name= Identifier KW_NOT KW_CLUSTERED
                    {
                    name=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5429); 
                    stream_Identifier.add(name);

                    KW_NOT291=(Token)input.LT(1);
                    match(input,KW_NOT,FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5431); 
                    stream_KW_NOT.add(KW_NOT291);

                    KW_CLUSTERED292=(Token)input.LT(1);
                    match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5433); 
                    stream_KW_CLUSTERED.add(KW_CLUSTERED292);


                    // AST REWRITE
                    // elements: name
                    // token labels: name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 903:2: -> ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:903:4: ^( TOK_ALTERTABLE_CLUSTER_SORT $name)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALTERTABLE_CLUSTER_SORT, "TOK_ALTERTABLE_CLUSTER_SORT"), root_1);

                        adaptor.addChild(root_1, stream_name.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end alterStatementSuffixClusterbySortby

    public static class fileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fileFormat
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:906:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final fileFormat_return fileFormat() throws RecognitionException {
        fileFormat_return retval = new fileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token genericSpec=null;
        Token KW_SEQUENCEFILE293=null;
        Token KW_TEXTFILE294=null;
        Token KW_RCFILE295=null;
        Token KW_INPUTFORMAT296=null;
        Token KW_OUTPUTFORMAT297=null;
        Token KW_INPUTDRIVER298=null;
        Token KW_OUTPUTDRIVER299=null;

        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree genericSpec_tree=null;
        CommonTree KW_SEQUENCEFILE293_tree=null;
        CommonTree KW_TEXTFILE294_tree=null;
        CommonTree KW_RCFILE295_tree=null;
        CommonTree KW_INPUTFORMAT296_tree=null;
        CommonTree KW_OUTPUTFORMAT297_tree=null;
        CommonTree KW_INPUTDRIVER298_tree=null;
        CommonTree KW_OUTPUTDRIVER299_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");

         msgs.push("file format specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:909:5: ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt80=5;
            switch ( input.LA(1) ) {
            case KW_SEQUENCEFILE:
                {
                alt80=1;
                }
                break;
            case KW_TEXTFILE:
                {
                alt80=2;
                }
                break;
            case KW_RCFILE:
                {
                alt80=3;
                }
                break;
            case KW_INPUTFORMAT:
                {
                alt80=4;
                }
                break;
            case Identifier:
                {
                alt80=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("906:1: fileFormat : ( KW_SEQUENCEFILE -> ^( TOK_TBLSEQUENCEFILE ) | KW_TEXTFILE -> ^( TOK_TBLTEXTFILE ) | KW_RCFILE -> ^( TOK_TBLRCFILE ) | KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:909:7: KW_SEQUENCEFILE
                    {
                    KW_SEQUENCEFILE293=(Token)input.LT(1);
                    match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_fileFormat5466); 
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE293);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 909:24: -> ^( TOK_TBLSEQUENCEFILE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:909:27: ^( TOK_TBLSEQUENCEFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:910:7: KW_TEXTFILE
                    {
                    KW_TEXTFILE294=(Token)input.LT(1);
                    match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_fileFormat5481); 
                    stream_KW_TEXTFILE.add(KW_TEXTFILE294);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 910:20: -> ^( TOK_TBLTEXTFILE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:910:23: ^( TOK_TBLTEXTFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:911:7: KW_RCFILE
                    {
                    KW_RCFILE295=(Token)input.LT(1);
                    match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_fileFormat5496); 
                    stream_KW_RCFILE.add(KW_RCFILE295);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 911:18: -> ^( TOK_TBLRCFILE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:911:21: ^( TOK_TBLRCFILE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:912:7: KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_INPUTFORMAT296=(Token)input.LT(1);
                    match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_fileFormat5511); 
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT296);

                    inFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5515); 
                    stream_StringLiteral.add(inFmt);

                    KW_OUTPUTFORMAT297=(Token)input.LT(1);
                    match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_fileFormat5517); 
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT297);

                    outFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5521); 
                    stream_StringLiteral.add(outFmt);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:912:79: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==KW_INPUTDRIVER) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:912:80: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER298=(Token)input.LT(1);
                            match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_fileFormat5524); 
                            stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER298);

                            inDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5528); 
                            stream_StringLiteral.add(inDriver);

                            KW_OUTPUTDRIVER299=(Token)input.LT(1);
                            match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_fileFormat5530); 
                            stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER299);

                            outDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_fileFormat5534); 
                            stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: inFmt, inDriver, outFmt, outDriver
                    // token labels: outDriver, outFmt, inDriver, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 913:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:913:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_inFmt.next());
                        adaptor.addChild(root_1, stream_outFmt.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:913:47: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.next());

                        }
                        stream_inDriver.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:913:58: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.next());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:7: genericSpec= Identifier
                    {
                    genericSpec=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_fileFormat5572); 
                    stream_Identifier.add(genericSpec);


                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: genericSpec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 914:30: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:914:33: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);

                        adaptor.addChild(root_1, stream_genericSpec.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fileFormat

    public static class tabTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tabTypeExpr
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:917:1: tabTypeExpr : Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ;
    public final tabTypeExpr_return tabTypeExpr() throws RecognitionException {
        tabTypeExpr_return retval = new tabTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier300=null;
        Token DOT301=null;
        Token set302=null;

        CommonTree Identifier300_tree=null;
        CommonTree DOT301_tree=null;
        CommonTree set302_tree=null;

         msgs.push("specifying table types"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:921:4: ( Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:921:6: Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier300=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tabTypeExpr5608); 
            Identifier300_tree = (CommonTree)adaptor.create(Identifier300);
            adaptor.addChild(root_0, Identifier300_tree);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:921:17: ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==DOT) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:921:18: DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE )
            	    {
            	    DOT301=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_tabTypeExpr5611); 
            	    DOT301_tree = (CommonTree)adaptor.create(DOT301);
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT301_tree, root_0);

            	    set302=(Token)input.LT(1);
            	    if ( input.LA(1)==Identifier||(input.LA(1)>=KW_ELEM_TYPE && input.LA(1)<=KW_VALUE_TYPE) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, adaptor.create(set302));
            	        errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_tabTypeExpr5614);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tabTypeExpr

    public static class descTabTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descTabTypeExpr
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:924:1: descTabTypeExpr : Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ( Identifier )? ;
    public final descTabTypeExpr_return descTabTypeExpr() throws RecognitionException {
        descTabTypeExpr_return retval = new descTabTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier303=null;
        Token DOT304=null;
        Token set305=null;
        Token Identifier306=null;

        CommonTree Identifier303_tree=null;
        CommonTree DOT304_tree=null;
        CommonTree set305_tree=null;
        CommonTree Identifier306_tree=null;

         msgs.push("specifying describe table types"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:4: ( Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ( Identifier )? )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:6: Identifier ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )* ( Identifier )?
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier303=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_descTabTypeExpr5656); 
            Identifier303_tree = (CommonTree)adaptor.create(Identifier303);
            adaptor.addChild(root_0, Identifier303_tree);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:17: ( DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE ) )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==DOT) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:18: DOT ( Identifier | KW_ELEM_TYPE | KW_KEY_TYPE | KW_VALUE_TYPE )
            	    {
            	    DOT304=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_descTabTypeExpr5659); 
            	    DOT304_tree = (CommonTree)adaptor.create(DOT304);
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT304_tree, root_0);

            	    set305=(Token)input.LT(1);
            	    if ( input.LA(1)==Identifier||(input.LA(1)>=KW_ELEM_TYPE && input.LA(1)<=KW_VALUE_TYPE) ) {
            	        input.consume();
            	        adaptor.addChild(root_0, adaptor.create(set305));
            	        errorRecovery=false;
            	    }
            	    else {
            	        MismatchedSetException mse =
            	            new MismatchedSetException(null,input);
            	        recoverFromMismatchedSet(input,mse,FOLLOW_set_in_descTabTypeExpr5662);    throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:83: ( Identifier )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==Identifier) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:928:83: Identifier
                    {
                    Identifier306=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_descTabTypeExpr5680); 
                    Identifier306_tree = (CommonTree)adaptor.create(Identifier306);
                    adaptor.addChild(root_0, Identifier306_tree);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descTabTypeExpr

    public static class partTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partTypeExpr
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:931:1: partTypeExpr : tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) ;
    public final partTypeExpr_return partTypeExpr() throws RecognitionException {
        partTypeExpr_return retval = new partTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tabTypeExpr_return tabTypeExpr307 = null;

        partitionSpec_return partitionSpec308 = null;


        RewriteRuleSubtreeStream stream_tabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule tabTypeExpr");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("specifying table partitions"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:5: ( tabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:8: tabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_tabTypeExpr_in_partTypeExpr5708);
            tabTypeExpr307=tabTypeExpr();
            _fsp--;

            stream_tabTypeExpr.add(tabTypeExpr307.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:20: ( partitionSpec )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==KW_PARTITION) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:20: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_partTypeExpr5710);
                    partitionSpec308=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec308.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tabTypeExpr, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 934:35: -> ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:38: ^( TOK_TABTYPE tabTypeExpr ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);

                adaptor.addChild(root_1, stream_tabTypeExpr.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:934:64: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partTypeExpr

    public static class descPartTypeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descPartTypeExpr
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:937:1: descPartTypeExpr : descTabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? ) ;
    public final descPartTypeExpr_return descPartTypeExpr() throws RecognitionException {
        descPartTypeExpr_return retval = new descPartTypeExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        descTabTypeExpr_return descTabTypeExpr309 = null;

        partitionSpec_return partitionSpec310 = null;


        RewriteRuleSubtreeStream stream_descTabTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule descTabTypeExpr");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("specifying describe table partitions"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:5: ( descTabTypeExpr ( partitionSpec )? -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:8: descTabTypeExpr ( partitionSpec )?
            {
            pushFollow(FOLLOW_descTabTypeExpr_in_descPartTypeExpr5750);
            descTabTypeExpr309=descTabTypeExpr();
            _fsp--;

            stream_descTabTypeExpr.add(descTabTypeExpr309.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:24: ( partitionSpec )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==KW_PARTITION) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:24: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_descPartTypeExpr5752);
                    partitionSpec310=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec310.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: descTabTypeExpr, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 940:39: -> ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:42: ^( TOK_TABTYPE descTabTypeExpr ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABTYPE, "TOK_TABTYPE"), root_1);

                adaptor.addChild(root_1, stream_descTabTypeExpr.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:940:72: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descPartTypeExpr

    public static class descStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:943:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );
    public final descStatement_return descStatement() throws RecognitionException {
        descStatement_return retval = new descStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token descOptions=null;
        Token dbName=null;
        Token KW_DESCRIBE311=null;
        Token KW_DESC312=null;
        Token KW_DESCRIBE313=null;
        Token KW_DESC314=null;
        Token KW_FUNCTION315=null;
        Token KW_EXTENDED316=null;
        Token KW_DESCRIBE317=null;
        Token KW_DESC318=null;
        Token KW_DATABASE319=null;
        Token KW_EXTENDED320=null;
        descPartTypeExpr_return parttype = null;

        descFuncNames_return name = null;


        CommonTree descOptions_tree=null;
        CommonTree dbName_tree=null;
        CommonTree KW_DESCRIBE311_tree=null;
        CommonTree KW_DESC312_tree=null;
        CommonTree KW_DESCRIBE313_tree=null;
        CommonTree KW_DESC314_tree=null;
        CommonTree KW_FUNCTION315_tree=null;
        CommonTree KW_EXTENDED316_tree=null;
        CommonTree KW_DESCRIBE317_tree=null;
        CommonTree KW_DESC318_tree=null;
        CommonTree KW_DATABASE319_tree=null;
        CommonTree KW_EXTENDED320_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_DESCRIBE=new RewriteRuleTokenStream(adaptor,"token KW_DESCRIBE");
        RewriteRuleSubtreeStream stream_descPartTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule descPartTypeExpr");
        RewriteRuleSubtreeStream stream_descFuncNames=new RewriteRuleSubtreeStream(adaptor,"rule descFuncNames");
         msgs.push("describe statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:5: ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) )
            int alt92=3;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==KW_DESCRIBE) ) {
                switch ( input.LA(2) ) {
                case KW_DATABASE:
                    {
                    alt92=3;
                    }
                    break;
                case KW_FUNCTION:
                    {
                    alt92=2;
                    }
                    break;
                case KW_EXTENDED:
                case KW_FORMATTED:
                case Identifier:
                    {
                    alt92=1;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("943:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );", 92, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA92_0==KW_DESC) ) {
                switch ( input.LA(2) ) {
                case KW_DATABASE:
                    {
                    alt92=3;
                    }
                    break;
                case KW_FUNCTION:
                    {
                    alt92=2;
                    }
                    break;
                case KW_EXTENDED:
                case KW_FORMATTED:
                case Identifier:
                    {
                    alt92=1;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("943:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );", 92, 2, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("943:1: descStatement : ( ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr ) -> ^( TOK_DESCTABLE $parttype ( $descOptions)? ) | ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames ) -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? ) | ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier ) -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? ) );", 92, 0, input);

                throw nvae;
            }
            switch (alt92) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:7: ( KW_DESCRIBE | KW_DESC ) (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )? (parttype= descPartTypeExpr )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:7: ( KW_DESCRIBE | KW_DESC )
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==KW_DESCRIBE) ) {
                        alt86=1;
                    }
                    else if ( (LA86_0==KW_DESC) ) {
                        alt86=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("946:7: ( KW_DESCRIBE | KW_DESC )", 86, 0, input);

                        throw nvae;
                    }
                    switch (alt86) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE311=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5792); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE311);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:20: KW_DESC
                            {
                            KW_DESC312=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5794); 
                            stream_KW_DESC.add(KW_DESC312);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:29: (descOptions= KW_FORMATTED | descOptions= KW_EXTENDED )?
                    int alt87=3;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==KW_FORMATTED) ) {
                        alt87=1;
                    }
                    else if ( (LA87_0==KW_EXTENDED) ) {
                        alt87=2;
                    }
                    switch (alt87) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:30: descOptions= KW_FORMATTED
                            {
                            descOptions=(Token)input.LT(1);
                            match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_descStatement5800); 
                            stream_KW_FORMATTED.add(descOptions);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:55: descOptions= KW_EXTENDED
                            {
                            descOptions=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5804); 
                            stream_KW_EXTENDED.add(descOptions);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:81: (parttype= descPartTypeExpr )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:82: parttype= descPartTypeExpr
                    {
                    pushFollow(FOLLOW_descPartTypeExpr_in_descStatement5811);
                    parttype=descPartTypeExpr();
                    _fsp--;

                    stream_descPartTypeExpr.add(parttype.getTree());

                    }


                    // AST REWRITE
                    // elements: descOptions, parttype
                    // token labels: descOptions
                    // rule labels: retval, parttype
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_descOptions=new RewriteRuleTokenStream(adaptor,"token descOptions",descOptions);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"token parttype",parttype!=null?parttype.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 946:109: -> ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:112: ^( TOK_DESCTABLE $parttype ( $descOptions)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCTABLE, "TOK_DESCTABLE"), root_1);

                        adaptor.addChild(root_1, stream_parttype.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:946:138: ( $descOptions)?
                        if ( stream_descOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_descOptions.next());

                        }
                        stream_descOptions.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:7: ( KW_DESCRIBE | KW_DESC ) KW_FUNCTION ( KW_EXTENDED )? (name= descFuncNames )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:7: ( KW_DESCRIBE | KW_DESC )
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==KW_DESCRIBE) ) {
                        alt88=1;
                    }
                    else if ( (LA88_0==KW_DESC) ) {
                        alt88=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("947:7: ( KW_DESCRIBE | KW_DESC )", 88, 0, input);

                        throw nvae;
                    }
                    switch (alt88) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE313=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5834); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE313);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:20: KW_DESC
                            {
                            KW_DESC314=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5836); 
                            stream_KW_DESC.add(KW_DESC314);


                            }
                            break;

                    }

                    KW_FUNCTION315=(Token)input.LT(1);
                    match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_descStatement5839); 
                    stream_KW_FUNCTION.add(KW_FUNCTION315);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:41: ( KW_EXTENDED )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==KW_EXTENDED) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:41: KW_EXTENDED
                            {
                            KW_EXTENDED316=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5841); 
                            stream_KW_EXTENDED.add(KW_EXTENDED316);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:54: (name= descFuncNames )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:55: name= descFuncNames
                    {
                    pushFollow(FOLLOW_descFuncNames_in_descStatement5847);
                    name=descFuncNames();
                    _fsp--;

                    stream_descFuncNames.add(name.getTree());

                    }


                    // AST REWRITE
                    // elements: name, KW_EXTENDED
                    // token labels: 
                    // rule labels: retval, name
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 947:75: -> ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:78: ^( TOK_DESCFUNCTION $name ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCFUNCTION, "TOK_DESCFUNCTION"), root_1);

                        adaptor.addChild(root_1, stream_name.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:947:103: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, stream_KW_EXTENDED.next());

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:7: ( KW_DESCRIBE | KW_DESC ) KW_DATABASE ( KW_EXTENDED )? (dbName= Identifier )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:7: ( KW_DESCRIBE | KW_DESC )
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==KW_DESCRIBE) ) {
                        alt90=1;
                    }
                    else if ( (LA90_0==KW_DESC) ) {
                        alt90=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("948:7: ( KW_DESCRIBE | KW_DESC )", 90, 0, input);

                        throw nvae;
                    }
                    switch (alt90) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:8: KW_DESCRIBE
                            {
                            KW_DESCRIBE317=(Token)input.LT(1);
                            match(input,KW_DESCRIBE,FOLLOW_KW_DESCRIBE_in_descStatement5869); 
                            stream_KW_DESCRIBE.add(KW_DESCRIBE317);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:20: KW_DESC
                            {
                            KW_DESC318=(Token)input.LT(1);
                            match(input,KW_DESC,FOLLOW_KW_DESC_in_descStatement5871); 
                            stream_KW_DESC.add(KW_DESC318);


                            }
                            break;

                    }

                    KW_DATABASE319=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_descStatement5874); 
                    stream_KW_DATABASE.add(KW_DATABASE319);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:41: ( KW_EXTENDED )?
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( (LA91_0==KW_EXTENDED) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:41: KW_EXTENDED
                            {
                            KW_EXTENDED320=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_descStatement5876); 
                            stream_KW_EXTENDED.add(KW_EXTENDED320);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:54: (dbName= Identifier )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:55: dbName= Identifier
                    {
                    dbName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_descStatement5882); 
                    stream_Identifier.add(dbName);


                    }


                    // AST REWRITE
                    // elements: KW_EXTENDED, dbName
                    // token labels: dbName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_dbName=new RewriteRuleTokenStream(adaptor,"token dbName",dbName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 948:74: -> ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:77: ^( TOK_DESCDATABASE $dbName ( KW_EXTENDED )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESCDATABASE, "TOK_DESCDATABASE"), root_1);

                        adaptor.addChild(root_1, stream_dbName.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:948:104: ( KW_EXTENDED )?
                        if ( stream_KW_EXTENDED.hasNext() ) {
                            adaptor.addChild(root_1, stream_KW_EXTENDED.next());

                        }
                        stream_KW_EXTENDED.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descStatement

    public static class analyzeStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start analyzeStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:951:1: analyzeStatement : KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )? -> ^( TOK_ANALYZE $parttype ( $statsColumnName)? ) ;
    public final analyzeStatement_return analyzeStatement() throws RecognitionException {
        analyzeStatement_return retval = new analyzeStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ANALYZE321=null;
        Token KW_TABLE322=null;
        Token KW_COMPUTE323=null;
        Token KW_STATISTICS324=null;
        Token KW_FOR325=null;
        Token KW_COLUMNS326=null;
        tableOrPartition_return parttype = null;

        columnNameList_return statsColumnName = null;


        CommonTree KW_ANALYZE321_tree=null;
        CommonTree KW_TABLE322_tree=null;
        CommonTree KW_COMPUTE323_tree=null;
        CommonTree KW_STATISTICS324_tree=null;
        CommonTree KW_FOR325_tree=null;
        CommonTree KW_COLUMNS326_tree=null;
        RewriteRuleTokenStream stream_KW_ANALYZE=new RewriteRuleTokenStream(adaptor,"token KW_ANALYZE");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_STATISTICS=new RewriteRuleTokenStream(adaptor,"token KW_STATISTICS");
        RewriteRuleTokenStream stream_KW_FOR=new RewriteRuleTokenStream(adaptor,"token KW_FOR");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_COMPUTE=new RewriteRuleTokenStream(adaptor,"token KW_COMPUTE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         msgs.push("analyze statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:5: ( KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )? -> ^( TOK_ANALYZE $parttype ( $statsColumnName)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:7: KW_ANALYZE KW_TABLE (parttype= tableOrPartition ) KW_COMPUTE KW_STATISTICS ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )?
            {
            KW_ANALYZE321=(Token)input.LT(1);
            match(input,KW_ANALYZE,FOLLOW_KW_ANALYZE_in_analyzeStatement5922); 
            stream_KW_ANALYZE.add(KW_ANALYZE321);

            KW_TABLE322=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_analyzeStatement5924); 
            stream_KW_TABLE.add(KW_TABLE322);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:27: (parttype= tableOrPartition )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:28: parttype= tableOrPartition
            {
            pushFollow(FOLLOW_tableOrPartition_in_analyzeStatement5929);
            parttype=tableOrPartition();
            _fsp--;

            stream_tableOrPartition.add(parttype.getTree());

            }

            KW_COMPUTE323=(Token)input.LT(1);
            match(input,KW_COMPUTE,FOLLOW_KW_COMPUTE_in_analyzeStatement5932); 
            stream_KW_COMPUTE.add(KW_COMPUTE323);

            KW_STATISTICS324=(Token)input.LT(1);
            match(input,KW_STATISTICS,FOLLOW_KW_STATISTICS_in_analyzeStatement5934); 
            stream_KW_STATISTICS.add(KW_STATISTICS324);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:80: ( KW_FOR KW_COLUMNS statsColumnName= columnNameList )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==KW_FOR) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:81: KW_FOR KW_COLUMNS statsColumnName= columnNameList
                    {
                    KW_FOR325=(Token)input.LT(1);
                    match(input,KW_FOR,FOLLOW_KW_FOR_in_analyzeStatement5937); 
                    stream_KW_FOR.add(KW_FOR325);

                    KW_COLUMNS326=(Token)input.LT(1);
                    match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_analyzeStatement5939); 
                    stream_KW_COLUMNS.add(KW_COLUMNS326);

                    pushFollow(FOLLOW_columnNameList_in_analyzeStatement5943);
                    statsColumnName=columnNameList();
                    _fsp--;

                    stream_columnNameList.add(statsColumnName.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: statsColumnName, parttype
            // token labels: 
            // rule labels: retval, parttype, statsColumnName
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"token parttype",parttype!=null?parttype.tree:null);
            RewriteRuleSubtreeStream stream_statsColumnName=new RewriteRuleSubtreeStream(adaptor,"token statsColumnName",statsColumnName!=null?statsColumnName.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 954:132: -> ^( TOK_ANALYZE $parttype ( $statsColumnName)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:135: ^( TOK_ANALYZE $parttype ( $statsColumnName)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ANALYZE, "TOK_ANALYZE"), root_1);

                adaptor.addChild(root_1, stream_parttype.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:954:159: ( $statsColumnName)?
                if ( stream_statsColumnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_statsColumnName.next());

                }
                stream_statsColumnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end analyzeStatement

    public static class showStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:957:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );
    public final showStatement_return showStatement() throws RecognitionException {
        showStatement_return retval = new showStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token db_name=null;
        Token tblName=null;
        Token prptyName=null;
        Token isExtended=null;
        Token showOptions=null;
        Token KW_SHOW327=null;
        Token KW_DATABASES328=null;
        Token KW_SCHEMAS329=null;
        Token KW_LIKE330=null;
        Token KW_SHOW332=null;
        Token KW_TABLES333=null;
        Token KW_FROM334=null;
        Token KW_IN335=null;
        Token KW_LIKE336=null;
        Token KW_SHOW339=null;
        Token KW_COLUMNS340=null;
        Token KW_FROM341=null;
        Token KW_IN342=null;
        Token KW_FROM343=null;
        Token KW_IN344=null;
        Token KW_SHOW345=null;
        Token KW_FUNCTIONS346=null;
        Token KW_SHOW348=null;
        Token KW_PARTITIONS349=null;
        Token Identifier350=null;
        Token KW_SHOW352=null;
        Token KW_CREATE353=null;
        Token KW_TABLE354=null;
        Token KW_SHOW355=null;
        Token KW_TABLE356=null;
        Token KW_EXTENDED357=null;
        Token KW_FROM358=null;
        Token KW_IN359=null;
        Token KW_LIKE360=null;
        Token KW_SHOW363=null;
        Token KW_TBLPROPERTIES364=null;
        Token LPAREN365=null;
        Token RPAREN366=null;
        Token KW_SHOW367=null;
        Token KW_LOCKS368=null;
        Token KW_SHOW369=null;
        Token KW_INDEX370=null;
        Token KW_INDEXES371=null;
        Token KW_ON372=null;
        Token KW_FROM374=null;
        Token KW_IN375=null;
        tableName_return tabname = null;

        tableName_return tabName = null;

        partTypeExpr_return parttype = null;

        showStmtIdentifier_return showStmtIdentifier331 = null;

        showStmtIdentifier_return showStmtIdentifier337 = null;

        showStmtIdentifier_return showStmtIdentifier338 = null;

        showStmtIdentifier_return showStmtIdentifier347 = null;

        partitionSpec_return partitionSpec351 = null;

        showStmtIdentifier_return showStmtIdentifier361 = null;

        partitionSpec_return partitionSpec362 = null;

        showStmtIdentifier_return showStmtIdentifier373 = null;


        CommonTree db_name_tree=null;
        CommonTree tblName_tree=null;
        CommonTree prptyName_tree=null;
        CommonTree isExtended_tree=null;
        CommonTree showOptions_tree=null;
        CommonTree KW_SHOW327_tree=null;
        CommonTree KW_DATABASES328_tree=null;
        CommonTree KW_SCHEMAS329_tree=null;
        CommonTree KW_LIKE330_tree=null;
        CommonTree KW_SHOW332_tree=null;
        CommonTree KW_TABLES333_tree=null;
        CommonTree KW_FROM334_tree=null;
        CommonTree KW_IN335_tree=null;
        CommonTree KW_LIKE336_tree=null;
        CommonTree KW_SHOW339_tree=null;
        CommonTree KW_COLUMNS340_tree=null;
        CommonTree KW_FROM341_tree=null;
        CommonTree KW_IN342_tree=null;
        CommonTree KW_FROM343_tree=null;
        CommonTree KW_IN344_tree=null;
        CommonTree KW_SHOW345_tree=null;
        CommonTree KW_FUNCTIONS346_tree=null;
        CommonTree KW_SHOW348_tree=null;
        CommonTree KW_PARTITIONS349_tree=null;
        CommonTree Identifier350_tree=null;
        CommonTree KW_SHOW352_tree=null;
        CommonTree KW_CREATE353_tree=null;
        CommonTree KW_TABLE354_tree=null;
        CommonTree KW_SHOW355_tree=null;
        CommonTree KW_TABLE356_tree=null;
        CommonTree KW_EXTENDED357_tree=null;
        CommonTree KW_FROM358_tree=null;
        CommonTree KW_IN359_tree=null;
        CommonTree KW_LIKE360_tree=null;
        CommonTree KW_SHOW363_tree=null;
        CommonTree KW_TBLPROPERTIES364_tree=null;
        CommonTree LPAREN365_tree=null;
        CommonTree RPAREN366_tree=null;
        CommonTree KW_SHOW367_tree=null;
        CommonTree KW_LOCKS368_tree=null;
        CommonTree KW_SHOW369_tree=null;
        CommonTree KW_INDEX370_tree=null;
        CommonTree KW_INDEXES371_tree=null;
        CommonTree KW_ON372_tree=null;
        CommonTree KW_FROM374_tree=null;
        CommonTree KW_IN375_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_LOCKS=new RewriteRuleTokenStream(adaptor,"token KW_LOCKS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_LIKE=new RewriteRuleTokenStream(adaptor,"token KW_LIKE");
        RewriteRuleTokenStream stream_KW_FORMATTED=new RewriteRuleTokenStream(adaptor,"token KW_FORMATTED");
        RewriteRuleTokenStream stream_KW_COLUMNS=new RewriteRuleTokenStream(adaptor,"token KW_COLUMNS");
        RewriteRuleTokenStream stream_KW_PARTITIONS=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONS");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_FUNCTIONS=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTIONS");
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_INDEXES=new RewriteRuleTokenStream(adaptor,"token KW_INDEXES");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_SCHEMAS=new RewriteRuleTokenStream(adaptor,"token KW_SCHEMAS");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_TABLES=new RewriteRuleTokenStream(adaptor,"token KW_TABLES");
        RewriteRuleTokenStream stream_KW_EXTENDED=new RewriteRuleTokenStream(adaptor,"token KW_EXTENDED");
        RewriteRuleTokenStream stream_KW_DATABASES=new RewriteRuleTokenStream(adaptor,"token KW_DATABASES");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_TBLPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_TBLPROPERTIES");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_showStmtIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule showStmtIdentifier");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_partTypeExpr=new RewriteRuleSubtreeStream(adaptor,"rule partTypeExpr");
         msgs.push("show statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:5: ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) )
            int alt114=10;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==KW_SHOW) ) {
                switch ( input.LA(2) ) {
                case KW_CREATE:
                    {
                    alt114=6;
                    }
                    break;
                case KW_COLUMNS:
                    {
                    alt114=3;
                    }
                    break;
                case KW_FUNCTIONS:
                    {
                    alt114=4;
                    }
                    break;
                case KW_LOCKS:
                    {
                    alt114=9;
                    }
                    break;
                case KW_TBLPROPERTIES:
                    {
                    alt114=8;
                    }
                    break;
                case KW_TABLE:
                    {
                    alt114=7;
                    }
                    break;
                case KW_PARTITIONS:
                    {
                    alt114=5;
                    }
                    break;
                case KW_TABLES:
                    {
                    alt114=2;
                    }
                    break;
                case KW_FORMATTED:
                case KW_INDEX:
                case KW_INDEXES:
                    {
                    alt114=10;
                    }
                    break;
                case KW_DATABASES:
                case KW_SCHEMAS:
                    {
                    alt114=1;
                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("957:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );", 114, 1, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("957:1: showStatement : ( KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )? -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? ) | KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )? -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? ) | KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname) | KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )? -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? ) | KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )? -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? ) | KW_SHOW KW_CREATE KW_TABLE tabName= tableName -> ^( TOK_SHOW_CREATETABLE $tabName) | KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )? -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? ) | KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )? -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? ) | KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )? -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? ) | KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )? -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? ) );", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:7: KW_SHOW ( KW_DATABASES | KW_SCHEMAS ) ( KW_LIKE showStmtIdentifier )?
                    {
                    KW_SHOW327=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement5985); 
                    stream_KW_SHOW.add(KW_SHOW327);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:15: ( KW_DATABASES | KW_SCHEMAS )
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( (LA94_0==KW_DATABASES) ) {
                        alt94=1;
                    }
                    else if ( (LA94_0==KW_SCHEMAS) ) {
                        alt94=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("960:15: ( KW_DATABASES | KW_SCHEMAS )", 94, 0, input);

                        throw nvae;
                    }
                    switch (alt94) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:16: KW_DATABASES
                            {
                            KW_DATABASES328=(Token)input.LT(1);
                            match(input,KW_DATABASES,FOLLOW_KW_DATABASES_in_showStatement5988); 
                            stream_KW_DATABASES.add(KW_DATABASES328);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:29: KW_SCHEMAS
                            {
                            KW_SCHEMAS329=(Token)input.LT(1);
                            match(input,KW_SCHEMAS,FOLLOW_KW_SCHEMAS_in_showStatement5990); 
                            stream_KW_SCHEMAS.add(KW_SCHEMAS329);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:41: ( KW_LIKE showStmtIdentifier )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==KW_LIKE) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:42: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE330=(Token)input.LT(1);
                            match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement5994); 
                            stream_KW_LIKE.add(KW_LIKE330);

                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement5996);
                            showStmtIdentifier331=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier331.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 960:71: -> ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:74: ^( TOK_SHOWDATABASES ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWDATABASES, "TOK_SHOWDATABASES"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:960:94: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:7: KW_SHOW KW_TABLES ( ( KW_FROM | KW_IN ) db_name= Identifier )? ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    {
                    KW_SHOW332=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6015); 
                    stream_KW_SHOW.add(KW_SHOW332);

                    KW_TABLES333=(Token)input.LT(1);
                    match(input,KW_TABLES,FOLLOW_KW_TABLES_in_showStatement6017); 
                    stream_KW_TABLES.add(KW_TABLES333);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:25: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( (LA97_0==KW_FROM||LA97_0==KW_IN) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:26: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:26: ( KW_FROM | KW_IN )
                            int alt96=2;
                            int LA96_0 = input.LA(1);

                            if ( (LA96_0==KW_FROM) ) {
                                alt96=1;
                            }
                            else if ( (LA96_0==KW_IN) ) {
                                alt96=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("961:26: ( KW_FROM | KW_IN )", 96, 0, input);

                                throw nvae;
                            }
                            switch (alt96) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:27: KW_FROM
                                    {
                                    KW_FROM334=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6021); 
                                    stream_KW_FROM.add(KW_FROM334);


                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:35: KW_IN
                                    {
                                    KW_IN335=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6023); 
                                    stream_KW_IN.add(KW_IN335);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement6028); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:63: ( KW_LIKE showStmtIdentifier | showStmtIdentifier )?
                    int alt98=3;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==KW_LIKE) ) {
                        alt98=1;
                    }
                    else if ( (LA98_0==StringLiteral||LA98_0==Identifier) ) {
                        alt98=2;
                    }
                    switch (alt98) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:64: KW_LIKE showStmtIdentifier
                            {
                            KW_LIKE336=(Token)input.LT(1);
                            match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement6033); 
                            stream_KW_LIKE.add(KW_LIKE336);

                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6035);
                            showStmtIdentifier337=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier337.getTree());

                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:91: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6037);
                            showStmtIdentifier338=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier338.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, showStmtIdentifier
                    // token labels: db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 961:113: -> ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:116: ^( TOK_SHOWTABLES ( TOK_FROM $db_name)? ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWTABLES, "TOK_SHOWTABLES"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:133: ( TOK_FROM $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, adaptor.create(TOK_FROM, "TOK_FROM"));
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:961:154: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:7: KW_SHOW KW_COLUMNS ( KW_FROM | KW_IN ) tabname= tableName ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    {
                    KW_SHOW339=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6065); 
                    stream_KW_SHOW.add(KW_SHOW339);

                    KW_COLUMNS340=(Token)input.LT(1);
                    match(input,KW_COLUMNS,FOLLOW_KW_COLUMNS_in_showStatement6067); 
                    stream_KW_COLUMNS.add(KW_COLUMNS340);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:26: ( KW_FROM | KW_IN )
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( (LA99_0==KW_FROM) ) {
                        alt99=1;
                    }
                    else if ( (LA99_0==KW_IN) ) {
                        alt99=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("962:26: ( KW_FROM | KW_IN )", 99, 0, input);

                        throw nvae;
                    }
                    switch (alt99) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:27: KW_FROM
                            {
                            KW_FROM341=(Token)input.LT(1);
                            match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6070); 
                            stream_KW_FROM.add(KW_FROM341);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:35: KW_IN
                            {
                            KW_IN342=(Token)input.LT(1);
                            match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6072); 
                            stream_KW_IN.add(KW_IN342);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_tableName_in_showStatement6077);
                    tabname=tableName();
                    _fsp--;

                    stream_tableName.add(tabname.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:60: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==KW_FROM||LA101_0==KW_IN) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:61: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:61: ( KW_FROM | KW_IN )
                            int alt100=2;
                            int LA100_0 = input.LA(1);

                            if ( (LA100_0==KW_FROM) ) {
                                alt100=1;
                            }
                            else if ( (LA100_0==KW_IN) ) {
                                alt100=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("962:61: ( KW_FROM | KW_IN )", 100, 0, input);

                                throw nvae;
                            }
                            switch (alt100) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:62: KW_FROM
                                    {
                                    KW_FROM343=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6081); 
                                    stream_KW_FROM.add(KW_FROM343);


                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:962:70: KW_IN
                                    {
                                    KW_IN344=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6083); 
                                    stream_KW_IN.add(KW_IN344);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement6088); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tabname, db_name
                    // token labels: db_name
                    // rule labels: retval, tabname
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_tabname=new RewriteRuleSubtreeStream(adaptor,"token tabname",tabname!=null?tabname.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 963:5: -> ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:963:8: ^( TOK_SHOWCOLUMNS ( $db_name)? $tabname)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWCOLUMNS, "TOK_SHOWCOLUMNS"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:963:26: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();
                        adaptor.addChild(root_1, stream_tabname.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:7: KW_SHOW KW_FUNCTIONS ( showStmtIdentifier )?
                    {
                    KW_SHOW345=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6116); 
                    stream_KW_SHOW.add(KW_SHOW345);

                    KW_FUNCTIONS346=(Token)input.LT(1);
                    match(input,KW_FUNCTIONS,FOLLOW_KW_FUNCTIONS_in_showStatement6118); 
                    stream_KW_FUNCTIONS.add(KW_FUNCTIONS346);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:28: ( showStmtIdentifier )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==StringLiteral||LA102_0==Identifier) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:28: showStmtIdentifier
                            {
                            pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6120);
                            showStmtIdentifier347=showStmtIdentifier();
                            _fsp--;

                            stream_showStmtIdentifier.add(showStmtIdentifier347.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showStmtIdentifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 964:49: -> ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:52: ^( TOK_SHOWFUNCTIONS ( showStmtIdentifier )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWFUNCTIONS, "TOK_SHOWFUNCTIONS"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:964:72: ( showStmtIdentifier )?
                        if ( stream_showStmtIdentifier.hasNext() ) {
                            adaptor.addChild(root_1, stream_showStmtIdentifier.next());

                        }
                        stream_showStmtIdentifier.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:965:7: KW_SHOW KW_PARTITIONS Identifier ( partitionSpec )?
                    {
                    KW_SHOW348=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6139); 
                    stream_KW_SHOW.add(KW_SHOW348);

                    KW_PARTITIONS349=(Token)input.LT(1);
                    match(input,KW_PARTITIONS,FOLLOW_KW_PARTITIONS_in_showStatement6141); 
                    stream_KW_PARTITIONS.add(KW_PARTITIONS349);

                    Identifier350=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_showStatement6143); 
                    stream_Identifier.add(Identifier350);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:965:40: ( partitionSpec )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==KW_PARTITION) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:965:40: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement6145);
                            partitionSpec351=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec351.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: Identifier, partitionSpec
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 965:55: -> ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:965:58: ^( TOK_SHOWPARTITIONS Identifier ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWPARTITIONS, "TOK_SHOWPARTITIONS"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:965:90: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:966:7: KW_SHOW KW_CREATE KW_TABLE tabName= tableName
                    {
                    KW_SHOW352=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6165); 
                    stream_KW_SHOW.add(KW_SHOW352);

                    KW_CREATE353=(Token)input.LT(1);
                    match(input,KW_CREATE,FOLLOW_KW_CREATE_in_showStatement6167); 
                    stream_KW_CREATE.add(KW_CREATE353);

                    KW_TABLE354=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement6169); 
                    stream_KW_TABLE.add(KW_TABLE354);

                    pushFollow(FOLLOW_tableName_in_showStatement6173);
                    tabName=tableName();
                    _fsp--;

                    stream_tableName.add(tabName.getTree());

                    // AST REWRITE
                    // elements: tabName
                    // token labels: 
                    // rule labels: retval, tabName
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_tabName=new RewriteRuleSubtreeStream(adaptor,"token tabName",tabName!=null?tabName.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 966:52: -> ^( TOK_SHOW_CREATETABLE $tabName)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:966:55: ^( TOK_SHOW_CREATETABLE $tabName)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_CREATETABLE, "TOK_SHOW_CREATETABLE"), root_1);

                        adaptor.addChild(root_1, stream_tabName.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:7: KW_SHOW KW_TABLE KW_EXTENDED ( ( KW_FROM | KW_IN ) db_name= Identifier )? KW_LIKE showStmtIdentifier ( partitionSpec )?
                    {
                    KW_SHOW355=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6190); 
                    stream_KW_SHOW.add(KW_SHOW355);

                    KW_TABLE356=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_showStatement6192); 
                    stream_KW_TABLE.add(KW_TABLE356);

                    KW_EXTENDED357=(Token)input.LT(1);
                    match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement6194); 
                    stream_KW_EXTENDED.add(KW_EXTENDED357);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:36: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==KW_FROM||LA105_0==KW_IN) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:37: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:37: ( KW_FROM | KW_IN )
                            int alt104=2;
                            int LA104_0 = input.LA(1);

                            if ( (LA104_0==KW_FROM) ) {
                                alt104=1;
                            }
                            else if ( (LA104_0==KW_IN) ) {
                                alt104=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("967:37: ( KW_FROM | KW_IN )", 104, 0, input);

                                throw nvae;
                            }
                            switch (alt104) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:38: KW_FROM
                                    {
                                    KW_FROM358=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6198); 
                                    stream_KW_FROM.add(KW_FROM358);


                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:46: KW_IN
                                    {
                                    KW_IN359=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6200); 
                                    stream_KW_IN.add(KW_IN359);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement6205); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }

                    KW_LIKE360=(Token)input.LT(1);
                    match(input,KW_LIKE,FOLLOW_KW_LIKE_in_showStatement6209); 
                    stream_KW_LIKE.add(KW_LIKE360);

                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6211);
                    showStmtIdentifier361=showStmtIdentifier();
                    _fsp--;

                    stream_showStmtIdentifier.add(showStmtIdentifier361.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:101: ( partitionSpec )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==KW_PARTITION) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:967:101: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_showStatement6213);
                            partitionSpec362=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec362.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: db_name, showStmtIdentifier, partitionSpec
                    // token labels: db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 968:5: -> ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:968:8: ^( TOK_SHOW_TABLESTATUS showStmtIdentifier ( $db_name)? ( partitionSpec )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_TABLESTATUS, "TOK_SHOW_TABLESTATUS"), root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:968:50: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:968:60: ( partitionSpec )?
                        if ( stream_partitionSpec.hasNext() ) {
                            adaptor.addChild(root_1, stream_partitionSpec.next());

                        }
                        stream_partitionSpec.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:969:7: KW_SHOW KW_TBLPROPERTIES tblName= Identifier ( LPAREN prptyName= StringLiteral RPAREN )?
                    {
                    KW_SHOW363=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6241); 
                    stream_KW_SHOW.add(KW_SHOW363);

                    KW_TBLPROPERTIES364=(Token)input.LT(1);
                    match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_showStatement6243); 
                    stream_KW_TBLPROPERTIES.add(KW_TBLPROPERTIES364);

                    tblName=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_showStatement6247); 
                    stream_Identifier.add(tblName);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:969:51: ( LPAREN prptyName= StringLiteral RPAREN )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==LPAREN) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:969:52: LPAREN prptyName= StringLiteral RPAREN
                            {
                            LPAREN365=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_showStatement6250); 
                            stream_LPAREN.add(LPAREN365);

                            prptyName=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_showStatement6254); 
                            stream_StringLiteral.add(prptyName);

                            RPAREN366=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_showStatement6256); 
                            stream_RPAREN.add(RPAREN366);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: tblName, prptyName
                    // token labels: prptyName, tblName
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_prptyName=new RewriteRuleTokenStream(adaptor,"token prptyName",prptyName);
                    RewriteRuleTokenStream stream_tblName=new RewriteRuleTokenStream(adaptor,"token tblName",tblName);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 969:92: -> ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:969:95: ^( TOK_SHOW_TBLPROPERTIES $tblName ( $prptyName)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_TBLPROPERTIES, "TOK_SHOW_TBLPROPERTIES"), root_1);

                        adaptor.addChild(root_1, stream_tblName.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:969:129: ( $prptyName)?
                        if ( stream_prptyName.hasNext() ) {
                            adaptor.addChild(root_1, stream_prptyName.next());

                        }
                        stream_prptyName.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 9 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:7: KW_SHOW KW_LOCKS (parttype= partTypeExpr )? (isExtended= KW_EXTENDED )?
                    {
                    KW_SHOW367=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6279); 
                    stream_KW_SHOW.add(KW_SHOW367);

                    KW_LOCKS368=(Token)input.LT(1);
                    match(input,KW_LOCKS,FOLLOW_KW_LOCKS_in_showStatement6281); 
                    stream_KW_LOCKS.add(KW_LOCKS368);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:24: (parttype= partTypeExpr )?
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==Identifier) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:25: parttype= partTypeExpr
                            {
                            pushFollow(FOLLOW_partTypeExpr_in_showStatement6286);
                            parttype=partTypeExpr();
                            _fsp--;

                            stream_partTypeExpr.add(parttype.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:49: (isExtended= KW_EXTENDED )?
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==KW_EXTENDED) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:50: isExtended= KW_EXTENDED
                            {
                            isExtended=(Token)input.LT(1);
                            match(input,KW_EXTENDED,FOLLOW_KW_EXTENDED_in_showStatement6293); 
                            stream_KW_EXTENDED.add(isExtended);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: parttype, isExtended
                    // token labels: isExtended
                    // rule labels: retval, parttype
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_isExtended=new RewriteRuleTokenStream(adaptor,"token isExtended",isExtended);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_parttype=new RewriteRuleSubtreeStream(adaptor,"token parttype",parttype!=null?parttype.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 970:75: -> ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:78: ^( TOK_SHOWLOCKS ( $parttype)? ( $isExtended)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWLOCKS, "TOK_SHOWLOCKS"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:94: ( $parttype)?
                        if ( stream_parttype.hasNext() ) {
                            adaptor.addChild(root_1, stream_parttype.next());

                        }
                        stream_parttype.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:970:105: ( $isExtended)?
                        if ( stream_isExtended.hasNext() ) {
                            adaptor.addChild(root_1, stream_isExtended.next());

                        }
                        stream_isExtended.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 10 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:7: KW_SHOW (showOptions= KW_FORMATTED )? ( KW_INDEX | KW_INDEXES ) KW_ON showStmtIdentifier ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    {
                    KW_SHOW369=(Token)input.LT(1);
                    match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showStatement6317); 
                    stream_KW_SHOW.add(KW_SHOW369);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:15: (showOptions= KW_FORMATTED )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==KW_FORMATTED) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:16: showOptions= KW_FORMATTED
                            {
                            showOptions=(Token)input.LT(1);
                            match(input,KW_FORMATTED,FOLLOW_KW_FORMATTED_in_showStatement6322); 
                            stream_KW_FORMATTED.add(showOptions);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:43: ( KW_INDEX | KW_INDEXES )
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==KW_INDEX) ) {
                        alt111=1;
                    }
                    else if ( (LA111_0==KW_INDEXES) ) {
                        alt111=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("971:43: ( KW_INDEX | KW_INDEXES )", 111, 0, input);

                        throw nvae;
                    }
                    switch (alt111) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:44: KW_INDEX
                            {
                            KW_INDEX370=(Token)input.LT(1);
                            match(input,KW_INDEX,FOLLOW_KW_INDEX_in_showStatement6327); 
                            stream_KW_INDEX.add(KW_INDEX370);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:53: KW_INDEXES
                            {
                            KW_INDEXES371=(Token)input.LT(1);
                            match(input,KW_INDEXES,FOLLOW_KW_INDEXES_in_showStatement6329); 
                            stream_KW_INDEXES.add(KW_INDEXES371);


                            }
                            break;

                    }

                    KW_ON372=(Token)input.LT(1);
                    match(input,KW_ON,FOLLOW_KW_ON_in_showStatement6332); 
                    stream_KW_ON.add(KW_ON372);

                    pushFollow(FOLLOW_showStmtIdentifier_in_showStatement6334);
                    showStmtIdentifier373=showStmtIdentifier();
                    _fsp--;

                    stream_showStmtIdentifier.add(showStmtIdentifier373.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:90: ( ( KW_FROM | KW_IN ) db_name= Identifier )?
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==KW_FROM||LA113_0==KW_IN) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:91: ( KW_FROM | KW_IN ) db_name= Identifier
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:91: ( KW_FROM | KW_IN )
                            int alt112=2;
                            int LA112_0 = input.LA(1);

                            if ( (LA112_0==KW_FROM) ) {
                                alt112=1;
                            }
                            else if ( (LA112_0==KW_IN) ) {
                                alt112=2;
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("971:91: ( KW_FROM | KW_IN )", 112, 0, input);

                                throw nvae;
                            }
                            switch (alt112) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:92: KW_FROM
                                    {
                                    KW_FROM374=(Token)input.LT(1);
                                    match(input,KW_FROM,FOLLOW_KW_FROM_in_showStatement6338); 
                                    stream_KW_FROM.add(KW_FROM374);


                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:971:100: KW_IN
                                    {
                                    KW_IN375=(Token)input.LT(1);
                                    match(input,KW_IN,FOLLOW_KW_IN_in_showStatement6340); 
                                    stream_KW_IN.add(KW_IN375);


                                    }
                                    break;

                            }

                            db_name=(Token)input.LT(1);
                            match(input,Identifier,FOLLOW_Identifier_in_showStatement6345); 
                            stream_Identifier.add(db_name);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: showOptions, db_name, showStmtIdentifier
                    // token labels: showOptions, db_name
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_showOptions=new RewriteRuleTokenStream(adaptor,"token showOptions",showOptions);
                    RewriteRuleTokenStream stream_db_name=new RewriteRuleTokenStream(adaptor,"token db_name",db_name);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 972:5: -> ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:972:8: ^( TOK_SHOWINDEXES showStmtIdentifier ( $showOptions)? ( $db_name)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOWINDEXES, "TOK_SHOWINDEXES"), root_1);

                        adaptor.addChild(root_1, stream_showStmtIdentifier.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:972:45: ( $showOptions)?
                        if ( stream_showOptions.hasNext() ) {
                            adaptor.addChild(root_1, stream_showOptions.next());

                        }
                        stream_showOptions.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:972:59: ( $db_name)?
                        if ( stream_db_name.hasNext() ) {
                            adaptor.addChild(root_1, stream_db_name.next());

                        }
                        stream_db_name.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showStatement

    public static class lockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lockStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:975:1: lockStatement : KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) ;
    public final lockStatement_return lockStatement() throws RecognitionException {
        lockStatement_return retval = new lockStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LOCK376=null;
        Token KW_TABLE377=null;
        tableName_return tableName378 = null;

        partitionSpec_return partitionSpec379 = null;

        lockMode_return lockMode380 = null;


        CommonTree KW_LOCK376_tree=null;
        CommonTree KW_TABLE377_tree=null;
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        RewriteRuleSubtreeStream stream_lockMode=new RewriteRuleSubtreeStream(adaptor,"rule lockMode");
         msgs.push("lock statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:5: ( KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:7: KW_LOCK KW_TABLE tableName ( partitionSpec )? lockMode
            {
            KW_LOCK376=(Token)input.LT(1);
            match(input,KW_LOCK,FOLLOW_KW_LOCK_in_lockStatement6394); 
            stream_KW_LOCK.add(KW_LOCK376);

            KW_TABLE377=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_lockStatement6396); 
            stream_KW_TABLE.add(KW_TABLE377);

            pushFollow(FOLLOW_tableName_in_lockStatement6398);
            tableName378=tableName();
            _fsp--;

            stream_tableName.add(tableName378.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:34: ( partitionSpec )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==KW_PARTITION) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:34: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_lockStatement6400);
                    partitionSpec379=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec379.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_lockMode_in_lockStatement6403);
            lockMode380=lockMode();
            _fsp--;

            stream_lockMode.add(lockMode380.getTree());

            // AST REWRITE
            // elements: partitionSpec, lockMode, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 978:58: -> ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:61: ^( TOK_LOCKTABLE tableName lockMode ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOCKTABLE, "TOK_LOCKTABLE"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                adaptor.addChild(root_1, stream_lockMode.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:978:96: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lockStatement

    public static class lockMode_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lockMode
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:981:1: lockMode : ( KW_SHARED | KW_EXCLUSIVE );
    public final lockMode_return lockMode() throws RecognitionException {
        lockMode_return retval = new lockMode_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set381=null;

        CommonTree set381_tree=null;

         msgs.push("lock mode"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:984:5: ( KW_SHARED | KW_EXCLUSIVE )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set381=(Token)input.LT(1);
            if ( (input.LA(1)>=KW_SHARED && input.LA(1)<=KW_EXCLUSIVE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set381));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_lockMode0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lockMode

    public static class unlockStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unlockStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:987:1: unlockStatement : KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) ;
    public final unlockStatement_return unlockStatement() throws RecognitionException {
        unlockStatement_return retval = new unlockStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNLOCK382=null;
        Token KW_TABLE383=null;
        tableName_return tableName384 = null;

        partitionSpec_return partitionSpec385 = null;


        CommonTree KW_UNLOCK382_tree=null;
        CommonTree KW_TABLE383_tree=null;
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_UNLOCK=new RewriteRuleTokenStream(adaptor,"token KW_UNLOCK");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("unlock statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:5: ( KW_UNLOCK KW_TABLE tableName ( partitionSpec )? -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:7: KW_UNLOCK KW_TABLE tableName ( partitionSpec )?
            {
            KW_UNLOCK382=(Token)input.LT(1);
            match(input,KW_UNLOCK,FOLLOW_KW_UNLOCK_in_unlockStatement6474); 
            stream_KW_UNLOCK.add(KW_UNLOCK382);

            KW_TABLE383=(Token)input.LT(1);
            match(input,KW_TABLE,FOLLOW_KW_TABLE_in_unlockStatement6476); 
            stream_KW_TABLE.add(KW_TABLE383);

            pushFollow(FOLLOW_tableName_in_unlockStatement6478);
            tableName384=tableName();
            _fsp--;

            stream_tableName.add(tableName384.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:36: ( partitionSpec )?
            int alt116=2;
            int LA116_0 = input.LA(1);

            if ( (LA116_0==KW_PARTITION) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:36: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_unlockStatement6480);
                    partitionSpec385=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec385.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, tableName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 990:52: -> ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:55: ^( TOK_UNLOCKTABLE tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNLOCKTABLE, "TOK_UNLOCKTABLE"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:990:83: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end unlockStatement

    public static class createRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createRoleStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:993:1: createRoleStatement : KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) ;
    public final createRoleStatement_return createRoleStatement() throws RecognitionException {
        createRoleStatement_return retval = new createRoleStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token roleName=null;
        Token KW_CREATE386=null;
        kwRole_return kwRole387 = null;


        CommonTree roleName_tree=null;
        CommonTree KW_CREATE386_tree=null;
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
         msgs.push("create role"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:996:5: ( KW_CREATE kwRole roleName= Identifier -> ^( TOK_CREATEROLE $roleName) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:996:7: KW_CREATE kwRole roleName= Identifier
            {
            KW_CREATE386=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createRoleStatement6520); 
            stream_KW_CREATE.add(KW_CREATE386);

            pushFollow(FOLLOW_kwRole_in_createRoleStatement6522);
            kwRole387=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole387.getTree());
            roleName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createRoleStatement6526); 
            stream_Identifier.add(roleName);


            // AST REWRITE
            // elements: roleName
            // token labels: roleName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 997:5: -> ^( TOK_CREATEROLE $roleName)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:997:8: ^( TOK_CREATEROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEROLE, "TOK_CREATEROLE"), root_1);

                adaptor.addChild(root_1, stream_roleName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createRoleStatement

    public static class dropRoleStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropRoleStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1000:1: dropRoleStatement : KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) ;
    public final dropRoleStatement_return dropRoleStatement() throws RecognitionException {
        dropRoleStatement_return retval = new dropRoleStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token roleName=null;
        Token KW_DROP388=null;
        kwRole_return kwRole389 = null;


        CommonTree roleName_tree=null;
        CommonTree KW_DROP388_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        msgs.push("drop role");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1003:5: ( KW_DROP kwRole roleName= Identifier -> ^( TOK_DROPROLE $roleName) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1003:7: KW_DROP kwRole roleName= Identifier
            {
            KW_DROP388=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropRoleStatement6566); 
            stream_KW_DROP.add(KW_DROP388);

            pushFollow(FOLLOW_kwRole_in_dropRoleStatement6568);
            kwRole389=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole389.getTree());
            roleName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropRoleStatement6572); 
            stream_Identifier.add(roleName);


            // AST REWRITE
            // elements: roleName
            // token labels: roleName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_roleName=new RewriteRuleTokenStream(adaptor,"token roleName",roleName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1004:5: -> ^( TOK_DROPROLE $roleName)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1004:8: ^( TOK_DROPROLE $roleName)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPROLE, "TOK_DROPROLE"), root_1);

                adaptor.addChild(root_1, stream_roleName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropRoleStatement

    public static class grantPrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start grantPrivileges
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1007:1: grantPrivileges : KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) ;
    public final grantPrivileges_return grantPrivileges() throws RecognitionException {
        grantPrivileges_return retval = new grantPrivileges_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT390=null;
        Token KW_TO392=null;
        Token KW_WITH394=null;
        privilegeList_return privList = null;

        privilegeObject_return privilegeObject391 = null;

        principalSpecification_return principalSpecification393 = null;

        withOption_return withOption395 = null;


        CommonTree KW_GRANT390_tree=null;
        CommonTree KW_TO392_tree=null;
        CommonTree KW_WITH394_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        RewriteRuleSubtreeStream stream_withOption=new RewriteRuleSubtreeStream(adaptor,"rule withOption");
        msgs.push("grant privileges");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:5: ( KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )? -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1010:7: KW_GRANT privList= privilegeList ( privilegeObject )? KW_TO principalSpecification ( KW_WITH withOption )?
            {
            KW_GRANT390=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantPrivileges6612); 
            stream_KW_GRANT.add(KW_GRANT390);

            pushFollow(FOLLOW_privilegeList_in_grantPrivileges6616);
            privList=privilegeList();
            _fsp--;

            stream_privilegeList.add(privList.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1011:7: ( privilegeObject )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==KW_ON) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1011:7: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_grantPrivileges6624);
                    privilegeObject391=privilegeObject();
                    _fsp--;

                    stream_privilegeObject.add(privilegeObject391.getTree());

                    }
                    break;

            }

            KW_TO392=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_grantPrivileges6633); 
            stream_KW_TO.add(KW_TO392);

            pushFollow(FOLLOW_principalSpecification_in_grantPrivileges6635);
            principalSpecification393=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification393.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1013:7: ( KW_WITH withOption )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==KW_WITH) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1013:8: KW_WITH withOption
                    {
                    KW_WITH394=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_grantPrivileges6644); 
                    stream_KW_WITH.add(KW_WITH394);

                    pushFollow(FOLLOW_withOption_in_grantPrivileges6646);
                    withOption395=withOption();
                    _fsp--;

                    stream_withOption.add(withOption395.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: withOption, privList, principalSpecification, privilegeObject
            // token labels: 
            // rule labels: retval, privList
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_privList=new RewriteRuleSubtreeStream(adaptor,"token privList",privList!=null?privList.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1014:5: -> ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1014:8: ^( TOK_GRANT $privList principalSpecification ( privilegeObject )? ( withOption )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GRANT, "TOK_GRANT"), root_1);

                adaptor.addChild(root_1, stream_privList.next());
                adaptor.addChild(root_1, stream_principalSpecification.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1014:53: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.next());

                }
                stream_privilegeObject.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1014:70: ( withOption )?
                if ( stream_withOption.hasNext() ) {
                    adaptor.addChild(root_1, stream_withOption.next());

                }
                stream_withOption.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grantPrivileges

    public static class revokePrivileges_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start revokePrivileges
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1017:1: revokePrivileges : KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) ;
    public final revokePrivileges_return revokePrivileges() throws RecognitionException {
        revokePrivileges_return retval = new revokePrivileges_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_REVOKE396=null;
        Token KW_FROM399=null;
        privilegeList_return privilegeList397 = null;

        privilegeObject_return privilegeObject398 = null;

        principalSpecification_return principalSpecification400 = null;


        CommonTree KW_REVOKE396_tree=null;
        CommonTree KW_FROM399_tree=null;
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_privilegeList=new RewriteRuleSubtreeStream(adaptor,"rule privilegeList");
        RewriteRuleSubtreeStream stream_privilegeObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeObject");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("revoke privileges");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1020:5: ( KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1020:7: KW_REVOKE privilegeList ( privilegeObject )? KW_FROM principalSpecification
            {
            KW_REVOKE396=(Token)input.LT(1);
            match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokePrivileges6696); 
            stream_KW_REVOKE.add(KW_REVOKE396);

            pushFollow(FOLLOW_privilegeList_in_revokePrivileges6698);
            privilegeList397=privilegeList();
            _fsp--;

            stream_privilegeList.add(privilegeList397.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1020:31: ( privilegeObject )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==KW_ON) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1020:31: privilegeObject
                    {
                    pushFollow(FOLLOW_privilegeObject_in_revokePrivileges6700);
                    privilegeObject398=privilegeObject();
                    _fsp--;

                    stream_privilegeObject.add(privilegeObject398.getTree());

                    }
                    break;

            }

            KW_FROM399=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_revokePrivileges6703); 
            stream_KW_FROM.add(KW_FROM399);

            pushFollow(FOLLOW_principalSpecification_in_revokePrivileges6705);
            principalSpecification400=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification400.getTree());

            // AST REWRITE
            // elements: principalSpecification, privilegeObject, privilegeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1021:5: -> ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1021:8: ^( TOK_REVOKE privilegeList principalSpecification ( privilegeObject )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_REVOKE, "TOK_REVOKE"), root_1);

                adaptor.addChild(root_1, stream_privilegeList.next());
                adaptor.addChild(root_1, stream_principalSpecification.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1021:58: ( privilegeObject )?
                if ( stream_privilegeObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeObject.next());

                }
                stream_privilegeObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end revokePrivileges

    public static class grantRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start grantRole
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1024:1: grantRole : KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) ;
    public final grantRole_return grantRole() throws RecognitionException {
        grantRole_return retval = new grantRole_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT401=null;
        Token Identifier403=null;
        Token COMMA404=null;
        Token Identifier405=null;
        Token KW_TO406=null;
        kwRole_return kwRole402 = null;

        principalSpecification_return principalSpecification407 = null;


        CommonTree KW_GRANT401_tree=null;
        CommonTree Identifier403_tree=null;
        CommonTree COMMA404_tree=null;
        CommonTree Identifier405_tree=null;
        CommonTree KW_TO406_tree=null;
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_TO=new RewriteRuleTokenStream(adaptor,"token KW_TO");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("grant role");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1027:5: ( KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1027:7: KW_GRANT kwRole Identifier ( COMMA Identifier )* KW_TO principalSpecification
            {
            KW_GRANT401=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_grantRole6749); 
            stream_KW_GRANT.add(KW_GRANT401);

            pushFollow(FOLLOW_kwRole_in_grantRole6751);
            kwRole402=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole402.getTree());
            Identifier403=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_grantRole6753); 
            stream_Identifier.add(Identifier403);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1027:34: ( COMMA Identifier )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1027:35: COMMA Identifier
            	    {
            	    COMMA404=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_grantRole6756); 
            	    stream_COMMA.add(COMMA404);

            	    Identifier405=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_grantRole6758); 
            	    stream_Identifier.add(Identifier405);


            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            KW_TO406=(Token)input.LT(1);
            match(input,KW_TO,FOLLOW_KW_TO_in_grantRole6762); 
            stream_KW_TO.add(KW_TO406);

            pushFollow(FOLLOW_principalSpecification_in_grantRole6764);
            principalSpecification407=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification407.getTree());

            // AST REWRITE
            // elements: Identifier, principalSpecification
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1028:5: -> ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1028:8: ^( TOK_GRANT_ROLE principalSpecification ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GRANT_ROLE, "TOK_GRANT_ROLE"), root_1);

                adaptor.addChild(root_1, stream_principalSpecification.next());
                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end grantRole

    public static class revokeRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start revokeRole
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1031:1: revokeRole : KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) ;
    public final revokeRole_return revokeRole() throws RecognitionException {
        revokeRole_return retval = new revokeRole_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_REVOKE408=null;
        Token Identifier410=null;
        Token COMMA411=null;
        Token Identifier412=null;
        Token KW_FROM413=null;
        kwRole_return kwRole409 = null;

        principalSpecification_return principalSpecification414 = null;


        CommonTree KW_REVOKE408_tree=null;
        CommonTree Identifier410_tree=null;
        CommonTree COMMA411_tree=null;
        CommonTree Identifier412_tree=null;
        CommonTree KW_FROM413_tree=null;
        RewriteRuleTokenStream stream_KW_REVOKE=new RewriteRuleTokenStream(adaptor,"token KW_REVOKE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalSpecification=new RewriteRuleSubtreeStream(adaptor,"rule principalSpecification");
        msgs.push("revoke role");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1034:5: ( KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1034:7: KW_REVOKE kwRole Identifier ( COMMA Identifier )* KW_FROM principalSpecification
            {
            KW_REVOKE408=(Token)input.LT(1);
            match(input,KW_REVOKE,FOLLOW_KW_REVOKE_in_revokeRole6806); 
            stream_KW_REVOKE.add(KW_REVOKE408);

            pushFollow(FOLLOW_kwRole_in_revokeRole6808);
            kwRole409=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole409.getTree());
            Identifier410=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_revokeRole6810); 
            stream_Identifier.add(Identifier410);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1034:35: ( COMMA Identifier )*
            loop121:
            do {
                int alt121=2;
                int LA121_0 = input.LA(1);

                if ( (LA121_0==COMMA) ) {
                    alt121=1;
                }


                switch (alt121) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1034:36: COMMA Identifier
            	    {
            	    COMMA411=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_revokeRole6813); 
            	    stream_COMMA.add(COMMA411);

            	    Identifier412=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_revokeRole6815); 
            	    stream_Identifier.add(Identifier412);


            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            KW_FROM413=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_revokeRole6819); 
            stream_KW_FROM.add(KW_FROM413);

            pushFollow(FOLLOW_principalSpecification_in_revokeRole6821);
            principalSpecification414=principalSpecification();
            _fsp--;

            stream_principalSpecification.add(principalSpecification414.getTree());

            // AST REWRITE
            // elements: principalSpecification, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1035:5: -> ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1035:8: ^( TOK_REVOKE_ROLE principalSpecification ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_REVOKE_ROLE, "TOK_REVOKE_ROLE"), root_1);

                adaptor.addChild(root_1, stream_principalSpecification.next());
                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end revokeRole

    public static class showRoleGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showRoleGrants
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1038:1: showRoleGrants : KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) ;
    public final showRoleGrants_return showRoleGrants() throws RecognitionException {
        showRoleGrants_return retval = new showRoleGrants_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SHOW415=null;
        Token KW_GRANT417=null;
        kwRole_return kwRole416 = null;

        principalName_return principalName418 = null;


        CommonTree KW_SHOW415_tree=null;
        CommonTree KW_GRANT417_tree=null;
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        msgs.push("show role grants");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1041:5: ( KW_SHOW kwRole KW_GRANT principalName -> ^( TOK_SHOW_ROLE_GRANT principalName ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1041:7: KW_SHOW kwRole KW_GRANT principalName
            {
            KW_SHOW415=(Token)input.LT(1);
            match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showRoleGrants6863); 
            stream_KW_SHOW.add(KW_SHOW415);

            pushFollow(FOLLOW_kwRole_in_showRoleGrants6865);
            kwRole416=kwRole();
            _fsp--;

            stream_kwRole.add(kwRole416.getTree());
            KW_GRANT417=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showRoleGrants6867); 
            stream_KW_GRANT.add(KW_GRANT417);

            pushFollow(FOLLOW_principalName_in_showRoleGrants6869);
            principalName418=principalName();
            _fsp--;

            stream_principalName.add(principalName418.getTree());

            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1042:5: -> ^( TOK_SHOW_ROLE_GRANT principalName )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1042:8: ^( TOK_SHOW_ROLE_GRANT principalName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_ROLE_GRANT, "TOK_SHOW_ROLE_GRANT"), root_1);

                adaptor.addChild(root_1, stream_principalName.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showRoleGrants

    public static class showGrants_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showGrants
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1045:1: showGrants : KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) ;
    public final showGrants_return showGrants() throws RecognitionException {
        showGrants_return retval = new showGrants_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SHOW419=null;
        Token KW_GRANT420=null;
        principalName_return principalName421 = null;

        privilegeIncludeColObject_return privilegeIncludeColObject422 = null;


        CommonTree KW_SHOW419_tree=null;
        CommonTree KW_GRANT420_tree=null;
        RewriteRuleTokenStream stream_KW_SHOW=new RewriteRuleTokenStream(adaptor,"token KW_SHOW");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
        RewriteRuleSubtreeStream stream_privilegeIncludeColObject=new RewriteRuleSubtreeStream(adaptor,"rule privilegeIncludeColObject");
        msgs.push("show grants");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1048:5: ( KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )? -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1048:7: KW_SHOW KW_GRANT principalName ( privilegeIncludeColObject )?
            {
            KW_SHOW419=(Token)input.LT(1);
            match(input,KW_SHOW,FOLLOW_KW_SHOW_in_showGrants6908); 
            stream_KW_SHOW.add(KW_SHOW419);

            KW_GRANT420=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_showGrants6910); 
            stream_KW_GRANT.add(KW_GRANT420);

            pushFollow(FOLLOW_principalName_in_showGrants6912);
            principalName421=principalName();
            _fsp--;

            stream_principalName.add(principalName421.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1048:38: ( privilegeIncludeColObject )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==KW_ON) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1048:38: privilegeIncludeColObject
                    {
                    pushFollow(FOLLOW_privilegeIncludeColObject_in_showGrants6914);
                    privilegeIncludeColObject422=privilegeIncludeColObject();
                    _fsp--;

                    stream_privilegeIncludeColObject.add(privilegeIncludeColObject422.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: principalName, privilegeIncludeColObject
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1049:5: -> ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1049:8: ^( TOK_SHOW_GRANT principalName ( privilegeIncludeColObject )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SHOW_GRANT, "TOK_SHOW_GRANT"), root_1);

                adaptor.addChild(root_1, stream_principalName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1049:39: ( privilegeIncludeColObject )?
                if ( stream_privilegeIncludeColObject.hasNext() ) {
                    adaptor.addChild(root_1, stream_privilegeIncludeColObject.next());

                }
                stream_privilegeIncludeColObject.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showGrants

    public static class privilegeIncludeColObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeIncludeColObject
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1052:1: privilegeIncludeColObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) ;
    public final privilegeIncludeColObject_return privilegeIncludeColObject() throws RecognitionException {
        privilegeIncludeColObject_return retval = new privilegeIncludeColObject_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token table=null;
        Token KW_ON423=null;
        Token KW_DATABASE424=null;
        Token Identifier425=null;
        Token LPAREN426=null;
        Token RPAREN427=null;
        columnNameList_return cols = null;

        partitionSpec_return partitionSpec428 = null;


        CommonTree table_tree=null;
        CommonTree KW_ON423_tree=null;
        CommonTree KW_DATABASE424_tree=null;
        CommonTree Identifier425_tree=null;
        CommonTree LPAREN426_tree=null;
        CommonTree RPAREN427_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("privilege object including columns");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )? -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( LPAREN cols= columnNameList RPAREN )? ( partitionSpec )?
            {
            KW_ON423=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_privilegeIncludeColObject6957); 
            stream_KW_ON.add(KW_ON423);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:13: (table= KW_TABLE | KW_DATABASE )
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==KW_TABLE) ) {
                alt123=1;
            }
            else if ( (LA123_0==KW_DATABASE) ) {
                alt123=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1055:13: (table= KW_TABLE | KW_DATABASE )", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:14: table= KW_TABLE
                    {
                    table=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeIncludeColObject6962); 
                    stream_KW_TABLE.add(table);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:29: KW_DATABASE
                    {
                    KW_DATABASE424=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6964); 
                    stream_KW_DATABASE.add(KW_DATABASE424);


                    }
                    break;

            }

            Identifier425=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_privilegeIncludeColObject6967); 
            stream_Identifier.add(Identifier425);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:53: ( LPAREN cols= columnNameList RPAREN )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==LPAREN) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:54: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN426=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_privilegeIncludeColObject6970); 
                    stream_LPAREN.add(LPAREN426);

                    pushFollow(FOLLOW_columnNameList_in_privilegeIncludeColObject6974);
                    cols=columnNameList();
                    _fsp--;

                    stream_columnNameList.add(cols.getTree());
                    RPAREN427=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_privilegeIncludeColObject6976); 
                    stream_RPAREN.add(RPAREN427);


                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:90: ( partitionSpec )?
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==KW_PARTITION) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1055:90: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_privilegeIncludeColObject6980);
                    partitionSpec428=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec428.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: table, Identifier, cols, partitionSpec
            // token labels: table
            // rule labels: retval, cols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"token cols",cols!=null?cols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1056:5: -> ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:8: ^( TOK_PRIV_OBJECT_COL Identifier ( $table)? ( $cols)? ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_OBJECT_COL, "TOK_PRIV_OBJECT_COL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:41: ( $table)?
                if ( stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.next());

                }
                stream_table.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:49: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.next());

                }
                stream_cols.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1056:56: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeIncludeColObject

    public static class privilegeObject_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeObject
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1059:1: privilegeObject : KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) ;
    public final privilegeObject_return privilegeObject() throws RecognitionException {
        privilegeObject_return retval = new privilegeObject_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token table=null;
        Token KW_ON429=null;
        Token KW_DATABASE430=null;
        Token Identifier431=null;
        partitionSpec_return partitionSpec432 = null;


        CommonTree table_tree=null;
        CommonTree KW_ON429_tree=null;
        CommonTree KW_DATABASE430_tree=null;
        CommonTree Identifier431_tree=null;
        RewriteRuleTokenStream stream_KW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_DATABASE");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        msgs.push("privilege subject");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:5: ( KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )? -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:7: KW_ON (table= KW_TABLE | KW_DATABASE ) Identifier ( partitionSpec )?
            {
            KW_ON429=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_privilegeObject7031); 
            stream_KW_ON.add(KW_ON429);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:13: (table= KW_TABLE | KW_DATABASE )
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==KW_TABLE) ) {
                alt126=1;
            }
            else if ( (LA126_0==KW_DATABASE) ) {
                alt126=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1062:13: (table= KW_TABLE | KW_DATABASE )", 126, 0, input);

                throw nvae;
            }
            switch (alt126) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:14: table= KW_TABLE
                    {
                    table=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_privilegeObject7036); 
                    stream_KW_TABLE.add(table);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:29: KW_DATABASE
                    {
                    KW_DATABASE430=(Token)input.LT(1);
                    match(input,KW_DATABASE,FOLLOW_KW_DATABASE_in_privilegeObject7038); 
                    stream_KW_DATABASE.add(KW_DATABASE430);


                    }
                    break;

            }

            Identifier431=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_privilegeObject7041); 
            stream_Identifier.add(Identifier431);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:53: ( partitionSpec )?
            int alt127=2;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==KW_PARTITION) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1062:53: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_privilegeObject7043);
                    partitionSpec432=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec432.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: table, Identifier, partitionSpec
            // token labels: table
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1063:5: -> ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1063:8: ^( TOK_PRIV_OBJECT Identifier ( $table)? ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_OBJECT, "TOK_PRIV_OBJECT"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1063:37: ( $table)?
                if ( stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.next());

                }
                stream_table.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1063:45: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeObject

    public static class privilegeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1066:1: privilegeList : privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) ;
    public final privilegeList_return privilegeList() throws RecognitionException {
        privilegeList_return retval = new privilegeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA434=null;
        privlegeDef_return privlegeDef433 = null;

        privlegeDef_return privlegeDef435 = null;


        CommonTree COMMA434_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_privlegeDef=new RewriteRuleSubtreeStream(adaptor,"rule privlegeDef");
        msgs.push("grant privilege list");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1069:5: ( privlegeDef ( COMMA privlegeDef )* -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1069:7: privlegeDef ( COMMA privlegeDef )*
            {
            pushFollow(FOLLOW_privlegeDef_in_privilegeList7090);
            privlegeDef433=privlegeDef();
            _fsp--;

            stream_privlegeDef.add(privlegeDef433.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1069:19: ( COMMA privlegeDef )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==COMMA) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1069:20: COMMA privlegeDef
            	    {
            	    COMMA434=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_privilegeList7093); 
            	    stream_COMMA.add(COMMA434);

            	    pushFollow(FOLLOW_privlegeDef_in_privilegeList7095);
            	    privlegeDef435=privlegeDef();
            	    _fsp--;

            	    stream_privlegeDef.add(privlegeDef435.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            // AST REWRITE
            // elements: privlegeDef
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1070:5: -> ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1070:8: ^( TOK_PRIVILEGE_LIST ( privlegeDef )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIVILEGE_LIST, "TOK_PRIVILEGE_LIST"), root_1);

                if ( !(stream_privlegeDef.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_privlegeDef.hasNext() ) {
                    adaptor.addChild(root_1, stream_privlegeDef.next());

                }
                stream_privlegeDef.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeList

    public static class privlegeDef_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privlegeDef
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1073:1: privlegeDef : privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) ;
    public final privlegeDef_return privlegeDef() throws RecognitionException {
        privlegeDef_return retval = new privlegeDef_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN437=null;
        Token RPAREN438=null;
        columnNameList_return cols = null;

        privilegeType_return privilegeType436 = null;


        CommonTree LPAREN437_tree=null;
        CommonTree RPAREN438_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_privilegeType=new RewriteRuleSubtreeStream(adaptor,"rule privilegeType");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        msgs.push("grant privilege");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1076:5: ( privilegeType ( LPAREN cols= columnNameList RPAREN )? -> ^( TOK_PRIVILEGE privilegeType ( $cols)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1076:7: privilegeType ( LPAREN cols= columnNameList RPAREN )?
            {
            pushFollow(FOLLOW_privilegeType_in_privlegeDef7137);
            privilegeType436=privilegeType();
            _fsp--;

            stream_privilegeType.add(privilegeType436.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1076:21: ( LPAREN cols= columnNameList RPAREN )?
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==LPAREN) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1076:22: LPAREN cols= columnNameList RPAREN
                    {
                    LPAREN437=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_privlegeDef7140); 
                    stream_LPAREN.add(LPAREN437);

                    pushFollow(FOLLOW_columnNameList_in_privlegeDef7144);
                    cols=columnNameList();
                    _fsp--;

                    stream_columnNameList.add(cols.getTree());
                    RPAREN438=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_privlegeDef7146); 
                    stream_RPAREN.add(RPAREN438);


                    }
                    break;

            }


            // AST REWRITE
            // elements: cols, privilegeType
            // token labels: 
            // rule labels: retval, cols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_cols=new RewriteRuleSubtreeStream(adaptor,"token cols",cols!=null?cols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1077:5: -> ^( TOK_PRIVILEGE privilegeType ( $cols)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1077:8: ^( TOK_PRIVILEGE privilegeType ( $cols)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIVILEGE, "TOK_PRIVILEGE"), root_1);

                adaptor.addChild(root_1, stream_privilegeType.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1077:38: ( $cols)?
                if ( stream_cols.hasNext() ) {
                    adaptor.addChild(root_1, stream_cols.next());

                }
                stream_cols.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privlegeDef

    public static class privilegeType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start privilegeType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1080:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) );
    public final privilegeType_return privilegeType() throws RecognitionException {
        privilegeType_return retval = new privilegeType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ALL439=null;
        Token KW_ALTER440=null;
        Token KW_UPDATE441=null;
        Token KW_CREATE442=null;
        Token KW_DROP443=null;
        Token KW_INDEX444=null;
        Token KW_LOCK445=null;
        Token KW_SELECT446=null;
        Token KW_SHOW_DATABASE447=null;

        CommonTree KW_ALL439_tree=null;
        CommonTree KW_ALTER440_tree=null;
        CommonTree KW_UPDATE441_tree=null;
        CommonTree KW_CREATE442_tree=null;
        CommonTree KW_DROP443_tree=null;
        CommonTree KW_INDEX444_tree=null;
        CommonTree KW_LOCK445_tree=null;
        CommonTree KW_SELECT446_tree=null;
        CommonTree KW_SHOW_DATABASE447_tree=null;
        RewriteRuleTokenStream stream_KW_ALTER=new RewriteRuleTokenStream(adaptor,"token KW_ALTER");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_UPDATE=new RewriteRuleTokenStream(adaptor,"token KW_UPDATE");
        RewriteRuleTokenStream stream_KW_SHOW_DATABASE=new RewriteRuleTokenStream(adaptor,"token KW_SHOW_DATABASE");
        RewriteRuleTokenStream stream_KW_INDEX=new RewriteRuleTokenStream(adaptor,"token KW_INDEX");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_LOCK=new RewriteRuleTokenStream(adaptor,"token KW_LOCK");

        msgs.push("privilege type");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1083:5: ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) )
            int alt130=9;
            switch ( input.LA(1) ) {
            case KW_ALL:
                {
                alt130=1;
                }
                break;
            case KW_ALTER:
                {
                alt130=2;
                }
                break;
            case KW_UPDATE:
                {
                alt130=3;
                }
                break;
            case KW_CREATE:
                {
                alt130=4;
                }
                break;
            case KW_DROP:
                {
                alt130=5;
                }
                break;
            case KW_INDEX:
                {
                alt130=6;
                }
                break;
            case KW_LOCK:
                {
                alt130=7;
                }
                break;
            case KW_SELECT:
                {
                alt130=8;
                }
                break;
            case KW_SHOW_DATABASE:
                {
                alt130=9;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1080:1: privilegeType : ( KW_ALL -> ^( TOK_PRIV_ALL ) | KW_ALTER -> ^( TOK_PRIV_ALTER_METADATA ) | KW_UPDATE -> ^( TOK_PRIV_ALTER_DATA ) | KW_CREATE -> ^( TOK_PRIV_CREATE ) | KW_DROP -> ^( TOK_PRIV_DROP ) | KW_INDEX -> ^( TOK_PRIV_INDEX ) | KW_LOCK -> ^( TOK_PRIV_LOCK ) | KW_SELECT -> ^( TOK_PRIV_SELECT ) | KW_SHOW_DATABASE -> ^( TOK_PRIV_SHOW_DATABASE ) );", 130, 0, input);

                throw nvae;
            }

            switch (alt130) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1083:7: KW_ALL
                    {
                    KW_ALL439=(Token)input.LT(1);
                    match(input,KW_ALL,FOLLOW_KW_ALL_in_privilegeType7191); 
                    stream_KW_ALL.add(KW_ALL439);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1083:14: -> ^( TOK_PRIV_ALL )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1083:17: ^( TOK_PRIV_ALL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_ALL, "TOK_PRIV_ALL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1084:7: KW_ALTER
                    {
                    KW_ALTER440=(Token)input.LT(1);
                    match(input,KW_ALTER,FOLLOW_KW_ALTER_in_privilegeType7205); 
                    stream_KW_ALTER.add(KW_ALTER440);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1084:16: -> ^( TOK_PRIV_ALTER_METADATA )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1084:19: ^( TOK_PRIV_ALTER_METADATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_ALTER_METADATA, "TOK_PRIV_ALTER_METADATA"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1085:7: KW_UPDATE
                    {
                    KW_UPDATE441=(Token)input.LT(1);
                    match(input,KW_UPDATE,FOLLOW_KW_UPDATE_in_privilegeType7219); 
                    stream_KW_UPDATE.add(KW_UPDATE441);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1085:17: -> ^( TOK_PRIV_ALTER_DATA )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1085:20: ^( TOK_PRIV_ALTER_DATA )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_ALTER_DATA, "TOK_PRIV_ALTER_DATA"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:7: KW_CREATE
                    {
                    KW_CREATE442=(Token)input.LT(1);
                    match(input,KW_CREATE,FOLLOW_KW_CREATE_in_privilegeType7233); 
                    stream_KW_CREATE.add(KW_CREATE442);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1086:17: -> ^( TOK_PRIV_CREATE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1086:20: ^( TOK_PRIV_CREATE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_CREATE, "TOK_PRIV_CREATE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1087:7: KW_DROP
                    {
                    KW_DROP443=(Token)input.LT(1);
                    match(input,KW_DROP,FOLLOW_KW_DROP_in_privilegeType7247); 
                    stream_KW_DROP.add(KW_DROP443);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1087:15: -> ^( TOK_PRIV_DROP )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1087:18: ^( TOK_PRIV_DROP )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_DROP, "TOK_PRIV_DROP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1088:7: KW_INDEX
                    {
                    KW_INDEX444=(Token)input.LT(1);
                    match(input,KW_INDEX,FOLLOW_KW_INDEX_in_privilegeType7261); 
                    stream_KW_INDEX.add(KW_INDEX444);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1088:16: -> ^( TOK_PRIV_INDEX )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1088:19: ^( TOK_PRIV_INDEX )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_INDEX, "TOK_PRIV_INDEX"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1089:7: KW_LOCK
                    {
                    KW_LOCK445=(Token)input.LT(1);
                    match(input,KW_LOCK,FOLLOW_KW_LOCK_in_privilegeType7275); 
                    stream_KW_LOCK.add(KW_LOCK445);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1089:15: -> ^( TOK_PRIV_LOCK )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1089:18: ^( TOK_PRIV_LOCK )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_LOCK, "TOK_PRIV_LOCK"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1090:7: KW_SELECT
                    {
                    KW_SELECT446=(Token)input.LT(1);
                    match(input,KW_SELECT,FOLLOW_KW_SELECT_in_privilegeType7289); 
                    stream_KW_SELECT.add(KW_SELECT446);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1090:17: -> ^( TOK_PRIV_SELECT )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1090:20: ^( TOK_PRIV_SELECT )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_SELECT, "TOK_PRIV_SELECT"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 9 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1091:7: KW_SHOW_DATABASE
                    {
                    KW_SHOW_DATABASE447=(Token)input.LT(1);
                    match(input,KW_SHOW_DATABASE,FOLLOW_KW_SHOW_DATABASE_in_privilegeType7303); 
                    stream_KW_SHOW_DATABASE.add(KW_SHOW_DATABASE447);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1091:24: -> ^( TOK_PRIV_SHOW_DATABASE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1091:27: ^( TOK_PRIV_SHOW_DATABASE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRIV_SHOW_DATABASE, "TOK_PRIV_SHOW_DATABASE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end privilegeType

    public static class principalSpecification_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start principalSpecification
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1094:1: principalSpecification : principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) ;
    public final principalSpecification_return principalSpecification() throws RecognitionException {
        principalSpecification_return retval = new principalSpecification_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA449=null;
        principalName_return principalName448 = null;

        principalName_return principalName450 = null;


        CommonTree COMMA449_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_principalName=new RewriteRuleSubtreeStream(adaptor,"rule principalName");
         msgs.push("user/group/role name list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1097:5: ( principalName ( COMMA principalName )* -> ^( TOK_PRINCIPAL_NAME ( principalName )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1097:7: principalName ( COMMA principalName )*
            {
            pushFollow(FOLLOW_principalName_in_principalSpecification7336);
            principalName448=principalName();
            _fsp--;

            stream_principalName.add(principalName448.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1097:21: ( COMMA principalName )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==COMMA) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1097:22: COMMA principalName
            	    {
            	    COMMA449=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_principalSpecification7339); 
            	    stream_COMMA.add(COMMA449);

            	    pushFollow(FOLLOW_principalName_in_principalSpecification7341);
            	    principalName450=principalName();
            	    _fsp--;

            	    stream_principalName.add(principalName450.getTree());

            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);


            // AST REWRITE
            // elements: principalName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1097:44: -> ^( TOK_PRINCIPAL_NAME ( principalName )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1097:47: ^( TOK_PRINCIPAL_NAME ( principalName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PRINCIPAL_NAME, "TOK_PRINCIPAL_NAME"), root_1);

                if ( !(stream_principalName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_principalName.hasNext() ) {
                    adaptor.addChild(root_1, stream_principalName.next());

                }
                stream_principalName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end principalSpecification

    public static class principalName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start principalName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1100:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );
    public final principalName_return principalName() throws RecognitionException {
        principalName_return retval = new principalName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier452=null;
        Token KW_GROUP453=null;
        Token Identifier454=null;
        Token Identifier456=null;
        kwUser_return kwUser451 = null;

        kwRole_return kwRole455 = null;


        CommonTree Identifier452_tree=null;
        CommonTree KW_GROUP453_tree=null;
        CommonTree Identifier454_tree=null;
        CommonTree Identifier456_tree=null;
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_kwRole=new RewriteRuleSubtreeStream(adaptor,"rule kwRole");
        RewriteRuleSubtreeStream stream_kwUser=new RewriteRuleSubtreeStream(adaptor,"rule kwUser");
        msgs.push("user|group|role name");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1103:5: ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) )
            int alt132=3;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==Identifier) ) {
                int LA132_1 = input.LA(2);

                if ( (LA132_1==Identifier) ) {
                    int LA132_3 = input.LA(3);

                    if ( (input.LT(1).getText().equalsIgnoreCase("user")) ) {
                        alt132=1;
                    }
                    else if ( (input.LT(1).getText().equalsIgnoreCase("role")) ) {
                        alt132=3;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1100:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );", 132, 3, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1100:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );", 132, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA132_0==KW_GROUP) ) {
                alt132=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1100:1: principalName : ( kwUser Identifier -> ^( TOK_USER Identifier ) | KW_GROUP Identifier -> ^( TOK_GROUP Identifier ) | kwRole Identifier -> ^( TOK_ROLE Identifier ) );", 132, 0, input);

                throw nvae;
            }
            switch (alt132) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1103:7: kwUser Identifier
                    {
                    pushFollow(FOLLOW_kwUser_in_principalName7379);
                    kwUser451=kwUser();
                    _fsp--;

                    stream_kwUser.add(kwUser451.getTree());
                    Identifier452=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_principalName7381); 
                    stream_Identifier.add(Identifier452);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1103:25: -> ^( TOK_USER Identifier )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1103:28: ^( TOK_USER Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_USER, "TOK_USER"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1104:7: KW_GROUP Identifier
                    {
                    KW_GROUP453=(Token)input.LT(1);
                    match(input,KW_GROUP,FOLLOW_KW_GROUP_in_principalName7397); 
                    stream_KW_GROUP.add(KW_GROUP453);

                    Identifier454=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_principalName7399); 
                    stream_Identifier.add(Identifier454);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1104:27: -> ^( TOK_GROUP Identifier )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1104:30: ^( TOK_GROUP Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUP, "TOK_GROUP"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1105:7: kwRole Identifier
                    {
                    pushFollow(FOLLOW_kwRole_in_principalName7415);
                    kwRole455=kwRole();
                    _fsp--;

                    stream_kwRole.add(kwRole455.getTree());
                    Identifier456=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_principalName7417); 
                    stream_Identifier.add(Identifier456);


                    // AST REWRITE
                    // elements: Identifier
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1105:25: -> ^( TOK_ROLE Identifier )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1105:28: ^( TOK_ROLE Identifier )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ROLE, "TOK_ROLE"), root_1);

                        adaptor.addChild(root_1, stream_Identifier.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end principalName

    public static class withOption_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start withOption
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1108:1: withOption : KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) ;
    public final withOption_return withOption() throws RecognitionException {
        withOption_return retval = new withOption_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_GRANT457=null;
        Token KW_OPTION458=null;

        CommonTree KW_GRANT457_tree=null;
        CommonTree KW_OPTION458_tree=null;
        RewriteRuleTokenStream stream_KW_OPTION=new RewriteRuleTokenStream(adaptor,"token KW_OPTION");
        RewriteRuleTokenStream stream_KW_GRANT=new RewriteRuleTokenStream(adaptor,"token KW_GRANT");

        msgs.push("grant with option");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1111:5: ( KW_GRANT KW_OPTION -> ^( TOK_GRANT_WITH_OPTION ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1111:7: KW_GRANT KW_OPTION
            {
            KW_GRANT457=(Token)input.LT(1);
            match(input,KW_GRANT,FOLLOW_KW_GRANT_in_withOption7452); 
            stream_KW_GRANT.add(KW_GRANT457);

            KW_OPTION458=(Token)input.LT(1);
            match(input,KW_OPTION,FOLLOW_KW_OPTION_in_withOption7454); 
            stream_KW_OPTION.add(KW_OPTION458);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1112:5: -> ^( TOK_GRANT_WITH_OPTION )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1112:8: ^( TOK_GRANT_WITH_OPTION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GRANT_WITH_OPTION, "TOK_GRANT_WITH_OPTION"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop();
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end withOption

    public static class metastoreCheck_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start metastoreCheck
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1115:1: metastoreCheck : KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) ;
    public final metastoreCheck_return metastoreCheck() throws RecognitionException {
        metastoreCheck_return retval = new metastoreCheck_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token repair=null;
        Token table=null;
        Token KW_MSCK459=null;
        Token KW_TABLE460=null;
        Token COMMA462=null;
        partitionSpec_return partitionSpec461 = null;

        partitionSpec_return partitionSpec463 = null;


        CommonTree repair_tree=null;
        CommonTree table_tree=null;
        CommonTree KW_MSCK459_tree=null;
        CommonTree KW_TABLE460_tree=null;
        CommonTree COMMA462_tree=null;
        RewriteRuleTokenStream stream_KW_MSCK=new RewriteRuleTokenStream(adaptor,"token KW_MSCK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_REPAIR=new RewriteRuleTokenStream(adaptor,"token KW_REPAIR");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
         msgs.push("metastore check statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:5: ( KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )? -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:7: KW_MSCK (repair= KW_REPAIR )? ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            {
            KW_MSCK459=(Token)input.LT(1);
            match(input,KW_MSCK,FOLLOW_KW_MSCK_in_metastoreCheck7491); 
            stream_KW_MSCK.add(KW_MSCK459);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:15: (repair= KW_REPAIR )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==KW_REPAIR) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:16: repair= KW_REPAIR
                    {
                    repair=(Token)input.LT(1);
                    match(input,KW_REPAIR,FOLLOW_KW_REPAIR_in_metastoreCheck7496); 
                    stream_KW_REPAIR.add(repair);


                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:35: ( KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )* )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==KW_TABLE) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:36: KW_TABLE table= Identifier ( partitionSpec )? ( COMMA partitionSpec )*
                    {
                    KW_TABLE460=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_metastoreCheck7501); 
                    stream_KW_TABLE.add(KW_TABLE460);

                    table=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_metastoreCheck7505); 
                    stream_Identifier.add(table);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:62: ( partitionSpec )?
                    int alt134=2;
                    int LA134_0 = input.LA(1);

                    if ( (LA134_0==KW_PARTITION) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:62: partitionSpec
                            {
                            pushFollow(FOLLOW_partitionSpec_in_metastoreCheck7507);
                            partitionSpec461=partitionSpec();
                            _fsp--;

                            stream_partitionSpec.add(partitionSpec461.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:77: ( COMMA partitionSpec )*
                    loop135:
                    do {
                        int alt135=2;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==COMMA) ) {
                            alt135=1;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1118:78: COMMA partitionSpec
                    	    {
                    	    COMMA462=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_metastoreCheck7511); 
                    	    stream_COMMA.add(COMMA462);

                    	    pushFollow(FOLLOW_partitionSpec_in_metastoreCheck7513);
                    	    partitionSpec463=partitionSpec();
                    	    _fsp--;

                    	    stream_partitionSpec.add(partitionSpec463.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);


                    }
                    break;

            }


            // AST REWRITE
            // elements: partitionSpec, table, repair
            // token labels: repair, table
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_repair=new RewriteRuleTokenStream(adaptor,"token repair",repair);
            RewriteRuleTokenStream stream_table=new RewriteRuleTokenStream(adaptor,"token table",table);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1119:5: -> ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1119:8: ^( TOK_MSCK ( $repair)? ( $table ( partitionSpec )* )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_MSCK, "TOK_MSCK"), root_1);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1119:19: ( $repair)?
                if ( stream_repair.hasNext() ) {
                    adaptor.addChild(root_1, stream_repair.next());

                }
                stream_repair.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1119:28: ( $table ( partitionSpec )* )?
                if ( stream_partitionSpec.hasNext()||stream_table.hasNext() ) {
                    adaptor.addChild(root_1, stream_table.next());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1119:36: ( partitionSpec )*
                    while ( stream_partitionSpec.hasNext() ) {
                        adaptor.addChild(root_1, stream_partitionSpec.next());

                    }
                    stream_partitionSpec.reset();

                }
                stream_partitionSpec.reset();
                stream_table.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end metastoreCheck

    public static class createFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createFunctionStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1122:1: createFunctionStatement : KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) ;
    public final createFunctionStatement_return createFunctionStatement() throws RecognitionException {
        createFunctionStatement_return retval = new createFunctionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CREATE464=null;
        Token KW_TEMPORARY465=null;
        Token KW_FUNCTION466=null;
        Token Identifier467=null;
        Token KW_AS468=null;
        Token StringLiteral469=null;

        CommonTree KW_CREATE464_tree=null;
        CommonTree KW_TEMPORARY465_tree=null;
        CommonTree KW_FUNCTION466_tree=null;
        CommonTree Identifier467_tree=null;
        CommonTree KW_AS468_tree=null;
        CommonTree StringLiteral469_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("create function statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1125:5: ( KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral -> ^( TOK_CREATEFUNCTION Identifier StringLiteral ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1125:7: KW_CREATE KW_TEMPORARY KW_FUNCTION Identifier KW_AS StringLiteral
            {
            KW_CREATE464=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createFunctionStatement7567); 
            stream_KW_CREATE.add(KW_CREATE464);

            KW_TEMPORARY465=(Token)input.LT(1);
            match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_createFunctionStatement7569); 
            stream_KW_TEMPORARY.add(KW_TEMPORARY465);

            KW_FUNCTION466=(Token)input.LT(1);
            match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_createFunctionStatement7571); 
            stream_KW_FUNCTION.add(KW_FUNCTION466);

            Identifier467=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_createFunctionStatement7573); 
            stream_Identifier.add(Identifier467);

            KW_AS468=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createFunctionStatement7575); 
            stream_KW_AS.add(KW_AS468);

            StringLiteral469=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_createFunctionStatement7577); 
            stream_StringLiteral.add(StringLiteral469);


            // AST REWRITE
            // elements: StringLiteral, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1126:5: -> ^( TOK_CREATEFUNCTION Identifier StringLiteral )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1126:8: ^( TOK_CREATEFUNCTION Identifier StringLiteral )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEFUNCTION, "TOK_CREATEFUNCTION"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createFunctionStatement

    public static class dropFunctionStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropFunctionStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1129:1: dropFunctionStatement : KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) ;
    public final dropFunctionStatement_return dropFunctionStatement() throws RecognitionException {
        dropFunctionStatement_return retval = new dropFunctionStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP470=null;
        Token KW_TEMPORARY471=null;
        Token KW_FUNCTION472=null;
        Token Identifier474=null;
        ifExists_return ifExists473 = null;


        CommonTree KW_DROP470_tree=null;
        CommonTree KW_TEMPORARY471_tree=null;
        CommonTree KW_FUNCTION472_tree=null;
        CommonTree Identifier474_tree=null;
        RewriteRuleTokenStream stream_KW_FUNCTION=new RewriteRuleTokenStream(adaptor,"token KW_FUNCTION");
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_TEMPORARY=new RewriteRuleTokenStream(adaptor,"token KW_TEMPORARY");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop temporary function statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1132:5: ( KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1132:7: KW_DROP KW_TEMPORARY KW_FUNCTION ( ifExists )? Identifier
            {
            KW_DROP470=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropFunctionStatement7618); 
            stream_KW_DROP.add(KW_DROP470);

            KW_TEMPORARY471=(Token)input.LT(1);
            match(input,KW_TEMPORARY,FOLLOW_KW_TEMPORARY_in_dropFunctionStatement7620); 
            stream_KW_TEMPORARY.add(KW_TEMPORARY471);

            KW_FUNCTION472=(Token)input.LT(1);
            match(input,KW_FUNCTION,FOLLOW_KW_FUNCTION_in_dropFunctionStatement7622); 
            stream_KW_FUNCTION.add(KW_FUNCTION472);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1132:40: ( ifExists )?
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==KW_IF) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1132:40: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropFunctionStatement7624);
                    ifExists473=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists473.getTree());

                    }
                    break;

            }

            Identifier474=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropFunctionStatement7627); 
            stream_Identifier.add(Identifier474);


            // AST REWRITE
            // elements: ifExists, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1133:5: -> ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1133:8: ^( TOK_DROPFUNCTION Identifier ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPFUNCTION, "TOK_DROPFUNCTION"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1133:38: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropFunctionStatement

    public static class createViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start createViewStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1136:1: createViewStatement : KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) ;
    public final createViewStatement_return createViewStatement() throws RecognitionException {
        createViewStatement_return retval = new createViewStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CREATE475=null;
        Token KW_VIEW477=null;
        Token LPAREN479=null;
        Token RPAREN481=null;
        Token KW_AS485=null;
        tableName_return name = null;

        orReplace_return orReplace476 = null;

        ifNotExists_return ifNotExists478 = null;

        columnNameCommentList_return columnNameCommentList480 = null;

        tableComment_return tableComment482 = null;

        viewPartition_return viewPartition483 = null;

        tablePropertiesPrefixed_return tablePropertiesPrefixed484 = null;

        selectStatement_return selectStatement486 = null;


        CommonTree KW_CREATE475_tree=null;
        CommonTree KW_VIEW477_tree=null;
        CommonTree LPAREN479_tree=null;
        CommonTree RPAREN481_tree=null;
        CommonTree KW_AS485_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_CREATE=new RewriteRuleTokenStream(adaptor,"token KW_CREATE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectStatement=new RewriteRuleSubtreeStream(adaptor,"rule selectStatement");
        RewriteRuleSubtreeStream stream_columnNameCommentList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameCommentList");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_orReplace=new RewriteRuleSubtreeStream(adaptor,"rule orReplace");
        RewriteRuleSubtreeStream stream_tableComment=new RewriteRuleSubtreeStream(adaptor,"rule tableComment");
        RewriteRuleSubtreeStream stream_tablePropertiesPrefixed=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesPrefixed");
        RewriteRuleSubtreeStream stream_viewPartition=new RewriteRuleSubtreeStream(adaptor,"rule viewPartition");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");

            msgs.push("create view statement");

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1141:5: ( KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1141:7: KW_CREATE ( orReplace )? KW_VIEW ( ifNotExists )? name= tableName ( LPAREN columnNameCommentList RPAREN )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? KW_AS selectStatement
            {
            KW_CREATE475=(Token)input.LT(1);
            match(input,KW_CREATE,FOLLOW_KW_CREATE_in_createViewStatement7669); 
            stream_KW_CREATE.add(KW_CREATE475);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1141:17: ( orReplace )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==KW_OR) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1141:18: orReplace
                    {
                    pushFollow(FOLLOW_orReplace_in_createViewStatement7672);
                    orReplace476=orReplace();
                    _fsp--;

                    stream_orReplace.add(orReplace476.getTree());

                    }
                    break;

            }

            KW_VIEW477=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_createViewStatement7676); 
            stream_KW_VIEW.add(KW_VIEW477);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1141:38: ( ifNotExists )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==KW_IF) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1141:39: ifNotExists
                    {
                    pushFollow(FOLLOW_ifNotExists_in_createViewStatement7679);
                    ifNotExists478=ifNotExists();
                    _fsp--;

                    stream_ifNotExists.add(ifNotExists478.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_tableName_in_createViewStatement7685);
            name=tableName();
            _fsp--;

            stream_tableName.add(name.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1142:9: ( LPAREN columnNameCommentList RPAREN )?
            int alt140=2;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==LPAREN) ) {
                alt140=1;
            }
            switch (alt140) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1142:10: LPAREN columnNameCommentList RPAREN
                    {
                    LPAREN479=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_createViewStatement7696); 
                    stream_LPAREN.add(LPAREN479);

                    pushFollow(FOLLOW_columnNameCommentList_in_createViewStatement7698);
                    columnNameCommentList480=columnNameCommentList();
                    _fsp--;

                    stream_columnNameCommentList.add(columnNameCommentList480.getTree());
                    RPAREN481=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_createViewStatement7700); 
                    stream_RPAREN.add(RPAREN481);


                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1142:48: ( tableComment )?
            int alt141=2;
            int LA141_0 = input.LA(1);

            if ( (LA141_0==KW_COMMENT) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1142:48: tableComment
                    {
                    pushFollow(FOLLOW_tableComment_in_createViewStatement7704);
                    tableComment482=tableComment();
                    _fsp--;

                    stream_tableComment.add(tableComment482.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1142:62: ( viewPartition )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==KW_PARTITIONED) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1142:62: viewPartition
                    {
                    pushFollow(FOLLOW_viewPartition_in_createViewStatement7707);
                    viewPartition483=viewPartition();
                    _fsp--;

                    stream_viewPartition.add(viewPartition483.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1143:9: ( tablePropertiesPrefixed )?
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==KW_TBLPROPERTIES) ) {
                alt143=1;
            }
            switch (alt143) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1143:9: tablePropertiesPrefixed
                    {
                    pushFollow(FOLLOW_tablePropertiesPrefixed_in_createViewStatement7718);
                    tablePropertiesPrefixed484=tablePropertiesPrefixed();
                    _fsp--;

                    stream_tablePropertiesPrefixed.add(tablePropertiesPrefixed484.getTree());

                    }
                    break;

            }

            KW_AS485=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_createViewStatement7729); 
            stream_KW_AS.add(KW_AS485);

            pushFollow(FOLLOW_selectStatement_in_createViewStatement7739);
            selectStatement486=selectStatement();
            _fsp--;

            stream_selectStatement.add(selectStatement486.getTree());

            // AST REWRITE
            // elements: orReplace, viewPartition, tableComment, name, selectStatement, ifNotExists, tablePropertiesPrefixed, columnNameCommentList
            // token labels: 
            // rule labels: retval, name
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_name=new RewriteRuleSubtreeStream(adaptor,"token name",name!=null?name.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1146:5: -> ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1146:8: ^( TOK_CREATEVIEW $name ( orReplace )? ( ifNotExists )? ( columnNameCommentList )? ( tableComment )? ( viewPartition )? ( tablePropertiesPrefixed )? selectStatement )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CREATEVIEW, "TOK_CREATEVIEW"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1146:31: ( orReplace )?
                if ( stream_orReplace.hasNext() ) {
                    adaptor.addChild(root_1, stream_orReplace.next());

                }
                stream_orReplace.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1147:10: ( ifNotExists )?
                if ( stream_ifNotExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifNotExists.next());

                }
                stream_ifNotExists.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1148:10: ( columnNameCommentList )?
                if ( stream_columnNameCommentList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameCommentList.next());

                }
                stream_columnNameCommentList.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1149:10: ( tableComment )?
                if ( stream_tableComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableComment.next());

                }
                stream_tableComment.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1150:10: ( viewPartition )?
                if ( stream_viewPartition.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewPartition.next());

                }
                stream_viewPartition.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1151:10: ( tablePropertiesPrefixed )?
                if ( stream_tablePropertiesPrefixed.hasNext() ) {
                    adaptor.addChild(root_1, stream_tablePropertiesPrefixed.next());

                }
                stream_tablePropertiesPrefixed.reset();
                adaptor.addChild(root_1, stream_selectStatement.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end createViewStatement

    public static class viewPartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start viewPartition
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1156:1: viewPartition : KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) ;
    public final viewPartition_return viewPartition() throws RecognitionException {
        viewPartition_return retval = new viewPartition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITIONED487=null;
        Token KW_ON488=null;
        Token LPAREN489=null;
        Token RPAREN491=null;
        columnNameList_return columnNameList490 = null;


        CommonTree KW_PARTITIONED487_tree=null;
        CommonTree KW_ON488_tree=null;
        CommonTree LPAREN489_tree=null;
        CommonTree RPAREN491_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
         msgs.push("view partition specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1159:5: ( KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN -> ^( TOK_VIEWPARTCOLS columnNameList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1159:7: KW_PARTITIONED KW_ON LPAREN columnNameList RPAREN
            {
            KW_PARTITIONED487=(Token)input.LT(1);
            match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_viewPartition7862); 
            stream_KW_PARTITIONED.add(KW_PARTITIONED487);

            KW_ON488=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_viewPartition7864); 
            stream_KW_ON.add(KW_ON488);

            LPAREN489=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_viewPartition7866); 
            stream_LPAREN.add(LPAREN489);

            pushFollow(FOLLOW_columnNameList_in_viewPartition7868);
            columnNameList490=columnNameList();
            _fsp--;

            stream_columnNameList.add(columnNameList490.getTree());
            RPAREN491=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_viewPartition7870); 
            stream_RPAREN.add(RPAREN491);


            // AST REWRITE
            // elements: columnNameList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1160:5: -> ^( TOK_VIEWPARTCOLS columnNameList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1160:8: ^( TOK_VIEWPARTCOLS columnNameList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_VIEWPARTCOLS, "TOK_VIEWPARTCOLS"), root_1);

                adaptor.addChild(root_1, stream_columnNameList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end viewPartition

    public static class dropViewStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropViewStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1163:1: dropViewStatement : KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) ;
    public final dropViewStatement_return dropViewStatement() throws RecognitionException {
        dropViewStatement_return retval = new dropViewStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DROP492=null;
        Token KW_VIEW493=null;
        ifExists_return ifExists494 = null;

        viewName_return viewName495 = null;


        CommonTree KW_DROP492_tree=null;
        CommonTree KW_VIEW493_tree=null;
        RewriteRuleTokenStream stream_KW_DROP=new RewriteRuleTokenStream(adaptor,"token KW_DROP");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleSubtreeStream stream_viewName=new RewriteRuleSubtreeStream(adaptor,"rule viewName");
        RewriteRuleSubtreeStream stream_ifExists=new RewriteRuleSubtreeStream(adaptor,"rule ifExists");
         msgs.push("drop view statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1166:5: ( KW_DROP KW_VIEW ( ifExists )? viewName -> ^( TOK_DROPVIEW viewName ( ifExists )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1166:7: KW_DROP KW_VIEW ( ifExists )? viewName
            {
            KW_DROP492=(Token)input.LT(1);
            match(input,KW_DROP,FOLLOW_KW_DROP_in_dropViewStatement7909); 
            stream_KW_DROP.add(KW_DROP492);

            KW_VIEW493=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_dropViewStatement7911); 
            stream_KW_VIEW.add(KW_VIEW493);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1166:23: ( ifExists )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==KW_IF) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1166:23: ifExists
                    {
                    pushFollow(FOLLOW_ifExists_in_dropViewStatement7913);
                    ifExists494=ifExists();
                    _fsp--;

                    stream_ifExists.add(ifExists494.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_viewName_in_dropViewStatement7916);
            viewName495=viewName();
            _fsp--;

            stream_viewName.add(viewName495.getTree());

            // AST REWRITE
            // elements: ifExists, viewName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1166:42: -> ^( TOK_DROPVIEW viewName ( ifExists )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1166:45: ^( TOK_DROPVIEW viewName ( ifExists )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DROPVIEW, "TOK_DROPVIEW"), root_1);

                adaptor.addChild(root_1, stream_viewName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1166:69: ( ifExists )?
                if ( stream_ifExists.hasNext() ) {
                    adaptor.addChild(root_1, stream_ifExists.next());

                }
                stream_ifExists.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropViewStatement

    public static class showStmtIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start showStmtIdentifier
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1169:1: showStmtIdentifier : ( Identifier | StringLiteral );
    public final showStmtIdentifier_return showStmtIdentifier() throws RecognitionException {
        showStmtIdentifier_return retval = new showStmtIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set496=null;

        CommonTree set496_tree=null;

         msgs.push("Identifier for show statement"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1172:5: ( Identifier | StringLiteral )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set496=(Token)input.LT(1);
            if ( input.LA(1)==StringLiteral||input.LA(1)==Identifier ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set496));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_showStmtIdentifier0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end showStmtIdentifier

    public static class tableComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableComment
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1176:1: tableComment : KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) ;
    public final tableComment_return tableComment() throws RecognitionException {
        tableComment_return retval = new tableComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token comment=null;
        Token KW_COMMENT497=null;

        CommonTree comment_tree=null;
        CommonTree KW_COMMENT497_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");

         msgs.push("table's comment"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1179:5: ( KW_COMMENT comment= StringLiteral -> ^( TOK_TABLECOMMENT $comment) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1180:7: KW_COMMENT comment= StringLiteral
            {
            KW_COMMENT497=(Token)input.LT(1);
            match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_tableComment7995); 
            stream_KW_COMMENT.add(KW_COMMENT497);

            comment=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableComment7999); 
            stream_StringLiteral.add(comment);


            // AST REWRITE
            // elements: comment
            // token labels: comment
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1180:41: -> ^( TOK_TABLECOMMENT $comment)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1180:44: ^( TOK_TABLECOMMENT $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLECOMMENT, "TOK_TABLECOMMENT"), root_1);

                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableComment

    public static class tablePartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePartition
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1183:1: tablePartition : KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) ;
    public final tablePartition_return tablePartition() throws RecognitionException {
        tablePartition_return retval = new tablePartition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITIONED498=null;
        Token KW_BY499=null;
        Token LPAREN500=null;
        Token RPAREN502=null;
        columnNameTypeList_return columnNameTypeList501 = null;


        CommonTree KW_PARTITIONED498_tree=null;
        CommonTree KW_BY499_tree=null;
        CommonTree LPAREN500_tree=null;
        CommonTree RPAREN502_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_PARTITIONED=new RewriteRuleTokenStream(adaptor,"token KW_PARTITIONED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
         msgs.push("table partition specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1186:5: ( KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN -> ^( TOK_TABLEPARTCOLS columnNameTypeList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1186:7: KW_PARTITIONED KW_BY LPAREN columnNameTypeList RPAREN
            {
            KW_PARTITIONED498=(Token)input.LT(1);
            match(input,KW_PARTITIONED,FOLLOW_KW_PARTITIONED_in_tablePartition8036); 
            stream_KW_PARTITIONED.add(KW_PARTITIONED498);

            KW_BY499=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tablePartition8038); 
            stream_KW_BY.add(KW_BY499);

            LPAREN500=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tablePartition8040); 
            stream_LPAREN.add(LPAREN500);

            pushFollow(FOLLOW_columnNameTypeList_in_tablePartition8042);
            columnNameTypeList501=columnNameTypeList();
            _fsp--;

            stream_columnNameTypeList.add(columnNameTypeList501.getTree());
            RPAREN502=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tablePartition8044); 
            stream_RPAREN.add(RPAREN502);


            // AST REWRITE
            // elements: columnNameTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1187:5: -> ^( TOK_TABLEPARTCOLS columnNameTypeList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1187:8: ^( TOK_TABLEPARTCOLS columnNameTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPARTCOLS, "TOK_TABLEPARTCOLS"), root_1);

                adaptor.addChild(root_1, stream_columnNameTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePartition

    public static class tableBuckets_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableBuckets
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1190:1: tableBuckets : KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) ;
    public final tableBuckets_return tableBuckets() throws RecognitionException {
        tableBuckets_return retval = new tableBuckets_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token num=null;
        Token KW_CLUSTERED503=null;
        Token KW_BY504=null;
        Token LPAREN505=null;
        Token RPAREN506=null;
        Token KW_SORTED507=null;
        Token KW_BY508=null;
        Token LPAREN509=null;
        Token RPAREN510=null;
        Token KW_INTO511=null;
        Token KW_BUCKETS512=null;
        columnNameList_return bucketCols = null;

        columnNameOrderList_return sortCols = null;


        CommonTree num_tree=null;
        CommonTree KW_CLUSTERED503_tree=null;
        CommonTree KW_BY504_tree=null;
        CommonTree LPAREN505_tree=null;
        CommonTree RPAREN506_tree=null;
        CommonTree KW_SORTED507_tree=null;
        CommonTree KW_BY508_tree=null;
        CommonTree LPAREN509_tree=null;
        CommonTree RPAREN510_tree=null;
        CommonTree KW_INTO511_tree=null;
        CommonTree KW_BUCKETS512_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_BUCKETS=new RewriteRuleTokenStream(adaptor,"token KW_BUCKETS");
        RewriteRuleTokenStream stream_KW_CLUSTERED=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTERED");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_SORTED=new RewriteRuleTokenStream(adaptor,"token KW_SORTED");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_columnNameOrderList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrderList");
         msgs.push("table buckets specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1193:5: ( KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1194:7: KW_CLUSTERED KW_BY LPAREN bucketCols= columnNameList RPAREN ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )? KW_INTO num= Number KW_BUCKETS
            {
            KW_CLUSTERED503=(Token)input.LT(1);
            match(input,KW_CLUSTERED,FOLLOW_KW_CLUSTERED_in_tableBuckets8089); 
            stream_KW_CLUSTERED.add(KW_CLUSTERED503);

            KW_BY504=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets8091); 
            stream_KW_BY.add(KW_BY504);

            LPAREN505=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets8093); 
            stream_LPAREN.add(LPAREN505);

            pushFollow(FOLLOW_columnNameList_in_tableBuckets8097);
            bucketCols=columnNameList();
            _fsp--;

            stream_columnNameList.add(bucketCols.getTree());
            RPAREN506=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets8099); 
            stream_RPAREN.add(RPAREN506);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1194:66: ( KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==KW_SORTED) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1194:67: KW_SORTED KW_BY LPAREN sortCols= columnNameOrderList RPAREN
                    {
                    KW_SORTED507=(Token)input.LT(1);
                    match(input,KW_SORTED,FOLLOW_KW_SORTED_in_tableBuckets8102); 
                    stream_KW_SORTED.add(KW_SORTED507);

                    KW_BY508=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableBuckets8104); 
                    stream_KW_BY.add(KW_BY508);

                    LPAREN509=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_tableBuckets8106); 
                    stream_LPAREN.add(LPAREN509);

                    pushFollow(FOLLOW_columnNameOrderList_in_tableBuckets8110);
                    sortCols=columnNameOrderList();
                    _fsp--;

                    stream_columnNameOrderList.add(sortCols.getTree());
                    RPAREN510=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_tableBuckets8112); 
                    stream_RPAREN.add(RPAREN510);


                    }
                    break;

            }

            KW_INTO511=(Token)input.LT(1);
            match(input,KW_INTO,FOLLOW_KW_INTO_in_tableBuckets8116); 
            stream_KW_INTO.add(KW_INTO511);

            num=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableBuckets8120); 
            stream_Number.add(num);

            KW_BUCKETS512=(Token)input.LT(1);
            match(input,KW_BUCKETS,FOLLOW_KW_BUCKETS_in_tableBuckets8122); 
            stream_KW_BUCKETS.add(KW_BUCKETS512);


            // AST REWRITE
            // elements: sortCols, bucketCols, num
            // token labels: num
            // rule labels: sortCols, retval, bucketCols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_sortCols=new RewriteRuleSubtreeStream(adaptor,"token sortCols",sortCols!=null?sortCols.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_bucketCols=new RewriteRuleSubtreeStream(adaptor,"token bucketCols",bucketCols!=null?bucketCols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1195:5: -> ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1195:8: ^( TOK_TABLEBUCKETS $bucketCols ( $sortCols)? $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEBUCKETS, "TOK_TABLEBUCKETS"), root_1);

                adaptor.addChild(root_1, stream_bucketCols.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1195:39: ( $sortCols)?
                if ( stream_sortCols.hasNext() ) {
                    adaptor.addChild(root_1, stream_sortCols.next());

                }
                stream_sortCols.reset();
                adaptor.addChild(root_1, stream_num.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableBuckets

    public static class tableSkewed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableSkewed
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1198:1: tableSkewed : KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) ;
    public final tableSkewed_return tableSkewed() throws RecognitionException {
        tableSkewed_return retval = new tableSkewed_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SKEWED513=null;
        Token KW_BY514=null;
        Token LPAREN515=null;
        Token RPAREN516=null;
        Token KW_ON517=null;
        Token LPAREN518=null;
        Token RPAREN519=null;
        columnNameList_return skewedCols = null;

        skewedValueElement_return skewedValues = null;

        storedAsDirs_return storedAsDirs520 = null;


        CommonTree KW_SKEWED513_tree=null;
        CommonTree KW_BY514_tree=null;
        CommonTree LPAREN515_tree=null;
        CommonTree RPAREN516_tree=null;
        CommonTree KW_ON517_tree=null;
        CommonTree LPAREN518_tree=null;
        CommonTree RPAREN519_tree=null;
        RewriteRuleTokenStream stream_KW_SKEWED=new RewriteRuleTokenStream(adaptor,"token KW_SKEWED");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnNameList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameList");
        RewriteRuleSubtreeStream stream_storedAsDirs=new RewriteRuleSubtreeStream(adaptor,"rule storedAsDirs");
        RewriteRuleSubtreeStream stream_skewedValueElement=new RewriteRuleSubtreeStream(adaptor,"rule skewedValueElement");
         msgs.push("table skewed specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1201:5: ( KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )? -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1202:6: KW_SKEWED KW_BY LPAREN skewedCols= columnNameList RPAREN KW_ON LPAREN (skewedValues= skewedValueElement ) RPAREN ( storedAsDirs )?
            {
            KW_SKEWED513=(Token)input.LT(1);
            match(input,KW_SKEWED,FOLLOW_KW_SKEWED_in_tableSkewed8174); 
            stream_KW_SKEWED.add(KW_SKEWED513);

            KW_BY514=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableSkewed8176); 
            stream_KW_BY.add(KW_BY514);

            LPAREN515=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed8178); 
            stream_LPAREN.add(LPAREN515);

            pushFollow(FOLLOW_columnNameList_in_tableSkewed8182);
            skewedCols=columnNameList();
            _fsp--;

            stream_columnNameList.add(skewedCols.getTree());
            RPAREN516=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed8184); 
            stream_RPAREN.add(RPAREN516);

            KW_ON517=(Token)input.LT(1);
            match(input,KW_ON,FOLLOW_KW_ON_in_tableSkewed8186); 
            stream_KW_ON.add(KW_ON517);

            LPAREN518=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableSkewed8188); 
            stream_LPAREN.add(LPAREN518);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1202:75: (skewedValues= skewedValueElement )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1202:76: skewedValues= skewedValueElement
            {
            pushFollow(FOLLOW_skewedValueElement_in_tableSkewed8193);
            skewedValues=skewedValueElement();
            _fsp--;

            stream_skewedValueElement.add(skewedValues.getTree());

            }

            RPAREN519=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableSkewed8196); 
            stream_RPAREN.add(RPAREN519);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1202:116: ( storedAsDirs )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==KW_STORED) ) {
                int LA146_1 = input.LA(2);

                if ( (LA146_1==KW_AS) ) {
                    int LA146_7 = input.LA(3);

                    if ( (LA146_7==KW_DIRECTORIES) ) {
                        alt146=1;
                    }
                }
            }
            switch (alt146) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1202:117: storedAsDirs
                    {
                    pushFollow(FOLLOW_storedAsDirs_in_tableSkewed8199);
                    storedAsDirs520=storedAsDirs();
                    _fsp--;

                    stream_storedAsDirs.add(storedAsDirs520.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: skewedCols, storedAsDirs, skewedValues
            // token labels: 
            // rule labels: retval, skewedValues, skewedCols
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_skewedValues=new RewriteRuleSubtreeStream(adaptor,"token skewedValues",skewedValues!=null?skewedValues.tree:null);
            RewriteRuleSubtreeStream stream_skewedCols=new RewriteRuleSubtreeStream(adaptor,"token skewedCols",skewedCols!=null?skewedCols.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1203:5: -> ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1203:8: ^( TOK_TABLESKEWED $skewedCols $skewedValues ( storedAsDirs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESKEWED, "TOK_TABLESKEWED"), root_1);

                adaptor.addChild(root_1, stream_skewedCols.next());
                adaptor.addChild(root_1, stream_skewedValues.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1203:52: ( storedAsDirs )?
                if ( stream_storedAsDirs.hasNext() ) {
                    adaptor.addChild(root_1, stream_storedAsDirs.next());

                }
                stream_storedAsDirs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableSkewed

    public static class rowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormat
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1206:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );
    public final rowFormat_return rowFormat() throws RecognitionException {
        rowFormat_return retval = new rowFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        rowFormatSerde_return rowFormatSerde521 = null;

        rowFormatDelimited_return rowFormatDelimited522 = null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("serde specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1209:5: ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) )
            int alt147=3;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==KW_ROW) ) {
                int LA147_1 = input.LA(2);

                if ( (LA147_1==KW_FORMAT) ) {
                    int LA147_21 = input.LA(3);

                    if ( (LA147_21==KW_SERDE) ) {
                        alt147=1;
                    }
                    else if ( (LA147_21==KW_DELIMITED) ) {
                        alt147=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1206:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 147, 21, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1206:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 147, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA147_0==EOF||LA147_0==KW_FROM||LA147_0==RPAREN||LA147_0==KW_SELECT||LA147_0==KW_GROUP||(LA147_0>=KW_RECORDREADER && LA147_0<=KW_RECORDWRITER)||LA147_0==KW_MAP||(LA147_0>=KW_UNION && LA147_0<=KW_INSERT)||LA147_0==KW_LIMIT||LA147_0==KW_USING||LA147_0==KW_REDUCE||LA147_0==KW_WHERE||(LA147_0>=KW_HAVING && LA147_0<=KW_SORT)) ) {
                alt147=3;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1206:1: rowFormat : ( rowFormatSerde -> ^( TOK_SERDE rowFormatSerde ) | rowFormatDelimited -> ^( TOK_SERDE rowFormatDelimited ) | -> ^( TOK_SERDE ) );", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1209:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_rowFormat8247);
                    rowFormatSerde521=rowFormatSerde();
                    _fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde521.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1209:22: -> ^( TOK_SERDE rowFormatSerde )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1209:25: ^( TOK_SERDE rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1210:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_rowFormat8263);
                    rowFormatDelimited522=rowFormatDelimited();
                    _fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited522.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1210:26: -> ^( TOK_SERDE rowFormatDelimited )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1210:29: ^( TOK_SERDE rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1211:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1211:9: -> ^( TOK_SERDE )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1211:12: ^( TOK_SERDE )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDE, "TOK_SERDE"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormat

    public static class recordReader_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start recordReader
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1214:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );
    public final recordReader_return recordReader() throws RecognitionException {
        recordReader_return retval = new recordReader_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RECORDREADER523=null;
        Token StringLiteral524=null;

        CommonTree KW_RECORDREADER523_tree=null;
        CommonTree StringLiteral524_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDREADER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDREADER");

         msgs.push("record reader specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1217:5: ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) )
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==KW_RECORDREADER) ) {
                alt148=1;
            }
            else if ( (LA148_0==EOF||LA148_0==KW_FROM||LA148_0==RPAREN||LA148_0==KW_SELECT||LA148_0==KW_GROUP||LA148_0==KW_MAP||(LA148_0>=KW_UNION && LA148_0<=KW_INSERT)||LA148_0==KW_LIMIT||LA148_0==KW_REDUCE||LA148_0==KW_WHERE||(LA148_0>=KW_HAVING && LA148_0<=KW_SORT)) ) {
                alt148=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1214:1: recordReader : ( KW_RECORDREADER StringLiteral -> ^( TOK_RECORDREADER StringLiteral ) | -> ^( TOK_RECORDREADER ) );", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1217:7: KW_RECORDREADER StringLiteral
                    {
                    KW_RECORDREADER523=(Token)input.LT(1);
                    match(input,KW_RECORDREADER,FOLLOW_KW_RECORDREADER_in_recordReader8312); 
                    stream_KW_RECORDREADER.add(KW_RECORDREADER523);

                    StringLiteral524=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_recordReader8314); 
                    stream_StringLiteral.add(StringLiteral524);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1217:37: -> ^( TOK_RECORDREADER StringLiteral )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1217:40: ^( TOK_RECORDREADER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1218:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1218:9: -> ^( TOK_RECORDREADER )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1218:12: ^( TOK_RECORDREADER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDREADER, "TOK_RECORDREADER"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end recordReader

    public static class recordWriter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start recordWriter
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1221:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );
    public final recordWriter_return recordWriter() throws RecognitionException {
        recordWriter_return retval = new recordWriter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_RECORDWRITER525=null;
        Token StringLiteral526=null;

        CommonTree KW_RECORDWRITER525_tree=null;
        CommonTree StringLiteral526_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_RECORDWRITER=new RewriteRuleTokenStream(adaptor,"token KW_RECORDWRITER");

         msgs.push("record writer specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1224:5: ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==KW_RECORDWRITER) ) {
                alt149=1;
            }
            else if ( (LA149_0==KW_USING) ) {
                alt149=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1221:1: recordWriter : ( KW_RECORDWRITER StringLiteral -> ^( TOK_RECORDWRITER StringLiteral ) | -> ^( TOK_RECORDWRITER ) );", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1224:7: KW_RECORDWRITER StringLiteral
                    {
                    KW_RECORDWRITER525=(Token)input.LT(1);
                    match(input,KW_RECORDWRITER,FOLLOW_KW_RECORDWRITER_in_recordWriter8363); 
                    stream_KW_RECORDWRITER.add(KW_RECORDWRITER525);

                    StringLiteral526=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_recordWriter8365); 
                    stream_StringLiteral.add(StringLiteral526);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1224:37: -> ^( TOK_RECORDWRITER StringLiteral )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1224:40: ^( TOK_RECORDWRITER StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1225:9: 
                    {

                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1225:9: -> ^( TOK_RECORDWRITER )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1225:12: ^( TOK_RECORDWRITER )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_RECORDWRITER, "TOK_RECORDWRITER"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end recordWriter

    public static class rowFormatSerde_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormatSerde
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1228:1: rowFormatSerde : KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) ;
    public final rowFormatSerde_return rowFormatSerde() throws RecognitionException {
        rowFormatSerde_return retval = new rowFormatSerde_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token KW_ROW527=null;
        Token KW_FORMAT528=null;
        Token KW_SERDE529=null;
        Token KW_WITH530=null;
        Token KW_SERDEPROPERTIES531=null;
        tableProperties_return serdeprops = null;


        CommonTree name_tree=null;
        CommonTree KW_ROW527_tree=null;
        CommonTree KW_FORMAT528_tree=null;
        CommonTree KW_SERDE529_tree=null;
        CommonTree KW_WITH530_tree=null;
        CommonTree KW_SERDEPROPERTIES531_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_SERDE=new RewriteRuleTokenStream(adaptor,"token KW_SERDE");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("serde format specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1231:5: ( KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_SERDENAME $name ( $serdeprops)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1231:7: KW_ROW KW_FORMAT KW_SERDE name= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            {
            KW_ROW527=(Token)input.LT(1);
            match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatSerde8414); 
            stream_KW_ROW.add(KW_ROW527);

            KW_FORMAT528=(Token)input.LT(1);
            match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatSerde8416); 
            stream_KW_FORMAT.add(KW_FORMAT528);

            KW_SERDE529=(Token)input.LT(1);
            match(input,KW_SERDE,FOLLOW_KW_SERDE_in_rowFormatSerde8418); 
            stream_KW_SERDE.add(KW_SERDE529);

            name=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_rowFormatSerde8422); 
            stream_StringLiteral.add(name);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1231:52: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==KW_WITH) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1231:53: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                    {
                    KW_WITH530=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_rowFormatSerde8425); 
                    stream_KW_WITH.add(KW_WITH530);

                    KW_SERDEPROPERTIES531=(Token)input.LT(1);
                    match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde8427); 
                    stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES531);

                    pushFollow(FOLLOW_tableProperties_in_rowFormatSerde8431);
                    serdeprops=tableProperties();
                    _fsp--;

                    stream_tableProperties.add(serdeprops.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: serdeprops, name
            // token labels: name
            // rule labels: serdeprops, retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"token serdeprops",serdeprops!=null?serdeprops.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1232:5: -> ^( TOK_SERDENAME $name ( $serdeprops)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1232:8: ^( TOK_SERDENAME $name ( $serdeprops)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDENAME, "TOK_SERDENAME"), root_1);

                adaptor.addChild(root_1, stream_name.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1232:30: ( $serdeprops)?
                if ( stream_serdeprops.hasNext() ) {
                    adaptor.addChild(root_1, stream_serdeprops.next());

                }
                stream_serdeprops.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormatSerde

    public static class rowFormatDelimited_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start rowFormatDelimited
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1235:1: rowFormatDelimited : KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) ;
    public final rowFormatDelimited_return rowFormatDelimited() throws RecognitionException {
        rowFormatDelimited_return retval = new rowFormatDelimited_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ROW532=null;
        Token KW_FORMAT533=null;
        Token KW_DELIMITED534=null;
        tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier535 = null;

        tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier536 = null;

        tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier537 = null;

        tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier538 = null;


        CommonTree KW_ROW532_tree=null;
        CommonTree KW_FORMAT533_tree=null;
        CommonTree KW_DELIMITED534_tree=null;
        RewriteRuleTokenStream stream_KW_DELIMITED=new RewriteRuleTokenStream(adaptor,"token KW_DELIMITED");
        RewriteRuleTokenStream stream_KW_ROW=new RewriteRuleTokenStream(adaptor,"token KW_ROW");
        RewriteRuleTokenStream stream_KW_FORMAT=new RewriteRuleTokenStream(adaptor,"token KW_FORMAT");
        RewriteRuleSubtreeStream stream_tableRowFormatMapKeysIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatMapKeysIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatFieldIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatFieldIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatCollItemsIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatCollItemsIdentifier");
        RewriteRuleSubtreeStream stream_tableRowFormatLinesIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule tableRowFormatLinesIdentifier");
         msgs.push("serde properties specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1238:5: ( KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:7: KW_ROW KW_FORMAT KW_DELIMITED ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )?
            {
            KW_ROW532=(Token)input.LT(1);
            match(input,KW_ROW,FOLLOW_KW_ROW_in_rowFormatDelimited8483); 
            stream_KW_ROW.add(KW_ROW532);

            KW_FORMAT533=(Token)input.LT(1);
            match(input,KW_FORMAT,FOLLOW_KW_FORMAT_in_rowFormatDelimited8485); 
            stream_KW_FORMAT.add(KW_FORMAT533);

            KW_DELIMITED534=(Token)input.LT(1);
            match(input,KW_DELIMITED,FOLLOW_KW_DELIMITED_in_rowFormatDelimited8487); 
            stream_KW_DELIMITED.add(KW_DELIMITED534);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:37: ( tableRowFormatFieldIdentifier )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==KW_FIELDS) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:37: tableRowFormatFieldIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited8489);
                    tableRowFormatFieldIdentifier535=tableRowFormatFieldIdentifier();
                    _fsp--;

                    stream_tableRowFormatFieldIdentifier.add(tableRowFormatFieldIdentifier535.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:68: ( tableRowFormatCollItemsIdentifier )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==KW_COLLECTION) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:68: tableRowFormatCollItemsIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited8492);
                    tableRowFormatCollItemsIdentifier536=tableRowFormatCollItemsIdentifier();
                    _fsp--;

                    stream_tableRowFormatCollItemsIdentifier.add(tableRowFormatCollItemsIdentifier536.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:103: ( tableRowFormatMapKeysIdentifier )?
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==KW_MAP) ) {
                int LA153_1 = input.LA(2);

                if ( (LA153_1==KW_KEYS) ) {
                    alt153=1;
                }
            }
            switch (alt153) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:103: tableRowFormatMapKeysIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited8495);
                    tableRowFormatMapKeysIdentifier537=tableRowFormatMapKeysIdentifier();
                    _fsp--;

                    stream_tableRowFormatMapKeysIdentifier.add(tableRowFormatMapKeysIdentifier537.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:136: ( tableRowFormatLinesIdentifier )?
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==KW_LINES) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1239:136: tableRowFormatLinesIdentifier
                    {
                    pushFollow(FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited8498);
                    tableRowFormatLinesIdentifier538=tableRowFormatLinesIdentifier();
                    _fsp--;

                    stream_tableRowFormatLinesIdentifier.add(tableRowFormatLinesIdentifier538.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableRowFormatMapKeysIdentifier, tableRowFormatCollItemsIdentifier, tableRowFormatFieldIdentifier, tableRowFormatLinesIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1240:5: -> ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1240:8: ^( TOK_SERDEPROPS ( tableRowFormatFieldIdentifier )? ( tableRowFormatCollItemsIdentifier )? ( tableRowFormatMapKeysIdentifier )? ( tableRowFormatLinesIdentifier )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SERDEPROPS, "TOK_SERDEPROPS"), root_1);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1240:25: ( tableRowFormatFieldIdentifier )?
                if ( stream_tableRowFormatFieldIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatFieldIdentifier.next());

                }
                stream_tableRowFormatFieldIdentifier.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1240:56: ( tableRowFormatCollItemsIdentifier )?
                if ( stream_tableRowFormatCollItemsIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatCollItemsIdentifier.next());

                }
                stream_tableRowFormatCollItemsIdentifier.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1240:91: ( tableRowFormatMapKeysIdentifier )?
                if ( stream_tableRowFormatMapKeysIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatMapKeysIdentifier.next());

                }
                stream_tableRowFormatMapKeysIdentifier.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1240:124: ( tableRowFormatLinesIdentifier )?
                if ( stream_tableRowFormatLinesIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_tableRowFormatLinesIdentifier.next());

                }
                stream_tableRowFormatLinesIdentifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end rowFormatDelimited

    public static class tableRowFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormat
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1243:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );
    public final tableRowFormat_return tableRowFormat() throws RecognitionException {
        tableRowFormat_return retval = new tableRowFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        rowFormatDelimited_return rowFormatDelimited539 = null;

        rowFormatSerde_return rowFormatSerde540 = null;


        RewriteRuleSubtreeStream stream_rowFormatSerde=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatSerde");
        RewriteRuleSubtreeStream stream_rowFormatDelimited=new RewriteRuleSubtreeStream(adaptor,"rule rowFormatDelimited");
         msgs.push("table row format specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1246:5: ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) )
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==KW_ROW) ) {
                int LA155_1 = input.LA(2);

                if ( (LA155_1==KW_FORMAT) ) {
                    int LA155_2 = input.LA(3);

                    if ( (LA155_2==KW_SERDE) ) {
                        alt155=2;
                    }
                    else if ( (LA155_2==KW_DELIMITED) ) {
                        alt155=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1243:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 155, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1243:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 155, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1243:1: tableRowFormat : ( rowFormatDelimited -> ^( TOK_TABLEROWFORMAT rowFormatDelimited ) | rowFormatSerde -> ^( TOK_TABLESERIALIZER rowFormatSerde ) );", 155, 0, input);

                throw nvae;
            }
            switch (alt155) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1247:7: rowFormatDelimited
                    {
                    pushFollow(FOLLOW_rowFormatDelimited_in_tableRowFormat8554);
                    rowFormatDelimited539=rowFormatDelimited();
                    _fsp--;

                    stream_rowFormatDelimited.add(rowFormatDelimited539.getTree());

                    // AST REWRITE
                    // elements: rowFormatDelimited
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1248:5: -> ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1248:8: ^( TOK_TABLEROWFORMAT rowFormatDelimited )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMAT, "TOK_TABLEROWFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatDelimited.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1249:7: rowFormatSerde
                    {
                    pushFollow(FOLLOW_rowFormatSerde_in_tableRowFormat8574);
                    rowFormatSerde540=rowFormatSerde();
                    _fsp--;

                    stream_rowFormatSerde.add(rowFormatSerde540.getTree());

                    // AST REWRITE
                    // elements: rowFormatSerde
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1250:5: -> ^( TOK_TABLESERIALIZER rowFormatSerde )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1250:8: ^( TOK_TABLESERIALIZER rowFormatSerde )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESERIALIZER, "TOK_TABLESERIALIZER"), root_1);

                        adaptor.addChild(root_1, stream_rowFormatSerde.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormat

    public static class tablePropertiesPrefixed_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePropertiesPrefixed
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1253:1: tablePropertiesPrefixed : KW_TBLPROPERTIES tableProperties ;
    public final tablePropertiesPrefixed_return tablePropertiesPrefixed() throws RecognitionException {
        tablePropertiesPrefixed_return retval = new tablePropertiesPrefixed_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TBLPROPERTIES541=null;
        tableProperties_return tableProperties542 = null;


        CommonTree KW_TBLPROPERTIES541_tree=null;

         msgs.push("table properties with prefix"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1256:5: ( KW_TBLPROPERTIES tableProperties )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1257:9: KW_TBLPROPERTIES tableProperties
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_TBLPROPERTIES541=(Token)input.LT(1);
            match(input,KW_TBLPROPERTIES,FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed8621); 
            pushFollow(FOLLOW_tableProperties_in_tablePropertiesPrefixed8624);
            tableProperties542=tableProperties();
            _fsp--;

            adaptor.addChild(root_0, tableProperties542.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePropertiesPrefixed

    public static class tableProperties_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableProperties
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1260:1: tableProperties : LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) ;
    public final tableProperties_return tableProperties() throws RecognitionException {
        tableProperties_return retval = new tableProperties_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN543=null;
        Token RPAREN545=null;
        tablePropertiesList_return tablePropertiesList544 = null;


        CommonTree LPAREN543_tree=null;
        CommonTree RPAREN545_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_tablePropertiesList=new RewriteRuleSubtreeStream(adaptor,"rule tablePropertiesList");
         msgs.push("table properties"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1263:5: ( LPAREN tablePropertiesList RPAREN -> ^( TOK_TABLEPROPERTIES tablePropertiesList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1264:7: LPAREN tablePropertiesList RPAREN
            {
            LPAREN543=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableProperties8657); 
            stream_LPAREN.add(LPAREN543);

            pushFollow(FOLLOW_tablePropertiesList_in_tableProperties8659);
            tablePropertiesList544=tablePropertiesList();
            _fsp--;

            stream_tablePropertiesList.add(tablePropertiesList544.getTree());
            RPAREN545=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableProperties8661); 
            stream_RPAREN.add(RPAREN545);


            // AST REWRITE
            // elements: tablePropertiesList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1264:41: -> ^( TOK_TABLEPROPERTIES tablePropertiesList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1264:44: ^( TOK_TABLEPROPERTIES tablePropertiesList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPERTIES, "TOK_TABLEPROPERTIES"), root_1);

                adaptor.addChild(root_1, stream_tablePropertiesList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableProperties

    public static class tablePropertiesList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tablePropertiesList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1267:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );
    public final tablePropertiesList_return tablePropertiesList() throws RecognitionException {
        tablePropertiesList_return retval = new tablePropertiesList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA547=null;
        Token COMMA550=null;
        keyValueProperty_return keyValueProperty546 = null;

        keyValueProperty_return keyValueProperty548 = null;

        keyProperty_return keyProperty549 = null;

        keyProperty_return keyProperty551 = null;


        CommonTree COMMA547_tree=null;
        CommonTree COMMA550_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_keyValueProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyValueProperty");
        RewriteRuleSubtreeStream stream_keyProperty=new RewriteRuleSubtreeStream(adaptor,"rule keyProperty");
         msgs.push("table properties list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1270:5: ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) )
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==StringLiteral) ) {
                int LA158_1 = input.LA(2);

                if ( (LA158_1==EQUAL) ) {
                    alt158=1;
                }
                else if ( ((LA158_1>=RPAREN && LA158_1<=COMMA)) ) {
                    alt158=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1267:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );", 158, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1267:1: tablePropertiesList : ( keyValueProperty ( COMMA keyValueProperty )* -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ ) | keyProperty ( COMMA keyProperty )* -> ^( TOK_TABLEPROPLIST ( keyProperty )+ ) );", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1271:7: keyValueProperty ( COMMA keyValueProperty )*
                    {
                    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList8702);
                    keyValueProperty546=keyValueProperty();
                    _fsp--;

                    stream_keyValueProperty.add(keyValueProperty546.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1271:24: ( COMMA keyValueProperty )*
                    loop156:
                    do {
                        int alt156=2;
                        int LA156_0 = input.LA(1);

                        if ( (LA156_0==COMMA) ) {
                            alt156=1;
                        }


                        switch (alt156) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1271:25: COMMA keyValueProperty
                    	    {
                    	    COMMA547=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList8705); 
                    	    stream_COMMA.add(COMMA547);

                    	    pushFollow(FOLLOW_keyValueProperty_in_tablePropertiesList8707);
                    	    keyValueProperty548=keyValueProperty();
                    	    _fsp--;

                    	    stream_keyValueProperty.add(keyValueProperty548.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop156;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyValueProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1271:50: -> ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1271:53: ^( TOK_TABLEPROPLIST ( keyValueProperty )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);

                        if ( !(stream_keyValueProperty.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyValueProperty.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyValueProperty.next());

                        }
                        stream_keyValueProperty.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1273:7: keyProperty ( COMMA keyProperty )*
                    {
                    pushFollow(FOLLOW_keyProperty_in_tablePropertiesList8732);
                    keyProperty549=keyProperty();
                    _fsp--;

                    stream_keyProperty.add(keyProperty549.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1273:19: ( COMMA keyProperty )*
                    loop157:
                    do {
                        int alt157=2;
                        int LA157_0 = input.LA(1);

                        if ( (LA157_0==COMMA) ) {
                            alt157=1;
                        }


                        switch (alt157) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1273:20: COMMA keyProperty
                    	    {
                    	    COMMA550=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_tablePropertiesList8735); 
                    	    stream_COMMA.add(COMMA550);

                    	    pushFollow(FOLLOW_keyProperty_in_tablePropertiesList8737);
                    	    keyProperty551=keyProperty();
                    	    _fsp--;

                    	    stream_keyProperty.add(keyProperty551.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop157;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: keyProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1273:40: -> ^( TOK_TABLEPROPLIST ( keyProperty )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1273:43: ^( TOK_TABLEPROPLIST ( keyProperty )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPLIST, "TOK_TABLEPROPLIST"), root_1);

                        if ( !(stream_keyProperty.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_keyProperty.hasNext() ) {
                            adaptor.addChild(root_1, stream_keyProperty.next());

                        }
                        stream_keyProperty.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tablePropertiesList

    public static class keyValueProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start keyValueProperty
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1276:1: keyValueProperty : key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) ;
    public final keyValueProperty_return keyValueProperty() throws RecognitionException {
        keyValueProperty_return retval = new keyValueProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token key=null;
        Token value=null;
        Token EQUAL552=null;

        CommonTree key_tree=null;
        CommonTree value_tree=null;
        CommonTree EQUAL552_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");

         msgs.push("specifying key/value property"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1279:5: (key= StringLiteral EQUAL value= StringLiteral -> ^( TOK_TABLEPROPERTY $key $value) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1280:7: key= StringLiteral EQUAL value= StringLiteral
            {
            key=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty8783); 
            stream_StringLiteral.add(key);

            EQUAL552=(Token)input.LT(1);
            match(input,EQUAL,FOLLOW_EQUAL_in_keyValueProperty8785); 
            stream_EQUAL.add(EQUAL552);

            value=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_keyValueProperty8789); 
            stream_StringLiteral.add(value);


            // AST REWRITE
            // elements: key, value
            // token labels: value, key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_value=new RewriteRuleTokenStream(adaptor,"token value",value);
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1280:51: -> ^( TOK_TABLEPROPERTY $key $value)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1280:54: ^( TOK_TABLEPROPERTY $key $value)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);

                adaptor.addChild(root_1, stream_key.next());
                adaptor.addChild(root_1, stream_value.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyValueProperty

    public static class keyProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start keyProperty
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1283:1: keyProperty : key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) ;
    public final keyProperty_return keyProperty() throws RecognitionException {
        keyProperty_return retval = new keyProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token key=null;

        CommonTree key_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

         msgs.push("specifying key property"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1286:5: (key= StringLiteral -> ^( TOK_TABLEPROPERTY $key TOK_NULL ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1287:7: key= StringLiteral
            {
            key=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_keyProperty8836); 
            stream_StringLiteral.add(key);


            // AST REWRITE
            // elements: key
            // token labels: key
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_key=new RewriteRuleTokenStream(adaptor,"token key",key);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1287:25: -> ^( TOK_TABLEPROPERTY $key TOK_NULL )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1287:28: ^( TOK_TABLEPROPERTY $key TOK_NULL )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEPROPERTY, "TOK_TABLEPROPERTY"), root_1);

                adaptor.addChild(root_1, stream_key.next());
                adaptor.addChild(root_1, adaptor.create(TOK_NULL, "TOK_NULL"));

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end keyProperty

    public static class tableRowFormatFieldIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatFieldIdentifier
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1290:1: tableRowFormatFieldIdentifier : KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) ;
    public final tableRowFormatFieldIdentifier_return tableRowFormatFieldIdentifier() throws RecognitionException {
        tableRowFormatFieldIdentifier_return retval = new tableRowFormatFieldIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token fldIdnt=null;
        Token fldEscape=null;
        Token KW_FIELDS553=null;
        Token KW_TERMINATED554=null;
        Token KW_BY555=null;
        Token KW_ESCAPED556=null;
        Token KW_BY557=null;

        CommonTree fldIdnt_tree=null;
        CommonTree fldEscape_tree=null;
        CommonTree KW_FIELDS553_tree=null;
        CommonTree KW_TERMINATED554_tree=null;
        CommonTree KW_BY555_tree=null;
        CommonTree KW_ESCAPED556_tree=null;
        CommonTree KW_BY557_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ESCAPED=new RewriteRuleTokenStream(adaptor,"token KW_ESCAPED");
        RewriteRuleTokenStream stream_KW_FIELDS=new RewriteRuleTokenStream(adaptor,"token KW_FIELDS");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's field separator"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1293:5: ( KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )? -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1294:7: KW_FIELDS KW_TERMINATED KW_BY fldIdnt= StringLiteral ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            {
            KW_FIELDS553=(Token)input.LT(1);
            match(input,KW_FIELDS,FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier8880); 
            stream_KW_FIELDS.add(KW_FIELDS553);

            KW_TERMINATED554=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier8882); 
            stream_KW_TERMINATED.add(KW_TERMINATED554);

            KW_BY555=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8884); 
            stream_KW_BY.add(KW_BY555);

            fldIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8888); 
            stream_StringLiteral.add(fldIdnt);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1294:59: ( KW_ESCAPED KW_BY fldEscape= StringLiteral )?
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==KW_ESCAPED) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1294:60: KW_ESCAPED KW_BY fldEscape= StringLiteral
                    {
                    KW_ESCAPED556=(Token)input.LT(1);
                    match(input,KW_ESCAPED,FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier8891); 
                    stream_KW_ESCAPED.add(KW_ESCAPED556);

                    KW_BY557=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8893); 
                    stream_KW_BY.add(KW_BY557);

                    fldEscape=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8897); 
                    stream_StringLiteral.add(fldEscape);


                    }
                    break;

            }


            // AST REWRITE
            // elements: fldEscape, fldIdnt
            // token labels: fldEscape, fldIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_fldEscape=new RewriteRuleTokenStream(adaptor,"token fldEscape",fldEscape);
            RewriteRuleTokenStream stream_fldIdnt=new RewriteRuleTokenStream(adaptor,"token fldIdnt",fldIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1295:5: -> ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1295:8: ^( TOK_TABLEROWFORMATFIELD $fldIdnt ( $fldEscape)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATFIELD, "TOK_TABLEROWFORMATFIELD"), root_1);

                adaptor.addChild(root_1, stream_fldIdnt.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1295:43: ( $fldEscape)?
                if ( stream_fldEscape.hasNext() ) {
                    adaptor.addChild(root_1, stream_fldEscape.next());

                }
                stream_fldEscape.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatFieldIdentifier

    public static class tableRowFormatCollItemsIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatCollItemsIdentifier
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1298:1: tableRowFormatCollItemsIdentifier : KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) ;
    public final tableRowFormatCollItemsIdentifier_return tableRowFormatCollItemsIdentifier() throws RecognitionException {
        tableRowFormatCollItemsIdentifier_return retval = new tableRowFormatCollItemsIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token collIdnt=null;
        Token KW_COLLECTION558=null;
        Token KW_ITEMS559=null;
        Token KW_TERMINATED560=null;
        Token KW_BY561=null;

        CommonTree collIdnt_tree=null;
        CommonTree KW_COLLECTION558_tree=null;
        CommonTree KW_ITEMS559_tree=null;
        CommonTree KW_TERMINATED560_tree=null;
        CommonTree KW_BY561_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_ITEMS=new RewriteRuleTokenStream(adaptor,"token KW_ITEMS");
        RewriteRuleTokenStream stream_KW_COLLECTION=new RewriteRuleTokenStream(adaptor,"token KW_COLLECTION");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's column separator"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1301:5: ( KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1302:7: KW_COLLECTION KW_ITEMS KW_TERMINATED KW_BY collIdnt= StringLiteral
            {
            KW_COLLECTION558=(Token)input.LT(1);
            match(input,KW_COLLECTION,FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier8949); 
            stream_KW_COLLECTION.add(KW_COLLECTION558);

            KW_ITEMS559=(Token)input.LT(1);
            match(input,KW_ITEMS,FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier8951); 
            stream_KW_ITEMS.add(KW_ITEMS559);

            KW_TERMINATED560=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier8953); 
            stream_KW_TERMINATED.add(KW_TERMINATED560);

            KW_BY561=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier8955); 
            stream_KW_BY.add(KW_BY561);

            collIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier8959); 
            stream_StringLiteral.add(collIdnt);


            // AST REWRITE
            // elements: collIdnt
            // token labels: collIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_collIdnt=new RewriteRuleTokenStream(adaptor,"token collIdnt",collIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1303:5: -> ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1303:8: ^( TOK_TABLEROWFORMATCOLLITEMS $collIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATCOLLITEMS, "TOK_TABLEROWFORMATCOLLITEMS"), root_1);

                adaptor.addChild(root_1, stream_collIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatCollItemsIdentifier

    public static class tableRowFormatMapKeysIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatMapKeysIdentifier
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1306:1: tableRowFormatMapKeysIdentifier : KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) ;
    public final tableRowFormatMapKeysIdentifier_return tableRowFormatMapKeysIdentifier() throws RecognitionException {
        tableRowFormatMapKeysIdentifier_return retval = new tableRowFormatMapKeysIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token mapKeysIdnt=null;
        Token KW_MAP562=null;
        Token KW_KEYS563=null;
        Token KW_TERMINATED564=null;
        Token KW_BY565=null;

        CommonTree mapKeysIdnt_tree=null;
        CommonTree KW_MAP562_tree=null;
        CommonTree KW_KEYS563_tree=null;
        CommonTree KW_TERMINATED564_tree=null;
        CommonTree KW_BY565_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_KEYS=new RewriteRuleTokenStream(adaptor,"token KW_KEYS");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's map key separator"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1309:5: ( KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1310:7: KW_MAP KW_KEYS KW_TERMINATED KW_BY mapKeysIdnt= StringLiteral
            {
            KW_MAP562=(Token)input.LT(1);
            match(input,KW_MAP,FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier9005); 
            stream_KW_MAP.add(KW_MAP562);

            KW_KEYS563=(Token)input.LT(1);
            match(input,KW_KEYS,FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier9007); 
            stream_KW_KEYS.add(KW_KEYS563);

            KW_TERMINATED564=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier9009); 
            stream_KW_TERMINATED.add(KW_TERMINATED564);

            KW_BY565=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier9011); 
            stream_KW_BY.add(KW_BY565);

            mapKeysIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier9015); 
            stream_StringLiteral.add(mapKeysIdnt);


            // AST REWRITE
            // elements: mapKeysIdnt
            // token labels: mapKeysIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_mapKeysIdnt=new RewriteRuleTokenStream(adaptor,"token mapKeysIdnt",mapKeysIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1311:5: -> ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1311:8: ^( TOK_TABLEROWFORMATMAPKEYS $mapKeysIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATMAPKEYS, "TOK_TABLEROWFORMATMAPKEYS"), root_1);

                adaptor.addChild(root_1, stream_mapKeysIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatMapKeysIdentifier

    public static class tableRowFormatLinesIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableRowFormatLinesIdentifier
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1314:1: tableRowFormatLinesIdentifier : KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) ;
    public final tableRowFormatLinesIdentifier_return tableRowFormatLinesIdentifier() throws RecognitionException {
        tableRowFormatLinesIdentifier_return retval = new tableRowFormatLinesIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token linesIdnt=null;
        Token KW_LINES566=null;
        Token KW_TERMINATED567=null;
        Token KW_BY568=null;

        CommonTree linesIdnt_tree=null;
        CommonTree KW_LINES566_tree=null;
        CommonTree KW_TERMINATED567_tree=null;
        CommonTree KW_BY568_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LINES=new RewriteRuleTokenStream(adaptor,"token KW_LINES");
        RewriteRuleTokenStream stream_KW_TERMINATED=new RewriteRuleTokenStream(adaptor,"token KW_TERMINATED");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");

         msgs.push("table row format's line separator"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1317:5: ( KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral -> ^( TOK_TABLEROWFORMATLINES $linesIdnt) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1318:7: KW_LINES KW_TERMINATED KW_BY linesIdnt= StringLiteral
            {
            KW_LINES566=(Token)input.LT(1);
            match(input,KW_LINES,FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier9061); 
            stream_KW_LINES.add(KW_LINES566);

            KW_TERMINATED567=(Token)input.LT(1);
            match(input,KW_TERMINATED,FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier9063); 
            stream_KW_TERMINATED.add(KW_TERMINATED567);

            KW_BY568=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier9065); 
            stream_KW_BY.add(KW_BY568);

            linesIdnt=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier9069); 
            stream_StringLiteral.add(linesIdnt);


            // AST REWRITE
            // elements: linesIdnt
            // token labels: linesIdnt
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_linesIdnt=new RewriteRuleTokenStream(adaptor,"token linesIdnt",linesIdnt);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1319:5: -> ^( TOK_TABLEROWFORMATLINES $linesIdnt)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1319:8: ^( TOK_TABLEROWFORMATLINES $linesIdnt)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEROWFORMATLINES, "TOK_TABLEROWFORMATLINES"), root_1);

                adaptor.addChild(root_1, stream_linesIdnt.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableRowFormatLinesIdentifier

    public static class tableFileFormat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableFileFormat
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1322:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );
    public final tableFileFormat_return tableFileFormat() throws RecognitionException {
        tableFileFormat_return retval = new tableFileFormat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token inFmt=null;
        Token outFmt=null;
        Token inDriver=null;
        Token outDriver=null;
        Token storageHandler=null;
        Token genericSpec=null;
        Token KW_STORED569=null;
        Token KW_AS570=null;
        Token KW_SEQUENCEFILE571=null;
        Token KW_STORED572=null;
        Token KW_AS573=null;
        Token KW_TEXTFILE574=null;
        Token KW_STORED575=null;
        Token KW_AS576=null;
        Token KW_RCFILE577=null;
        Token KW_STORED578=null;
        Token KW_AS579=null;
        Token KW_INPUTFORMAT580=null;
        Token KW_OUTPUTFORMAT581=null;
        Token KW_INPUTDRIVER582=null;
        Token KW_OUTPUTDRIVER583=null;
        Token KW_STORED584=null;
        Token KW_BY585=null;
        Token KW_WITH586=null;
        Token KW_SERDEPROPERTIES587=null;
        Token KW_STORED588=null;
        Token KW_AS589=null;
        tableProperties_return serdeprops = null;


        CommonTree inFmt_tree=null;
        CommonTree outFmt_tree=null;
        CommonTree inDriver_tree=null;
        CommonTree outDriver_tree=null;
        CommonTree storageHandler_tree=null;
        CommonTree genericSpec_tree=null;
        CommonTree KW_STORED569_tree=null;
        CommonTree KW_AS570_tree=null;
        CommonTree KW_SEQUENCEFILE571_tree=null;
        CommonTree KW_STORED572_tree=null;
        CommonTree KW_AS573_tree=null;
        CommonTree KW_TEXTFILE574_tree=null;
        CommonTree KW_STORED575_tree=null;
        CommonTree KW_AS576_tree=null;
        CommonTree KW_RCFILE577_tree=null;
        CommonTree KW_STORED578_tree=null;
        CommonTree KW_AS579_tree=null;
        CommonTree KW_INPUTFORMAT580_tree=null;
        CommonTree KW_OUTPUTFORMAT581_tree=null;
        CommonTree KW_INPUTDRIVER582_tree=null;
        CommonTree KW_OUTPUTDRIVER583_tree=null;
        CommonTree KW_STORED584_tree=null;
        CommonTree KW_BY585_tree=null;
        CommonTree KW_WITH586_tree=null;
        CommonTree KW_SERDEPROPERTIES587_tree=null;
        CommonTree KW_STORED588_tree=null;
        CommonTree KW_AS589_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_INPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_INPUTDRIVER");
        RewriteRuleTokenStream stream_KW_OUTPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTFORMAT");
        RewriteRuleTokenStream stream_KW_TEXTFILE=new RewriteRuleTokenStream(adaptor,"token KW_TEXTFILE");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_RCFILE=new RewriteRuleTokenStream(adaptor,"token KW_RCFILE");
        RewriteRuleTokenStream stream_KW_INPUTFORMAT=new RewriteRuleTokenStream(adaptor,"token KW_INPUTFORMAT");
        RewriteRuleTokenStream stream_KW_STORED=new RewriteRuleTokenStream(adaptor,"token KW_STORED");
        RewriteRuleTokenStream stream_KW_OUTPUTDRIVER=new RewriteRuleTokenStream(adaptor,"token KW_OUTPUTDRIVER");
        RewriteRuleTokenStream stream_KW_SEQUENCEFILE=new RewriteRuleTokenStream(adaptor,"token KW_SEQUENCEFILE");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_SERDEPROPERTIES=new RewriteRuleTokenStream(adaptor,"token KW_SERDEPROPERTIES");
        RewriteRuleSubtreeStream stream_tableProperties=new RewriteRuleSubtreeStream(adaptor,"rule tableProperties");
         msgs.push("table file format specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1325:5: ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) )
            int alt162=6;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==KW_STORED) ) {
                int LA162_1 = input.LA(2);

                if ( (LA162_1==KW_AS) ) {
                    switch ( input.LA(3) ) {
                    case KW_INPUTFORMAT:
                        {
                        alt162=4;
                        }
                        break;
                    case KW_TEXTFILE:
                        {
                        alt162=2;
                        }
                        break;
                    case Identifier:
                        {
                        alt162=6;
                        }
                        break;
                    case KW_RCFILE:
                        {
                        alt162=3;
                        }
                        break;
                    case KW_SEQUENCEFILE:
                        {
                        alt162=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1322:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 162, 2, input);

                        throw nvae;
                    }

                }
                else if ( (LA162_1==KW_BY) ) {
                    alt162=5;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1322:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 162, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1322:1: tableFileFormat : ( KW_STORED KW_AS KW_SEQUENCEFILE -> TOK_TBLSEQUENCEFILE | KW_STORED KW_AS KW_TEXTFILE -> TOK_TBLTEXTFILE | KW_STORED KW_AS KW_RCFILE -> TOK_TBLRCFILE | KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )? -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? ) | KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )? -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? ) | KW_STORED KW_AS genericSpec= Identifier -> ^( TOK_FILEFORMAT_GENERIC $genericSpec) );", 162, 0, input);

                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1326:7: KW_STORED KW_AS KW_SEQUENCEFILE
                    {
                    KW_STORED569=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat9115); 
                    stream_KW_STORED.add(KW_STORED569);

                    KW_AS570=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat9117); 
                    stream_KW_AS.add(KW_AS570);

                    KW_SEQUENCEFILE571=(Token)input.LT(1);
                    match(input,KW_SEQUENCEFILE,FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat9119); 
                    stream_KW_SEQUENCEFILE.add(KW_SEQUENCEFILE571);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1326:40: -> TOK_TBLSEQUENCEFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLSEQUENCEFILE, "TOK_TBLSEQUENCEFILE"));

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1327:9: KW_STORED KW_AS KW_TEXTFILE
                    {
                    KW_STORED572=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat9134); 
                    stream_KW_STORED.add(KW_STORED572);

                    KW_AS573=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat9136); 
                    stream_KW_AS.add(KW_AS573);

                    KW_TEXTFILE574=(Token)input.LT(1);
                    match(input,KW_TEXTFILE,FOLLOW_KW_TEXTFILE_in_tableFileFormat9138); 
                    stream_KW_TEXTFILE.add(KW_TEXTFILE574);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1327:38: -> TOK_TBLTEXTFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLTEXTFILE, "TOK_TBLTEXTFILE"));

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1328:9: KW_STORED KW_AS KW_RCFILE
                    {
                    KW_STORED575=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat9153); 
                    stream_KW_STORED.add(KW_STORED575);

                    KW_AS576=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat9155); 
                    stream_KW_AS.add(KW_AS576);

                    KW_RCFILE577=(Token)input.LT(1);
                    match(input,KW_RCFILE,FOLLOW_KW_RCFILE_in_tableFileFormat9157); 
                    stream_KW_RCFILE.add(KW_RCFILE577);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1328:36: -> TOK_TBLRCFILE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TBLRCFILE, "TOK_TBLRCFILE"));

                    }



                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1329:9: KW_STORED KW_AS KW_INPUTFORMAT inFmt= StringLiteral KW_OUTPUTFORMAT outFmt= StringLiteral ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    {
                    KW_STORED578=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat9172); 
                    stream_KW_STORED.add(KW_STORED578);

                    KW_AS579=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat9174); 
                    stream_KW_AS.add(KW_AS579);

                    KW_INPUTFORMAT580=(Token)input.LT(1);
                    match(input,KW_INPUTFORMAT,FOLLOW_KW_INPUTFORMAT_in_tableFileFormat9176); 
                    stream_KW_INPUTFORMAT.add(KW_INPUTFORMAT580);

                    inFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat9180); 
                    stream_StringLiteral.add(inFmt);

                    KW_OUTPUTFORMAT581=(Token)input.LT(1);
                    match(input,KW_OUTPUTFORMAT,FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat9182); 
                    stream_KW_OUTPUTFORMAT.add(KW_OUTPUTFORMAT581);

                    outFmt=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat9186); 
                    stream_StringLiteral.add(outFmt);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1329:97: ( KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==KW_INPUTDRIVER) ) {
                        alt160=1;
                    }
                    switch (alt160) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1329:98: KW_INPUTDRIVER inDriver= StringLiteral KW_OUTPUTDRIVER outDriver= StringLiteral
                            {
                            KW_INPUTDRIVER582=(Token)input.LT(1);
                            match(input,KW_INPUTDRIVER,FOLLOW_KW_INPUTDRIVER_in_tableFileFormat9189); 
                            stream_KW_INPUTDRIVER.add(KW_INPUTDRIVER582);

                            inDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat9193); 
                            stream_StringLiteral.add(inDriver);

                            KW_OUTPUTDRIVER583=(Token)input.LT(1);
                            match(input,KW_OUTPUTDRIVER,FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat9195); 
                            stream_KW_OUTPUTDRIVER.add(KW_OUTPUTDRIVER583);

                            outDriver=(Token)input.LT(1);
                            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat9199); 
                            stream_StringLiteral.add(outDriver);


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: outDriver, inDriver, outFmt, inFmt
                    // token labels: outDriver, outFmt, inDriver, inFmt
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_outDriver=new RewriteRuleTokenStream(adaptor,"token outDriver",outDriver);
                    RewriteRuleTokenStream stream_outFmt=new RewriteRuleTokenStream(adaptor,"token outFmt",outFmt);
                    RewriteRuleTokenStream stream_inDriver=new RewriteRuleTokenStream(adaptor,"token inDriver",inDriver);
                    RewriteRuleTokenStream stream_inFmt=new RewriteRuleTokenStream(adaptor,"token inFmt",inFmt);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1330:7: -> ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1330:10: ^( TOK_TABLEFILEFORMAT $inFmt $outFmt ( $inDriver)? ( $outDriver)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEFILEFORMAT, "TOK_TABLEFILEFORMAT"), root_1);

                        adaptor.addChild(root_1, stream_inFmt.next());
                        adaptor.addChild(root_1, stream_outFmt.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1330:47: ( $inDriver)?
                        if ( stream_inDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_inDriver.next());

                        }
                        stream_inDriver.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1330:58: ( $outDriver)?
                        if ( stream_outDriver.hasNext() ) {
                            adaptor.addChild(root_1, stream_outDriver.next());

                        }
                        stream_outDriver.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1331:9: KW_STORED KW_BY storageHandler= StringLiteral ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    {
                    KW_STORED584=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat9237); 
                    stream_KW_STORED.add(KW_STORED584);

                    KW_BY585=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_tableFileFormat9239); 
                    stream_KW_BY.add(KW_BY585);

                    storageHandler=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_tableFileFormat9243); 
                    stream_StringLiteral.add(storageHandler);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1332:10: ( KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==KW_WITH) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1332:11: KW_WITH KW_SERDEPROPERTIES serdeprops= tableProperties
                            {
                            KW_WITH586=(Token)input.LT(1);
                            match(input,KW_WITH,FOLLOW_KW_WITH_in_tableFileFormat9255); 
                            stream_KW_WITH.add(KW_WITH586);

                            KW_SERDEPROPERTIES587=(Token)input.LT(1);
                            match(input,KW_SERDEPROPERTIES,FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat9257); 
                            stream_KW_SERDEPROPERTIES.add(KW_SERDEPROPERTIES587);

                            pushFollow(FOLLOW_tableProperties_in_tableFileFormat9261);
                            serdeprops=tableProperties();
                            _fsp--;

                            stream_tableProperties.add(serdeprops.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: serdeprops, storageHandler
                    // token labels: storageHandler
                    // rule labels: serdeprops, retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_storageHandler=new RewriteRuleTokenStream(adaptor,"token storageHandler",storageHandler);
                    RewriteRuleSubtreeStream stream_serdeprops=new RewriteRuleSubtreeStream(adaptor,"token serdeprops",serdeprops!=null?serdeprops.tree:null);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1333:7: -> ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1333:10: ^( TOK_STORAGEHANDLER $storageHandler ( $serdeprops)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STORAGEHANDLER, "TOK_STORAGEHANDLER"), root_1);

                        adaptor.addChild(root_1, stream_storageHandler.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1333:47: ( $serdeprops)?
                        if ( stream_serdeprops.hasNext() ) {
                            adaptor.addChild(root_1, stream_serdeprops.next());

                        }
                        stream_serdeprops.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1334:9: KW_STORED KW_AS genericSpec= Identifier
                    {
                    KW_STORED588=(Token)input.LT(1);
                    match(input,KW_STORED,FOLLOW_KW_STORED_in_tableFileFormat9292); 
                    stream_KW_STORED.add(KW_STORED588);

                    KW_AS589=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_tableFileFormat9294); 
                    stream_KW_AS.add(KW_AS589);

                    genericSpec=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableFileFormat9298); 
                    stream_Identifier.add(genericSpec);


                    // AST REWRITE
                    // elements: genericSpec
                    // token labels: genericSpec
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_genericSpec=new RewriteRuleTokenStream(adaptor,"token genericSpec",genericSpec);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1335:7: -> ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1335:10: ^( TOK_FILEFORMAT_GENERIC $genericSpec)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FILEFORMAT_GENERIC, "TOK_FILEFORMAT_GENERIC"), root_1);

                        adaptor.addChild(root_1, stream_genericSpec.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableFileFormat

    public static class tableLocation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableLocation
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1338:1: tableLocation : KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) ;
    public final tableLocation_return tableLocation() throws RecognitionException {
        tableLocation_return retval = new tableLocation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token locn=null;
        Token KW_LOCATION590=null;

        CommonTree locn_tree=null;
        CommonTree KW_LOCATION590_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_LOCATION=new RewriteRuleTokenStream(adaptor,"token KW_LOCATION");

         msgs.push("table location specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1341:5: ( KW_LOCATION locn= StringLiteral -> ^( TOK_TABLELOCATION $locn) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1342:7: KW_LOCATION locn= StringLiteral
            {
            KW_LOCATION590=(Token)input.LT(1);
            match(input,KW_LOCATION,FOLLOW_KW_LOCATION_in_tableLocation9346); 
            stream_KW_LOCATION.add(KW_LOCATION590);

            locn=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_tableLocation9350); 
            stream_StringLiteral.add(locn);


            // AST REWRITE
            // elements: locn
            // token labels: locn
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_locn=new RewriteRuleTokenStream(adaptor,"token locn",locn);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1342:38: -> ^( TOK_TABLELOCATION $locn)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1342:41: ^( TOK_TABLELOCATION $locn)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLELOCATION, "TOK_TABLELOCATION"), root_1);

                adaptor.addChild(root_1, stream_locn.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableLocation

    public static class columnNameTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameTypeList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1345:1: columnNameTypeList : columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) ;
    public final columnNameTypeList_return columnNameTypeList() throws RecognitionException {
        columnNameTypeList_return retval = new columnNameTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA592=null;
        columnNameType_return columnNameType591 = null;

        columnNameType_return columnNameType593 = null;


        CommonTree COMMA592_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameType");
         msgs.push("column name type list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1348:5: ( columnNameType ( COMMA columnNameType )* -> ^( TOK_TABCOLLIST ( columnNameType )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1348:7: columnNameType ( COMMA columnNameType )*
            {
            pushFollow(FOLLOW_columnNameType_in_columnNameTypeList9386);
            columnNameType591=columnNameType();
            _fsp--;

            stream_columnNameType.add(columnNameType591.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1348:22: ( COMMA columnNameType )*
            loop163:
            do {
                int alt163=2;
                int LA163_0 = input.LA(1);

                if ( (LA163_0==COMMA) ) {
                    alt163=1;
                }


                switch (alt163) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1348:23: COMMA columnNameType
            	    {
            	    COMMA592=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameTypeList9389); 
            	    stream_COMMA.add(COMMA592);

            	    pushFollow(FOLLOW_columnNameType_in_columnNameTypeList9391);
            	    columnNameType593=columnNameType();
            	    _fsp--;

            	    stream_columnNameType.add(columnNameType593.getTree());

            	    }
            	    break;

            	default :
            	    break loop163;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1348:46: -> ^( TOK_TABCOLLIST ( columnNameType )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1348:49: ^( TOK_TABCOLLIST ( columnNameType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);

                if ( !(stream_columnNameType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameType.next());

                }
                stream_columnNameType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameTypeList

    public static class columnNameColonTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameColonTypeList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1351:1: columnNameColonTypeList : columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) ;
    public final columnNameColonTypeList_return columnNameColonTypeList() throws RecognitionException {
        columnNameColonTypeList_return retval = new columnNameColonTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA595=null;
        columnNameColonType_return columnNameColonType594 = null;

        columnNameColonType_return columnNameColonType596 = null;


        CommonTree COMMA595_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameColonType=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonType");
         msgs.push("column name type list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1354:5: ( columnNameColonType ( COMMA columnNameColonType )* -> ^( TOK_TABCOLLIST ( columnNameColonType )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1354:7: columnNameColonType ( COMMA columnNameColonType )*
            {
            pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList9429);
            columnNameColonType594=columnNameColonType();
            _fsp--;

            stream_columnNameColonType.add(columnNameColonType594.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1354:27: ( COMMA columnNameColonType )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==COMMA) ) {
                    alt164=1;
                }


                switch (alt164) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1354:28: COMMA columnNameColonType
            	    {
            	    COMMA595=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameColonTypeList9432); 
            	    stream_COMMA.add(COMMA595);

            	    pushFollow(FOLLOW_columnNameColonType_in_columnNameColonTypeList9434);
            	    columnNameColonType596=columnNameColonType();
            	    _fsp--;

            	    stream_columnNameColonType.add(columnNameColonType596.getTree());

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameColonType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1354:56: -> ^( TOK_TABCOLLIST ( columnNameColonType )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1354:59: ^( TOK_TABCOLLIST ( columnNameColonType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLLIST, "TOK_TABCOLLIST"), root_1);

                if ( !(stream_columnNameColonType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameColonType.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameColonType.next());

                }
                stream_columnNameColonType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameColonTypeList

    public static class columnNameList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1357:1: columnNameList : columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) ;
    public final columnNameList_return columnNameList() throws RecognitionException {
        columnNameList_return retval = new columnNameList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA598=null;
        columnName_return columnName597 = null;

        columnName_return columnName599 = null;


        CommonTree COMMA598_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnName=new RewriteRuleSubtreeStream(adaptor,"rule columnName");
         msgs.push("column name list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:5: ( columnName ( COMMA columnName )* -> ^( TOK_TABCOLNAME ( columnName )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:7: columnName ( COMMA columnName )*
            {
            pushFollow(FOLLOW_columnName_in_columnNameList9472);
            columnName597=columnName();
            _fsp--;

            stream_columnName.add(columnName597.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:18: ( COMMA columnName )*
            loop165:
            do {
                int alt165=2;
                int LA165_0 = input.LA(1);

                if ( (LA165_0==COMMA) ) {
                    alt165=1;
                }


                switch (alt165) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:19: COMMA columnName
            	    {
            	    COMMA598=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameList9475); 
            	    stream_COMMA.add(COMMA598);

            	    pushFollow(FOLLOW_columnName_in_columnNameList9477);
            	    columnName599=columnName();
            	    _fsp--;

            	    stream_columnName.add(columnName599.getTree());

            	    }
            	    break;

            	default :
            	    break loop165;
                }
            } while (true);


            // AST REWRITE
            // elements: columnName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1360:38: -> ^( TOK_TABCOLNAME ( columnName )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1360:41: ^( TOK_TABCOLNAME ( columnName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnName.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnName.next());

                }
                stream_columnName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameList

    public static class columnName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1363:1: columnName : Identifier ;
    public final columnName_return columnName() throws RecognitionException {
        columnName_return retval = new columnName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier600=null;

        CommonTree Identifier600_tree=null;

         msgs.push("column name"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1366:5: ( Identifier )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1367:7: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier600=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnName9521); 
            Identifier600_tree = (CommonTree)adaptor.create(Identifier600);
            adaptor.addChild(root_0, Identifier600_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnName

    public static class columnNameOrderList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameOrderList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1370:1: columnNameOrderList : columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) ;
    public final columnNameOrderList_return columnNameOrderList() throws RecognitionException {
        columnNameOrderList_return retval = new columnNameOrderList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA602=null;
        columnNameOrder_return columnNameOrder601 = null;

        columnNameOrder_return columnNameOrder603 = null;


        CommonTree COMMA602_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnNameOrder");
         msgs.push("column name order list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1373:5: ( columnNameOrder ( COMMA columnNameOrder )* -> ^( TOK_TABCOLNAME ( columnNameOrder )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1373:7: columnNameOrder ( COMMA columnNameOrder )*
            {
            pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList9548);
            columnNameOrder601=columnNameOrder();
            _fsp--;

            stream_columnNameOrder.add(columnNameOrder601.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1373:23: ( COMMA columnNameOrder )*
            loop166:
            do {
                int alt166=2;
                int LA166_0 = input.LA(1);

                if ( (LA166_0==COMMA) ) {
                    alt166=1;
                }


                switch (alt166) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1373:24: COMMA columnNameOrder
            	    {
            	    COMMA602=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameOrderList9551); 
            	    stream_COMMA.add(COMMA602);

            	    pushFollow(FOLLOW_columnNameOrder_in_columnNameOrderList9553);
            	    columnNameOrder603=columnNameOrder();
            	    _fsp--;

            	    stream_columnNameOrder.add(columnNameOrder603.getTree());

            	    }
            	    break;

            	default :
            	    break loop166;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameOrder
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1373:48: -> ^( TOK_TABCOLNAME ( columnNameOrder )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1373:51: ^( TOK_TABCOLNAME ( columnNameOrder )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnNameOrder.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameOrder.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameOrder.next());

                }
                stream_columnNameOrder.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameOrderList

    public static class skewedValueElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedValueElement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1376:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );
    public final skewedValueElement_return skewedValueElement() throws RecognitionException {
        skewedValueElement_return retval = new skewedValueElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        skewedColumnValues_return skewedColumnValues604 = null;

        skewedColumnValuePairList_return skewedColumnValuePairList605 = null;



         msgs.push("skewed value element"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1379:5: ( skewedColumnValues | skewedColumnValuePairList )
            int alt167=2;
            int LA167_0 = input.LA(1);

            if ( (LA167_0==StringLiteral||LA167_0==Number||(LA167_0>=BigintLiteral && LA167_0<=CharSetName)||(LA167_0>=KW_TRUE && LA167_0<=KW_FALSE)) ) {
                alt167=1;
            }
            else if ( (LA167_0==LPAREN) ) {
                alt167=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1376:1: skewedValueElement : ( skewedColumnValues | skewedColumnValuePairList );", 167, 0, input);

                throw nvae;
            }
            switch (alt167) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1380:7: skewedColumnValues
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_skewedColumnValues_in_skewedValueElement9598);
                    skewedColumnValues604=skewedColumnValues();
                    _fsp--;

                    adaptor.addChild(root_0, skewedColumnValues604.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1381:8: skewedColumnValuePairList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_skewedColumnValuePairList_in_skewedValueElement9607);
                    skewedColumnValuePairList605=skewedColumnValuePairList();
                    _fsp--;

                    adaptor.addChild(root_0, skewedColumnValuePairList605.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedValueElement

    public static class skewedColumnValuePairList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedColumnValuePairList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1384:1: skewedColumnValuePairList : skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) ;
    public final skewedColumnValuePairList_return skewedColumnValuePairList() throws RecognitionException {
        skewedColumnValuePairList_return retval = new skewedColumnValuePairList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA607=null;
        skewedColumnValuePair_return skewedColumnValuePair606 = null;

        skewedColumnValuePair_return skewedColumnValuePair608 = null;


        CommonTree COMMA607_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValuePair=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValuePair");
         msgs.push("column value pair list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1387:5: ( skewedColumnValuePair ( COMMA skewedColumnValuePair )* -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1387:7: skewedColumnValuePair ( COMMA skewedColumnValuePair )*
            {
            pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9634);
            skewedColumnValuePair606=skewedColumnValuePair();
            _fsp--;

            stream_skewedColumnValuePair.add(skewedColumnValuePair606.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1387:29: ( COMMA skewedColumnValuePair )*
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==COMMA) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1387:30: COMMA skewedColumnValuePair
            	    {
            	    COMMA607=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValuePairList9637); 
            	    stream_COMMA.add(COMMA607);

            	    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9639);
            	    skewedColumnValuePair608=skewedColumnValuePair();
            	    _fsp--;

            	    stream_skewedColumnValuePair.add(skewedColumnValuePair608.getTree());

            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValuePair
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1387:60: -> ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1387:63: ^( TOK_TABCOLVALUE_PAIR ( skewedColumnValuePair )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLVALUE_PAIR, "TOK_TABCOLVALUE_PAIR"), root_1);

                if ( !(stream_skewedColumnValuePair.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValuePair.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValuePair.next());

                }
                stream_skewedColumnValuePair.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedColumnValuePairList

    public static class skewedColumnValuePair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedColumnValuePair
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1390:1: skewedColumnValuePair : LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) ;
    public final skewedColumnValuePair_return skewedColumnValuePair() throws RecognitionException {
        skewedColumnValuePair_return retval = new skewedColumnValuePair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN609=null;
        Token RPAREN610=null;
        skewedColumnValues_return colValues = null;


        CommonTree LPAREN609_tree=null;
        CommonTree RPAREN610_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_skewedColumnValues=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValues");
         msgs.push("column value pair"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1393:5: ( LPAREN colValues= skewedColumnValues RPAREN -> ^( TOK_TABCOLVALUES $colValues) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1394:7: LPAREN colValues= skewedColumnValues RPAREN
            {
            LPAREN609=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_skewedColumnValuePair9684); 
            stream_LPAREN.add(LPAREN609);

            pushFollow(FOLLOW_skewedColumnValues_in_skewedColumnValuePair9688);
            colValues=skewedColumnValues();
            _fsp--;

            stream_skewedColumnValues.add(colValues.getTree());
            RPAREN610=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_skewedColumnValuePair9690); 
            stream_RPAREN.add(RPAREN610);


            // AST REWRITE
            // elements: colValues
            // token labels: 
            // rule labels: retval, colValues
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_colValues=new RewriteRuleSubtreeStream(adaptor,"token colValues",colValues!=null?colValues.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1395:7: -> ^( TOK_TABCOLVALUES $colValues)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1395:10: ^( TOK_TABCOLVALUES $colValues)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLVALUES, "TOK_TABCOLVALUES"), root_1);

                adaptor.addChild(root_1, stream_colValues.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedColumnValuePair

    public static class skewedColumnValues_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedColumnValues
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1398:1: skewedColumnValues : skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) ;
    public final skewedColumnValues_return skewedColumnValues() throws RecognitionException {
        skewedColumnValues_return retval = new skewedColumnValues_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA612=null;
        skewedColumnValue_return skewedColumnValue611 = null;

        skewedColumnValue_return skewedColumnValue613 = null;


        CommonTree COMMA612_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_skewedColumnValue=new RewriteRuleSubtreeStream(adaptor,"rule skewedColumnValue");
         msgs.push("column values"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1401:5: ( skewedColumnValue ( COMMA skewedColumnValue )* -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1401:7: skewedColumnValue ( COMMA skewedColumnValue )*
            {
            pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues9733);
            skewedColumnValue611=skewedColumnValue();
            _fsp--;

            stream_skewedColumnValue.add(skewedColumnValue611.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1401:25: ( COMMA skewedColumnValue )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==COMMA) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1401:26: COMMA skewedColumnValue
            	    {
            	    COMMA612=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_skewedColumnValues9736); 
            	    stream_COMMA.add(COMMA612);

            	    pushFollow(FOLLOW_skewedColumnValue_in_skewedColumnValues9738);
            	    skewedColumnValue613=skewedColumnValue();
            	    _fsp--;

            	    stream_skewedColumnValue.add(skewedColumnValue613.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            // AST REWRITE
            // elements: skewedColumnValue
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1401:52: -> ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1401:55: ^( TOK_TABCOLVALUE ( skewedColumnValue )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLVALUE, "TOK_TABCOLVALUE"), root_1);

                if ( !(stream_skewedColumnValue.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_skewedColumnValue.hasNext() ) {
                    adaptor.addChild(root_1, stream_skewedColumnValue.next());

                }
                stream_skewedColumnValue.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedColumnValues

    public static class skewedColumnValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedColumnValue
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1404:1: skewedColumnValue : constant ;
    public final skewedColumnValue_return skewedColumnValue() throws RecognitionException {
        skewedColumnValue_return retval = new skewedColumnValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        constant_return constant614 = null;



         msgs.push("column value"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1407:5: ( constant )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1408:7: constant
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_constant_in_skewedColumnValue9782);
            constant614=constant();
            _fsp--;

            adaptor.addChild(root_0, constant614.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedColumnValue

    public static class skewedValueLocationElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start skewedValueLocationElement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1411:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );
    public final skewedValueLocationElement_return skewedValueLocationElement() throws RecognitionException {
        skewedValueLocationElement_return retval = new skewedValueLocationElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        skewedColumnValue_return skewedColumnValue615 = null;

        skewedColumnValuePair_return skewedColumnValuePair616 = null;



         msgs.push("skewed value location element"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1414:5: ( skewedColumnValue | skewedColumnValuePair )
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==StringLiteral||LA170_0==Number||(LA170_0>=BigintLiteral && LA170_0<=CharSetName)||(LA170_0>=KW_TRUE && LA170_0<=KW_FALSE)) ) {
                alt170=1;
            }
            else if ( (LA170_0==LPAREN) ) {
                alt170=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1411:1: skewedValueLocationElement : ( skewedColumnValue | skewedColumnValuePair );", 170, 0, input);

                throw nvae;
            }
            switch (alt170) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1415:7: skewedColumnValue
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_skewedColumnValue_in_skewedValueLocationElement9816);
                    skewedColumnValue615=skewedColumnValue();
                    _fsp--;

                    adaptor.addChild(root_0, skewedColumnValue615.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1416:8: skewedColumnValuePair
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement9825);
                    skewedColumnValuePair616=skewedColumnValuePair();
                    _fsp--;

                    adaptor.addChild(root_0, skewedColumnValuePair616.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end skewedValueLocationElement

    public static class columnNameOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameOrder
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1419:1: columnNameOrder : Identifier (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) ;
    public final columnNameOrder_return columnNameOrder() throws RecognitionException {
        columnNameOrder_return retval = new columnNameOrder_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        Token Identifier617=null;

        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        CommonTree Identifier617_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");

         msgs.push("column name order"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1422:5: ( Identifier (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier ) -> ^( TOK_TABSORTCOLNAMEDESC Identifier ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1422:7: Identifier (asc= KW_ASC | desc= KW_DESC )?
            {
            Identifier617=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameOrder9856); 
            stream_Identifier.add(Identifier617);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1422:18: (asc= KW_ASC | desc= KW_DESC )?
            int alt171=3;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==KW_ASC) ) {
                alt171=1;
            }
            else if ( (LA171_0==KW_DESC) ) {
                alt171=2;
            }
            switch (alt171) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1422:19: asc= KW_ASC
                    {
                    asc=(Token)input.LT(1);
                    match(input,KW_ASC,FOLLOW_KW_ASC_in_columnNameOrder9861); 
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1422:32: desc= KW_DESC
                    {
                    desc=(Token)input.LT(1);
                    match(input,KW_DESC,FOLLOW_KW_DESC_in_columnNameOrder9867); 
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1423:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC Identifier )
            if (desc == null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1423:25: ^( TOK_TABSORTCOLNAMEASC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1424:5: -> ^( TOK_TABSORTCOLNAMEDESC Identifier )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1424:25: ^( TOK_TABSORTCOLNAMEDESC Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameOrder

    public static class columnNameCommentList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameCommentList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1427:1: columnNameCommentList : columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) ;
    public final columnNameCommentList_return columnNameCommentList() throws RecognitionException {
        columnNameCommentList_return retval = new columnNameCommentList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA619=null;
        columnNameComment_return columnNameComment618 = null;

        columnNameComment_return columnNameComment620 = null;


        CommonTree COMMA619_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_columnNameComment=new RewriteRuleSubtreeStream(adaptor,"rule columnNameComment");
         msgs.push("column name comment list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1430:5: ( columnNameComment ( COMMA columnNameComment )* -> ^( TOK_TABCOLNAME ( columnNameComment )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1430:7: columnNameComment ( COMMA columnNameComment )*
            {
            pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList9939);
            columnNameComment618=columnNameComment();
            _fsp--;

            stream_columnNameComment.add(columnNameComment618.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1430:25: ( COMMA columnNameComment )*
            loop172:
            do {
                int alt172=2;
                int LA172_0 = input.LA(1);

                if ( (LA172_0==COMMA) ) {
                    alt172=1;
                }


                switch (alt172) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1430:26: COMMA columnNameComment
            	    {
            	    COMMA619=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_columnNameCommentList9942); 
            	    stream_COMMA.add(COMMA619);

            	    pushFollow(FOLLOW_columnNameComment_in_columnNameCommentList9944);
            	    columnNameComment620=columnNameComment();
            	    _fsp--;

            	    stream_columnNameComment.add(columnNameComment620.getTree());

            	    }
            	    break;

            	default :
            	    break loop172;
                }
            } while (true);


            // AST REWRITE
            // elements: columnNameComment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1430:52: -> ^( TOK_TABCOLNAME ( columnNameComment )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1430:55: ^( TOK_TABCOLNAME ( columnNameComment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOLNAME, "TOK_TABCOLNAME"), root_1);

                if ( !(stream_columnNameComment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_columnNameComment.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameComment.next());

                }
                stream_columnNameComment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameCommentList

    public static class columnNameComment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameComment
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1433:1: columnNameComment : colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) ;
    public final columnNameComment_return columnNameComment() throws RecognitionException {
        columnNameComment_return retval = new columnNameComment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT621=null;

        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT621_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("column name comment"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1436:5: (colName= Identifier ( KW_COMMENT comment= StringLiteral )? -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1436:7: colName= Identifier ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameComment9984); 
            stream_Identifier.add(colName);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1436:26: ( KW_COMMENT comment= StringLiteral )?
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==KW_COMMENT) ) {
                alt173=1;
            }
            switch (alt173) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1436:27: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT621=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameComment9987); 
                    stream_KW_COMMENT.add(KW_COMMENT621);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameComment9991); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colName, comment
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1437:5: -> ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1437:8: ^( TOK_TABCOL $colName TOK_NULL ( $comment)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, adaptor.create(TOK_NULL, "TOK_NULL"));
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1437:39: ( $comment)?
                if ( stream_comment.hasNext() ) {
                    adaptor.addChild(root_1, stream_comment.next());

                }
                stream_comment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameComment

    public static class columnRefOrder_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnRefOrder
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1440:1: columnRefOrder : expression (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) ;
    public final columnRefOrder_return columnRefOrder() throws RecognitionException {
        columnRefOrder_return retval = new columnRefOrder_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token asc=null;
        Token desc=null;
        expression_return expression622 = null;


        CommonTree asc_tree=null;
        CommonTree desc_tree=null;
        RewriteRuleTokenStream stream_KW_DESC=new RewriteRuleTokenStream(adaptor,"token KW_DESC");
        RewriteRuleTokenStream stream_KW_ASC=new RewriteRuleTokenStream(adaptor,"token KW_ASC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("column order"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1443:5: ( expression (asc= KW_ASC | desc= KW_DESC )? -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression ) -> ^( TOK_TABSORTCOLNAMEDESC expression ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1443:7: expression (asc= KW_ASC | desc= KW_DESC )?
            {
            pushFollow(FOLLOW_expression_in_columnRefOrder10039);
            expression622=expression();
            _fsp--;

            stream_expression.add(expression622.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1443:18: (asc= KW_ASC | desc= KW_DESC )?
            int alt174=3;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==KW_ASC) ) {
                alt174=1;
            }
            else if ( (LA174_0==KW_DESC) ) {
                alt174=2;
            }
            switch (alt174) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1443:19: asc= KW_ASC
                    {
                    asc=(Token)input.LT(1);
                    match(input,KW_ASC,FOLLOW_KW_ASC_in_columnRefOrder10044); 
                    stream_KW_ASC.add(asc);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1443:32: desc= KW_DESC
                    {
                    desc=(Token)input.LT(1);
                    match(input,KW_DESC,FOLLOW_KW_DESC_in_columnRefOrder10050); 
                    stream_KW_DESC.add(desc);


                    }
                    break;

            }


            // AST REWRITE
            // elements: expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1444:5: -> {$desc == null}? ^( TOK_TABSORTCOLNAMEASC expression )
            if (desc == null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1444:25: ^( TOK_TABSORTCOLNAMEASC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEASC, "TOK_TABSORTCOLNAMEASC"), root_1);

                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1445:5: -> ^( TOK_TABSORTCOLNAMEDESC expression )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1445:25: ^( TOK_TABSORTCOLNAMEDESC expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABSORTCOLNAMEDESC, "TOK_TABSORTCOLNAMEDESC"), root_1);

                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnRefOrder

    public static class columnNameType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1448:1: columnNameType : colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final columnNameType_return columnNameType() throws RecognitionException {
        columnNameType_return retval = new columnNameType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token KW_COMMENT624=null;
        colType_return colType623 = null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree KW_COMMENT624_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1451:5: (colName= Identifier colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1451:7: colName= Identifier colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameType10124); 
            stream_Identifier.add(colName);

            pushFollow(FOLLOW_colType_in_columnNameType10126);
            colType623=colType();
            _fsp--;

            stream_colType.add(colType623.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1451:34: ( KW_COMMENT comment= StringLiteral )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==KW_COMMENT) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1451:35: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT624=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameType10129); 
                    stream_KW_COMMENT.add(KW_COMMENT624);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameType10133); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: comment, colName, colType, colType, colName
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1452:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1452:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1453:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1453:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());
                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameType

    public static class columnNameColonType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start columnNameColonType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1456:1: columnNameColonType : colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) ;
    public final columnNameColonType_return columnNameColonType() throws RecognitionException {
        columnNameColonType_return retval = new columnNameColonType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token colName=null;
        Token comment=null;
        Token COLON625=null;
        Token KW_COMMENT627=null;
        colType_return colType626 = null;


        CommonTree colName_tree=null;
        CommonTree comment_tree=null;
        CommonTree COLON625_tree=null;
        CommonTree KW_COMMENT627_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_COMMENT=new RewriteRuleTokenStream(adaptor,"token KW_COMMENT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1459:5: (colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )? -> {$comment == null}? ^( TOK_TABCOL $colName colType ) -> ^( TOK_TABCOL $colName colType $comment) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1459:7: colName= Identifier COLON colType ( KW_COMMENT comment= StringLiteral )?
            {
            colName=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_columnNameColonType10219); 
            stream_Identifier.add(colName);

            COLON625=(Token)input.LT(1);
            match(input,COLON,FOLLOW_COLON_in_columnNameColonType10221); 
            stream_COLON.add(COLON625);

            pushFollow(FOLLOW_colType_in_columnNameColonType10223);
            colType626=colType();
            _fsp--;

            stream_colType.add(colType626.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1459:40: ( KW_COMMENT comment= StringLiteral )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==KW_COMMENT) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1459:41: KW_COMMENT comment= StringLiteral
                    {
                    KW_COMMENT627=(Token)input.LT(1);
                    match(input,KW_COMMENT,FOLLOW_KW_COMMENT_in_columnNameColonType10226); 
                    stream_KW_COMMENT.add(KW_COMMENT627);

                    comment=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_columnNameColonType10230); 
                    stream_StringLiteral.add(comment);


                    }
                    break;

            }


            // AST REWRITE
            // elements: colType, colName, colName, colType, comment
            // token labels: comment, colName
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_comment=new RewriteRuleTokenStream(adaptor,"token comment",comment);
            RewriteRuleTokenStream stream_colName=new RewriteRuleTokenStream(adaptor,"token colName",colName);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1460:5: -> {$comment == null}? ^( TOK_TABCOL $colName colType )
            if (comment == null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1460:28: ^( TOK_TABCOL $colName colType )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1461:5: -> ^( TOK_TABCOL $colName colType $comment)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1461:28: ^( TOK_TABCOL $colName colType $comment)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABCOL, "TOK_TABCOL"), root_1);

                adaptor.addChild(root_1, stream_colName.next());
                adaptor.addChild(root_1, stream_colType.next());
                adaptor.addChild(root_1, stream_comment.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end columnNameColonType

    public static class colType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start colType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1464:1: colType : type ;
    public final colType_return colType() throws RecognitionException {
        colType_return retval = new colType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        type_return type628 = null;



         msgs.push("column type"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1467:5: ( type )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1467:7: type
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_type_in_colType10314);
            type628=type();
            _fsp--;

            adaptor.addChild(root_0, type628.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end colType

    public static class colTypeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start colTypeList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1470:1: colTypeList : colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) ;
    public final colTypeList_return colTypeList() throws RecognitionException {
        colTypeList_return retval = new colTypeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA630=null;
        colType_return colType629 = null;

        colType_return colType631 = null;


        CommonTree COMMA630_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_colType=new RewriteRuleSubtreeStream(adaptor,"rule colType");
         msgs.push("column type list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1473:5: ( colType ( COMMA colType )* -> ^( TOK_COLTYPELIST ( colType )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1473:7: colType ( COMMA colType )*
            {
            pushFollow(FOLLOW_colType_in_colTypeList10341);
            colType629=colType();
            _fsp--;

            stream_colType.add(colType629.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1473:15: ( COMMA colType )*
            loop177:
            do {
                int alt177=2;
                int LA177_0 = input.LA(1);

                if ( (LA177_0==COMMA) ) {
                    alt177=1;
                }


                switch (alt177) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1473:16: COMMA colType
            	    {
            	    COMMA630=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_colTypeList10344); 
            	    stream_COMMA.add(COMMA630);

            	    pushFollow(FOLLOW_colType_in_colTypeList10346);
            	    colType631=colType();
            	    _fsp--;

            	    stream_colType.add(colType631.getTree());

            	    }
            	    break;

            	default :
            	    break loop177;
                }
            } while (true);


            // AST REWRITE
            // elements: colType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1473:32: -> ^( TOK_COLTYPELIST ( colType )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1473:35: ^( TOK_COLTYPELIST ( colType )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_COLTYPELIST, "TOK_COLTYPELIST"), root_1);

                if ( !(stream_colType.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_colType.hasNext() ) {
                    adaptor.addChild(root_1, stream_colType.next());

                }
                stream_colType.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end colTypeList

    public static class type_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start type
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1476:1: type : ( primitiveType | listType | structType | mapType | unionType );
    public final type_return type() throws RecognitionException {
        type_return retval = new type_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        primitiveType_return primitiveType632 = null;

        listType_return listType633 = null;

        structType_return structType634 = null;

        mapType_return mapType635 = null;

        unionType_return unionType636 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1477:5: ( primitiveType | listType | structType | mapType | unionType )
            int alt178=5;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
            case KW_SMALLINT:
            case KW_INT:
            case KW_BIGINT:
            case KW_BOOLEAN:
            case KW_FLOAT:
            case KW_DOUBLE:
            case KW_DATE:
            case KW_DATETIME:
            case KW_TIMESTAMP:
            case KW_STRING:
            case KW_BINARY:
                {
                alt178=1;
                }
                break;
            case KW_ARRAY:
                {
                alt178=2;
                }
                break;
            case KW_STRUCT:
                {
                alt178=3;
                }
                break;
            case KW_MAP:
                {
                alt178=4;
                }
                break;
            case KW_UNIONTYPE:
                {
                alt178=5;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1476:1: type : ( primitiveType | listType | structType | mapType | unionType );", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1477:7: primitiveType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type10374);
                    primitiveType632=primitiveType();
                    _fsp--;

                    adaptor.addChild(root_0, primitiveType632.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1478:7: listType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_listType_in_type10382);
                    listType633=listType();
                    _fsp--;

                    adaptor.addChild(root_0, listType633.getTree());

                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1479:7: structType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_structType_in_type10390);
                    structType634=structType();
                    _fsp--;

                    adaptor.addChild(root_0, structType634.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1480:7: mapType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_mapType_in_type10398);
                    mapType635=mapType();
                    _fsp--;

                    adaptor.addChild(root_0, mapType635.getTree());

                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1481:7: unionType
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_unionType_in_type10406);
                    unionType636=unionType();
                    _fsp--;

                    adaptor.addChild(root_0, unionType636.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end type

    public static class primitiveType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start primitiveType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1483:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY );
    public final primitiveType_return primitiveType() throws RecognitionException {
        primitiveType_return retval = new primitiveType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TINYINT637=null;
        Token KW_SMALLINT638=null;
        Token KW_INT639=null;
        Token KW_BIGINT640=null;
        Token KW_BOOLEAN641=null;
        Token KW_FLOAT642=null;
        Token KW_DOUBLE643=null;
        Token KW_DATE644=null;
        Token KW_DATETIME645=null;
        Token KW_TIMESTAMP646=null;
        Token KW_STRING647=null;
        Token KW_BINARY648=null;

        CommonTree KW_TINYINT637_tree=null;
        CommonTree KW_SMALLINT638_tree=null;
        CommonTree KW_INT639_tree=null;
        CommonTree KW_BIGINT640_tree=null;
        CommonTree KW_BOOLEAN641_tree=null;
        CommonTree KW_FLOAT642_tree=null;
        CommonTree KW_DOUBLE643_tree=null;
        CommonTree KW_DATE644_tree=null;
        CommonTree KW_DATETIME645_tree=null;
        CommonTree KW_TIMESTAMP646_tree=null;
        CommonTree KW_STRING647_tree=null;
        CommonTree KW_BINARY648_tree=null;
        RewriteRuleTokenStream stream_KW_DATETIME=new RewriteRuleTokenStream(adaptor,"token KW_DATETIME");
        RewriteRuleTokenStream stream_KW_STRING=new RewriteRuleTokenStream(adaptor,"token KW_STRING");
        RewriteRuleTokenStream stream_KW_TIMESTAMP=new RewriteRuleTokenStream(adaptor,"token KW_TIMESTAMP");
        RewriteRuleTokenStream stream_KW_DATE=new RewriteRuleTokenStream(adaptor,"token KW_DATE");
        RewriteRuleTokenStream stream_KW_FLOAT=new RewriteRuleTokenStream(adaptor,"token KW_FLOAT");
        RewriteRuleTokenStream stream_KW_BINARY=new RewriteRuleTokenStream(adaptor,"token KW_BINARY");
        RewriteRuleTokenStream stream_KW_INT=new RewriteRuleTokenStream(adaptor,"token KW_INT");
        RewriteRuleTokenStream stream_KW_SMALLINT=new RewriteRuleTokenStream(adaptor,"token KW_SMALLINT");
        RewriteRuleTokenStream stream_KW_DOUBLE=new RewriteRuleTokenStream(adaptor,"token KW_DOUBLE");
        RewriteRuleTokenStream stream_KW_BIGINT=new RewriteRuleTokenStream(adaptor,"token KW_BIGINT");
        RewriteRuleTokenStream stream_KW_TINYINT=new RewriteRuleTokenStream(adaptor,"token KW_TINYINT");
        RewriteRuleTokenStream stream_KW_BOOLEAN=new RewriteRuleTokenStream(adaptor,"token KW_BOOLEAN");

         msgs.push("primitive type specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1486:5: ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY )
            int alt179=12;
            switch ( input.LA(1) ) {
            case KW_TINYINT:
                {
                alt179=1;
                }
                break;
            case KW_SMALLINT:
                {
                alt179=2;
                }
                break;
            case KW_INT:
                {
                alt179=3;
                }
                break;
            case KW_BIGINT:
                {
                alt179=4;
                }
                break;
            case KW_BOOLEAN:
                {
                alt179=5;
                }
                break;
            case KW_FLOAT:
                {
                alt179=6;
                }
                break;
            case KW_DOUBLE:
                {
                alt179=7;
                }
                break;
            case KW_DATE:
                {
                alt179=8;
                }
                break;
            case KW_DATETIME:
                {
                alt179=9;
                }
                break;
            case KW_TIMESTAMP:
                {
                alt179=10;
                }
                break;
            case KW_STRING:
                {
                alt179=11;
                }
                break;
            case KW_BINARY:
                {
                alt179=12;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1483:1: primitiveType : ( KW_TINYINT -> TOK_TINYINT | KW_SMALLINT -> TOK_SMALLINT | KW_INT -> TOK_INT | KW_BIGINT -> TOK_BIGINT | KW_BOOLEAN -> TOK_BOOLEAN | KW_FLOAT -> TOK_FLOAT | KW_DOUBLE -> TOK_DOUBLE | KW_DATE -> TOK_DATE | KW_DATETIME -> TOK_DATETIME | KW_TIMESTAMP -> TOK_TIMESTAMP | KW_STRING -> TOK_STRING | KW_BINARY -> TOK_BINARY );", 179, 0, input);

                throw nvae;
            }

            switch (alt179) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1486:7: KW_TINYINT
                    {
                    KW_TINYINT637=(Token)input.LT(1);
                    match(input,KW_TINYINT,FOLLOW_KW_TINYINT_in_primitiveType10428); 
                    stream_KW_TINYINT.add(KW_TINYINT637);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1486:24: -> TOK_TINYINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TINYINT, "TOK_TINYINT"));

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1487:7: KW_SMALLINT
                    {
                    KW_SMALLINT638=(Token)input.LT(1);
                    match(input,KW_SMALLINT,FOLLOW_KW_SMALLINT_in_primitiveType10449); 
                    stream_KW_SMALLINT.add(KW_SMALLINT638);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1487:24: -> TOK_SMALLINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_SMALLINT, "TOK_SMALLINT"));

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1488:7: KW_INT
                    {
                    KW_INT639=(Token)input.LT(1);
                    match(input,KW_INT,FOLLOW_KW_INT_in_primitiveType10469); 
                    stream_KW_INT.add(KW_INT639);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1488:24: -> TOK_INT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_INT, "TOK_INT"));

                    }



                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1489:7: KW_BIGINT
                    {
                    KW_BIGINT640=(Token)input.LT(1);
                    match(input,KW_BIGINT,FOLLOW_KW_BIGINT_in_primitiveType10494); 
                    stream_KW_BIGINT.add(KW_BIGINT640);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1489:24: -> TOK_BIGINT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BIGINT, "TOK_BIGINT"));

                    }



                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1490:7: KW_BOOLEAN
                    {
                    KW_BOOLEAN641=(Token)input.LT(1);
                    match(input,KW_BOOLEAN,FOLLOW_KW_BOOLEAN_in_primitiveType10516); 
                    stream_KW_BOOLEAN.add(KW_BOOLEAN641);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1490:24: -> TOK_BOOLEAN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BOOLEAN, "TOK_BOOLEAN"));

                    }



                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1491:7: KW_FLOAT
                    {
                    KW_FLOAT642=(Token)input.LT(1);
                    match(input,KW_FLOAT,FOLLOW_KW_FLOAT_in_primitiveType10537); 
                    stream_KW_FLOAT.add(KW_FLOAT642);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1491:24: -> TOK_FLOAT
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_FLOAT, "TOK_FLOAT"));

                    }



                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1492:7: KW_DOUBLE
                    {
                    KW_DOUBLE643=(Token)input.LT(1);
                    match(input,KW_DOUBLE,FOLLOW_KW_DOUBLE_in_primitiveType10560); 
                    stream_KW_DOUBLE.add(KW_DOUBLE643);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1492:24: -> TOK_DOUBLE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DOUBLE, "TOK_DOUBLE"));

                    }



                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1493:7: KW_DATE
                    {
                    KW_DATE644=(Token)input.LT(1);
                    match(input,KW_DATE,FOLLOW_KW_DATE_in_primitiveType10582); 
                    stream_KW_DATE.add(KW_DATE644);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1493:24: -> TOK_DATE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DATE, "TOK_DATE"));

                    }



                    }
                    break;
                case 9 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1494:7: KW_DATETIME
                    {
                    KW_DATETIME645=(Token)input.LT(1);
                    match(input,KW_DATETIME,FOLLOW_KW_DATETIME_in_primitiveType10606); 
                    stream_KW_DATETIME.add(KW_DATETIME645);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1494:24: -> TOK_DATETIME
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_DATETIME, "TOK_DATETIME"));

                    }



                    }
                    break;
                case 10 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1495:7: KW_TIMESTAMP
                    {
                    KW_TIMESTAMP646=(Token)input.LT(1);
                    match(input,KW_TIMESTAMP,FOLLOW_KW_TIMESTAMP_in_primitiveType10626); 
                    stream_KW_TIMESTAMP.add(KW_TIMESTAMP646);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1495:24: -> TOK_TIMESTAMP
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_TIMESTAMP, "TOK_TIMESTAMP"));

                    }



                    }
                    break;
                case 11 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1496:7: KW_STRING
                    {
                    KW_STRING647=(Token)input.LT(1);
                    match(input,KW_STRING,FOLLOW_KW_STRING_in_primitiveType10645); 
                    stream_KW_STRING.add(KW_STRING647);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1496:24: -> TOK_STRING
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_STRING, "TOK_STRING"));

                    }



                    }
                    break;
                case 12 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1497:7: KW_BINARY
                    {
                    KW_BINARY648=(Token)input.LT(1);
                    match(input,KW_BINARY,FOLLOW_KW_BINARY_in_primitiveType10667); 
                    stream_KW_BINARY.add(KW_BINARY648);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1497:24: -> TOK_BINARY
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_BINARY, "TOK_BINARY"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end primitiveType

    public static class listType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start listType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1500:1: listType : KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) ;
    public final listType_return listType() throws RecognitionException {
        listType_return retval = new listType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ARRAY649=null;
        Token LESSTHAN650=null;
        Token GREATERTHAN652=null;
        type_return type651 = null;


        CommonTree KW_ARRAY649_tree=null;
        CommonTree LESSTHAN650_tree=null;
        CommonTree GREATERTHAN652_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_ARRAY=new RewriteRuleTokenStream(adaptor,"token KW_ARRAY");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("list type"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1503:5: ( KW_ARRAY LESSTHAN type GREATERTHAN -> ^( TOK_LIST type ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1503:7: KW_ARRAY LESSTHAN type GREATERTHAN
            {
            KW_ARRAY649=(Token)input.LT(1);
            match(input,KW_ARRAY,FOLLOW_KW_ARRAY_in_listType10708); 
            stream_KW_ARRAY.add(KW_ARRAY649);

            LESSTHAN650=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_listType10710); 
            stream_LESSTHAN.add(LESSTHAN650);

            pushFollow(FOLLOW_type_in_listType10712);
            type651=type();
            _fsp--;

            stream_type.add(type651.getTree());
            GREATERTHAN652=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_listType10714); 
            stream_GREATERTHAN.add(GREATERTHAN652);


            // AST REWRITE
            // elements: type
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1503:44: -> ^( TOK_LIST type )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1503:47: ^( TOK_LIST type )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIST, "TOK_LIST"), root_1);

                adaptor.addChild(root_1, stream_type.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end listType

    public static class structType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start structType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1506:1: structType : KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) ;
    public final structType_return structType() throws RecognitionException {
        structType_return retval = new structType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_STRUCT653=null;
        Token LESSTHAN654=null;
        Token GREATERTHAN656=null;
        columnNameColonTypeList_return columnNameColonTypeList655 = null;


        CommonTree KW_STRUCT653_tree=null;
        CommonTree LESSTHAN654_tree=null;
        CommonTree GREATERTHAN656_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_STRUCT=new RewriteRuleTokenStream(adaptor,"token KW_STRUCT");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_columnNameColonTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameColonTypeList");
         msgs.push("struct type"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1509:5: ( KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN -> ^( TOK_STRUCT columnNameColonTypeList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1509:7: KW_STRUCT LESSTHAN columnNameColonTypeList GREATERTHAN
            {
            KW_STRUCT653=(Token)input.LT(1);
            match(input,KW_STRUCT,FOLLOW_KW_STRUCT_in_structType10751); 
            stream_KW_STRUCT.add(KW_STRUCT653);

            LESSTHAN654=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_structType10753); 
            stream_LESSTHAN.add(LESSTHAN654);

            pushFollow(FOLLOW_columnNameColonTypeList_in_structType10755);
            columnNameColonTypeList655=columnNameColonTypeList();
            _fsp--;

            stream_columnNameColonTypeList.add(columnNameColonTypeList655.getTree());
            GREATERTHAN656=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_structType10757); 
            stream_GREATERTHAN.add(GREATERTHAN656);


            // AST REWRITE
            // elements: columnNameColonTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1509:62: -> ^( TOK_STRUCT columnNameColonTypeList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1509:65: ^( TOK_STRUCT columnNameColonTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STRUCT, "TOK_STRUCT"), root_1);

                adaptor.addChild(root_1, stream_columnNameColonTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end structType

    public static class mapType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start mapType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1512:1: mapType : KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) ;
    public final mapType_return mapType() throws RecognitionException {
        mapType_return retval = new mapType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAP657=null;
        Token LESSTHAN658=null;
        Token COMMA659=null;
        Token GREATERTHAN660=null;
        primitiveType_return left = null;

        type_return right = null;


        CommonTree KW_MAP657_tree=null;
        CommonTree LESSTHAN658_tree=null;
        CommonTree COMMA659_tree=null;
        CommonTree GREATERTHAN660_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
        RewriteRuleSubtreeStream stream_type=new RewriteRuleSubtreeStream(adaptor,"rule type");
         msgs.push("map type"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1515:5: ( KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN -> ^( TOK_MAP $left $right) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1515:7: KW_MAP LESSTHAN left= primitiveType COMMA right= type GREATERTHAN
            {
            KW_MAP657=(Token)input.LT(1);
            match(input,KW_MAP,FOLLOW_KW_MAP_in_mapType10792); 
            stream_KW_MAP.add(KW_MAP657);

            LESSTHAN658=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_mapType10794); 
            stream_LESSTHAN.add(LESSTHAN658);

            pushFollow(FOLLOW_primitiveType_in_mapType10798);
            left=primitiveType();
            _fsp--;

            stream_primitiveType.add(left.getTree());
            COMMA659=(Token)input.LT(1);
            match(input,COMMA,FOLLOW_COMMA_in_mapType10800); 
            stream_COMMA.add(COMMA659);

            pushFollow(FOLLOW_type_in_mapType10804);
            right=type();
            _fsp--;

            stream_type.add(right.getTree());
            GREATERTHAN660=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_mapType10806); 
            stream_GREATERTHAN.add(GREATERTHAN660);


            // AST REWRITE
            // elements: right, left
            // token labels: 
            // rule labels: retval, left, right
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);
            RewriteRuleSubtreeStream stream_right=new RewriteRuleSubtreeStream(adaptor,"token right",right!=null?right.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1516:5: -> ^( TOK_MAP $left $right)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1516:8: ^( TOK_MAP $left $right)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_MAP, "TOK_MAP"), root_1);

                adaptor.addChild(root_1, stream_left.next());
                adaptor.addChild(root_1, stream_right.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end mapType

    public static class unionType_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start unionType
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1519:1: unionType : KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) ;
    public final unionType_return unionType() throws RecognitionException {
        unionType_return retval = new unionType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNIONTYPE661=null;
        Token LESSTHAN662=null;
        Token GREATERTHAN664=null;
        colTypeList_return colTypeList663 = null;


        CommonTree KW_UNIONTYPE661_tree=null;
        CommonTree LESSTHAN662_tree=null;
        CommonTree GREATERTHAN664_tree=null;
        RewriteRuleTokenStream stream_LESSTHAN=new RewriteRuleTokenStream(adaptor,"token LESSTHAN");
        RewriteRuleTokenStream stream_KW_UNIONTYPE=new RewriteRuleTokenStream(adaptor,"token KW_UNIONTYPE");
        RewriteRuleTokenStream stream_GREATERTHAN=new RewriteRuleTokenStream(adaptor,"token GREATERTHAN");
        RewriteRuleSubtreeStream stream_colTypeList=new RewriteRuleSubtreeStream(adaptor,"rule colTypeList");
         msgs.push("uniontype type"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1522:5: ( KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN -> ^( TOK_UNIONTYPE colTypeList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1522:7: KW_UNIONTYPE LESSTHAN colTypeList GREATERTHAN
            {
            KW_UNIONTYPE661=(Token)input.LT(1);
            match(input,KW_UNIONTYPE,FOLLOW_KW_UNIONTYPE_in_unionType10849); 
            stream_KW_UNIONTYPE.add(KW_UNIONTYPE661);

            LESSTHAN662=(Token)input.LT(1);
            match(input,LESSTHAN,FOLLOW_LESSTHAN_in_unionType10851); 
            stream_LESSTHAN.add(LESSTHAN662);

            pushFollow(FOLLOW_colTypeList_in_unionType10853);
            colTypeList663=colTypeList();
            _fsp--;

            stream_colTypeList.add(colTypeList663.getTree());
            GREATERTHAN664=(Token)input.LT(1);
            match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_unionType10855); 
            stream_GREATERTHAN.add(GREATERTHAN664);


            // AST REWRITE
            // elements: colTypeList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1522:53: -> ^( TOK_UNIONTYPE colTypeList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1522:56: ^( TOK_UNIONTYPE colTypeList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNIONTYPE, "TOK_UNIONTYPE"), root_1);

                adaptor.addChild(root_1, stream_colTypeList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end unionType

    public static class queryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1525:1: queryOperator : KW_UNION KW_ALL -> ^( TOK_UNION ) ;
    public final queryOperator_return queryOperator() throws RecognitionException {
        queryOperator_return retval = new queryOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNION665=null;
        Token KW_ALL666=null;

        CommonTree KW_UNION665_tree=null;
        CommonTree KW_ALL666_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_UNION=new RewriteRuleTokenStream(adaptor,"token KW_UNION");

         msgs.push("query operator"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1528:5: ( KW_UNION KW_ALL -> ^( TOK_UNION ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1528:7: KW_UNION KW_ALL
            {
            KW_UNION665=(Token)input.LT(1);
            match(input,KW_UNION,FOLLOW_KW_UNION_in_queryOperator10890); 
            stream_KW_UNION.add(KW_UNION665);

            KW_ALL666=(Token)input.LT(1);
            match(input,KW_ALL,FOLLOW_KW_ALL_in_queryOperator10892); 
            stream_KW_ALL.add(KW_ALL666);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1528:23: -> ^( TOK_UNION )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1528:26: ^( TOK_UNION )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_UNION, "TOK_UNION"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryOperator

    public static class queryStatementExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryStatementExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1532:1: queryStatementExpression : queryStatement ( queryOperator queryStatement )* ;
    public final queryStatementExpression_return queryStatementExpression() throws RecognitionException {
        queryStatementExpression_return retval = new queryStatementExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        queryStatement_return queryStatement667 = null;

        queryOperator_return queryOperator668 = null;

        queryStatement_return queryStatement669 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:5: ( queryStatement ( queryOperator queryStatement )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:7: queryStatement ( queryOperator queryStatement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_queryStatement_in_queryStatementExpression10916);
            queryStatement667=queryStatement();
            _fsp--;

            adaptor.addChild(root_0, queryStatement667.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:22: ( queryOperator queryStatement )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==KW_UNION) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1533:23: queryOperator queryStatement
            	    {
            	    pushFollow(FOLLOW_queryOperator_in_queryStatementExpression10919);
            	    queryOperator668=queryOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(queryOperator668.getTree(), root_0);
            	    pushFollow(FOLLOW_queryStatement_in_queryStatementExpression10922);
            	    queryStatement669=queryStatement();
            	    _fsp--;
//null-subquery1:a-subquery1:dual null-subquery2:a-subquery2:dual null-subquery2:a-subquery2:a-subquery1:a-subquery1:dual
            	    adaptor.addChild(root_0, queryStatement669.getTree());

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryStatementExpression

    public static class queryStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start queryStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1536:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );
    public final queryStatement_return queryStatement() throws RecognitionException {
        queryStatement_return retval = new queryStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        List list_b=null;
        fromClause_return fromClause670 = null;

        regular_body_return regular_body671 = null;

        RuleReturnScope b = null;
        RewriteRuleSubtreeStream stream_body=new RewriteRuleSubtreeStream(adaptor,"rule body");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1537:5: ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body )
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==KW_FROM) ) {
                alt182=1;
            }
            else if ( (LA182_0==KW_SELECT||LA182_0==KW_MAP||LA182_0==KW_INSERT||LA182_0==KW_REDUCE) ) {
                alt182=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1536:1: queryStatement : ( fromClause (b+= body )+ -> ^( TOK_QUERY fromClause ( body )+ ) | regular_body );", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1538:5: fromClause (b+= body )+
                    {
                    pushFollow(FOLLOW_fromClause_in_queryStatement10945);
                    fromClause670=fromClause();
                    _fsp--;

                    stream_fromClause.add(fromClause670.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1539:5: (b+= body )+
                    int cnt181=0;
                    loop181:
                    do {
                        int alt181=2;
                        int LA181_0 = input.LA(1);

                        if ( (LA181_0==KW_SELECT||LA181_0==KW_MAP||LA181_0==KW_INSERT||LA181_0==KW_REDUCE) ) {
                            alt181=1;
                        }


                        switch (alt181) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1539:7: b+= body
                    	    {
                    	    pushFollow(FOLLOW_body_in_queryStatement10955);
                    	    b=body();
                    	    _fsp--;

                    	    stream_body.add(b.getTree());
                    	    if (list_b==null) list_b=new ArrayList();
                    	    list_b.add(b);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt181 >= 1 ) break loop181;
                                EarlyExitException eee =
                                    new EarlyExitException(181, input);
                                throw eee;
                        }
                        cnt181++;
                    } while (true);


                    // AST REWRITE
                    // elements: fromClause, body
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1539:18: -> ^( TOK_QUERY fromClause ( body )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1539:21: ^( TOK_QUERY fromClause ( body )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                        adaptor.addChild(root_1, stream_fromClause.next());
                        if ( !(stream_body.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_body.hasNext() ) {
                            adaptor.addChild(root_1, stream_body.next());

                        }
                        stream_body.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1540:7: regular_body
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_regular_body_in_queryStatement10977);
                    regular_body671=regular_body();
                    _fsp--;

                    adaptor.addChild(root_0, regular_body671.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end queryStatement

    public static class regular_body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start regular_body
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1543:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );
    public final regular_body_return regular_body() throws RecognitionException {
        regular_body_return retval = new regular_body_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        insertClause_return insertClause672 = null;

        selectClause_return selectClause673 = null;

        fromClause_return fromClause674 = null;

        whereClause_return whereClause675 = null;

        groupByClause_return groupByClause676 = null;

        havingClause_return havingClause677 = null;

        orderByClause_return orderByClause678 = null;

        clusterByClause_return clusterByClause679 = null;

        distributeByClause_return distributeByClause680 = null;

        sortByClause_return sortByClause681 = null;

        limitClause_return limitClause682 = null;

        selectStatement_return selectStatement683 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1544:4: ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement )
            int alt191=2;
            int LA191_0 = input.LA(1);

            if ( (LA191_0==KW_INSERT) ) {
                alt191=1;
            }
            else if ( (LA191_0==KW_SELECT||LA191_0==KW_MAP||LA191_0==KW_REDUCE) ) {
                alt191=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1543:1: regular_body : ( insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) | selectStatement );", 191, 0, input);

                throw nvae;
            }
            switch (alt191) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1545:4: insertClause selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_regular_body10996);
                    insertClause672=insertClause();
                    _fsp--;

                    stream_insertClause.add(insertClause672.getTree());
                    pushFollow(FOLLOW_selectClause_in_regular_body11001);
                    selectClause673=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause673.getTree());
                    pushFollow(FOLLOW_fromClause_in_regular_body11006);
                    fromClause674=fromClause();
                    _fsp--;

                    stream_fromClause.add(fromClause674.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1548:4: ( whereClause )?
                    int alt183=2;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==KW_WHERE) ) {
                        alt183=1;
                    }
                    switch (alt183) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1548:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_regular_body11011);
                            whereClause675=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause675.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1549:4: ( groupByClause )?
                    int alt184=2;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==KW_GROUP) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1549:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_regular_body11017);
                            groupByClause676=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause676.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1550:4: ( havingClause )?
                    int alt185=2;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==KW_HAVING) ) {
                        alt185=1;
                    }
                    switch (alt185) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1550:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_regular_body11023);
                            havingClause677=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause677.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:4: ( orderByClause )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==KW_ORDER) ) {
                        alt186=1;
                    }
                    switch (alt186) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1551:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_regular_body11029);
                            orderByClause678=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause678.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1552:4: ( clusterByClause )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==KW_CLUSTER) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1552:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_regular_body11035);
                            clusterByClause679=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause679.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1553:4: ( distributeByClause )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==KW_DISTRIBUTE) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1553:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_regular_body11041);
                            distributeByClause680=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause680.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1554:4: ( sortByClause )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==KW_SORT) ) {
                        alt189=1;
                    }
                    switch (alt189) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1554:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_regular_body11047);
                            sortByClause681=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause681.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1555:4: ( limitClause )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==KW_LIMIT) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1555:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_regular_body11053);
                            limitClause682=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause682.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: clusterByClause, whereClause, limitClause, orderByClause, groupByClause, fromClause, insertClause, sortByClause, havingClause, distributeByClause, selectClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1555:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1555:20: ^( TOK_QUERY fromClause ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                        adaptor.addChild(root_1, stream_fromClause.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1555:43: ^( TOK_INSERT insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);

                        adaptor.addChild(root_2, stream_insertClause.next());
                        adaptor.addChild(root_2, stream_selectClause.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1556:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1557:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1557:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1557:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_2, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1559:4: selectStatement
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectStatement_in_regular_body11146);
                    selectStatement683=selectStatement();
                    _fsp--;

                    adaptor.addChild(root_0, selectStatement683.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end regular_body

    public static class selectStatement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectStatement
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1562:1: selectStatement : selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) ;
    public final selectStatement_return selectStatement() throws RecognitionException {
        selectStatement_return retval = new selectStatement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        selectClause_return selectClause684 = null;

        fromClause_return fromClause685 = null;

        whereClause_return whereClause686 = null;

        groupByClause_return groupByClause687 = null;

        havingClause_return havingClause688 = null;

        orderByClause_return orderByClause689 = null;

        clusterByClause_return clusterByClause690 = null;

        distributeByClause_return distributeByClause691 = null;

        sortByClause_return sortByClause692 = null;

        limitClause_return limitClause693 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        RewriteRuleSubtreeStream stream_fromClause=new RewriteRuleSubtreeStream(adaptor,"rule fromClause");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1563:4: ( selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1564:4: selectClause fromClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
            {
            pushFollow(FOLLOW_selectClause_in_selectStatement11164);
            selectClause684=selectClause();
            _fsp--;

            stream_selectClause.add(selectClause684.getTree());
            pushFollow(FOLLOW_fromClause_in_selectStatement11169);
            fromClause685=fromClause();
            _fsp--;

            stream_fromClause.add(fromClause685.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1566:4: ( whereClause )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==KW_WHERE) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1566:4: whereClause
                    {
                    pushFollow(FOLLOW_whereClause_in_selectStatement11174);
                    whereClause686=whereClause();
                    _fsp--;

                    stream_whereClause.add(whereClause686.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1567:4: ( groupByClause )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==KW_GROUP) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1567:4: groupByClause
                    {
                    pushFollow(FOLLOW_groupByClause_in_selectStatement11180);
                    groupByClause687=groupByClause();
                    _fsp--;

                    stream_groupByClause.add(groupByClause687.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1568:4: ( havingClause )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==KW_HAVING) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1568:4: havingClause
                    {
                    pushFollow(FOLLOW_havingClause_in_selectStatement11186);
                    havingClause688=havingClause();
                    _fsp--;

                    stream_havingClause.add(havingClause688.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1569:4: ( orderByClause )?
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==KW_ORDER) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1569:4: orderByClause
                    {
                    pushFollow(FOLLOW_orderByClause_in_selectStatement11192);
                    orderByClause689=orderByClause();
                    _fsp--;

                    stream_orderByClause.add(orderByClause689.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1570:4: ( clusterByClause )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==KW_CLUSTER) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1570:4: clusterByClause
                    {
                    pushFollow(FOLLOW_clusterByClause_in_selectStatement11198);
                    clusterByClause690=clusterByClause();
                    _fsp--;

                    stream_clusterByClause.add(clusterByClause690.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:4: ( distributeByClause )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==KW_DISTRIBUTE) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1571:4: distributeByClause
                    {
                    pushFollow(FOLLOW_distributeByClause_in_selectStatement11204);
                    distributeByClause691=distributeByClause();
                    _fsp--;

                    stream_distributeByClause.add(distributeByClause691.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1572:4: ( sortByClause )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==KW_SORT) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1572:4: sortByClause
                    {
                    pushFollow(FOLLOW_sortByClause_in_selectStatement11210);
                    sortByClause692=sortByClause();
                    _fsp--;

                    stream_sortByClause.add(sortByClause692.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:4: ( limitClause )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==KW_LIMIT) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:4: limitClause
                    {
                    pushFollow(FOLLOW_limitClause_in_selectStatement11216);
                    limitClause693=limitClause();
                    _fsp--;

                    stream_limitClause.add(limitClause693.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: sortByClause, distributeByClause, havingClause, limitClause, groupByClause, clusterByClause, whereClause, fromClause, orderByClause, selectClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1573:17: -> ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:20: ^( TOK_QUERY fromClause ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_QUERY, "TOK_QUERY"), root_1);

                adaptor.addChild(root_1, stream_fromClause.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:43: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_2);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:56: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_3);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1573:74: ^( TOK_DIR TOK_TMP_FILE )
                {
                CommonTree root_4 = (CommonTree)adaptor.nil();
                root_4 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_4);

                adaptor.addChild(root_4, adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));

                adaptor.addChild(root_3, root_4);
                }

                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_2, stream_selectClause.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1574:35: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_whereClause.next());

                }
                stream_whereClause.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1574:48: ( groupByClause )?
                if ( stream_groupByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_groupByClause.next());

                }
                stream_groupByClause.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1574:63: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_havingClause.next());

                }
                stream_havingClause.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1574:77: ( orderByClause )?
                if ( stream_orderByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_orderByClause.next());

                }
                stream_orderByClause.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1574:92: ( clusterByClause )?
                if ( stream_clusterByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_clusterByClause.next());

                }
                stream_clusterByClause.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1575:22: ( distributeByClause )?
                if ( stream_distributeByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_distributeByClause.next());

                }
                stream_distributeByClause.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1575:42: ( sortByClause )?
                if ( stream_sortByClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_sortByClause.next());

                }
                stream_sortByClause.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1575:56: ( limitClause )?
                if ( stream_limitClause.hasNext() ) {
                    adaptor.addChild(root_2, stream_limitClause.next());

                }
                stream_limitClause.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectStatement

    public static class body_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start body
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1579:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );
    public final body_return body() throws RecognitionException {
        body_return retval = new body_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        insertClause_return insertClause694 = null;

        selectClause_return selectClause695 = null;

        whereClause_return whereClause696 = null;

        groupByClause_return groupByClause697 = null;

        havingClause_return havingClause698 = null;

        orderByClause_return orderByClause699 = null;

        clusterByClause_return clusterByClause700 = null;

        distributeByClause_return distributeByClause701 = null;

        sortByClause_return sortByClause702 = null;

        limitClause_return limitClause703 = null;

        selectClause_return selectClause704 = null;

        whereClause_return whereClause705 = null;

        groupByClause_return groupByClause706 = null;

        havingClause_return havingClause707 = null;

        orderByClause_return orderByClause708 = null;

        clusterByClause_return clusterByClause709 = null;

        distributeByClause_return distributeByClause710 = null;

        sortByClause_return sortByClause711 = null;

        limitClause_return limitClause712 = null;


        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_clusterByClause=new RewriteRuleSubtreeStream(adaptor,"rule clusterByClause");
        RewriteRuleSubtreeStream stream_distributeByClause=new RewriteRuleSubtreeStream(adaptor,"rule distributeByClause");
        RewriteRuleSubtreeStream stream_limitClause=new RewriteRuleSubtreeStream(adaptor,"rule limitClause");
        RewriteRuleSubtreeStream stream_orderByClause=new RewriteRuleSubtreeStream(adaptor,"rule orderByClause");
        RewriteRuleSubtreeStream stream_sortByClause=new RewriteRuleSubtreeStream(adaptor,"rule sortByClause");
        RewriteRuleSubtreeStream stream_insertClause=new RewriteRuleSubtreeStream(adaptor,"rule insertClause");
        RewriteRuleSubtreeStream stream_groupByClause=new RewriteRuleSubtreeStream(adaptor,"rule groupByClause");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_selectClause=new RewriteRuleSubtreeStream(adaptor,"rule selectClause");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1580:4: ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==KW_INSERT) ) {
                alt216=1;
            }
            else if ( (LA216_0==KW_SELECT||LA216_0==KW_MAP||LA216_0==KW_REDUCE) ) {
                alt216=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1579:1: body : ( insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) | selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? ) );", 216, 0, input);

                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1581:4: insertClause selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_insertClause_in_body11326);
                    insertClause694=insertClause();
                    _fsp--;

                    stream_insertClause.add(insertClause694.getTree());
                    pushFollow(FOLLOW_selectClause_in_body11331);
                    selectClause695=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause695.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1583:4: ( whereClause )?
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==KW_WHERE) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1583:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body11336);
                            whereClause696=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause696.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1584:4: ( groupByClause )?
                    int alt201=2;
                    int LA201_0 = input.LA(1);

                    if ( (LA201_0==KW_GROUP) ) {
                        alt201=1;
                    }
                    switch (alt201) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1584:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body11342);
                            groupByClause697=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause697.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1585:4: ( havingClause )?
                    int alt202=2;
                    int LA202_0 = input.LA(1);

                    if ( (LA202_0==KW_HAVING) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1585:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body11348);
                            havingClause698=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause698.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1586:4: ( orderByClause )?
                    int alt203=2;
                    int LA203_0 = input.LA(1);

                    if ( (LA203_0==KW_ORDER) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1586:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body11354);
                            orderByClause699=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause699.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1587:4: ( clusterByClause )?
                    int alt204=2;
                    int LA204_0 = input.LA(1);

                    if ( (LA204_0==KW_CLUSTER) ) {
                        alt204=1;
                    }
                    switch (alt204) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1587:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body11360);
                            clusterByClause700=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause700.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1588:4: ( distributeByClause )?
                    int alt205=2;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==KW_DISTRIBUTE) ) {
                        alt205=1;
                    }
                    switch (alt205) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1588:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body11366);
                            distributeByClause701=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause701.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:4: ( sortByClause )?
                    int alt206=2;
                    int LA206_0 = input.LA(1);

                    if ( (LA206_0==KW_SORT) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1589:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body11372);
                            sortByClause702=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause702.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1590:4: ( limitClause )?
                    int alt207=2;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==KW_LIMIT) ) {
                        alt207=1;
                    }
                    switch (alt207) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1590:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body11378);
                            limitClause703=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause703.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: distributeByClause, orderByClause, whereClause, limitClause, groupByClause, sortByClause, selectClause, havingClause, insertClause, clusterByClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1590:17: -> ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1590:20: ^( TOK_INSERT ( insertClause )? selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1590:33: ( insertClause )?
                        if ( stream_insertClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_insertClause.next());

                        }
                        stream_insertClause.reset();
                        adaptor.addChild(root_1, stream_selectClause.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1591:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1591:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1591:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1591:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1591:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1592:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1592:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1592:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1594:4: selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )?
                    {
                    pushFollow(FOLLOW_selectClause_in_body11466);
                    selectClause704=selectClause();
                    _fsp--;

                    stream_selectClause.add(selectClause704.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1595:4: ( whereClause )?
                    int alt208=2;
                    int LA208_0 = input.LA(1);

                    if ( (LA208_0==KW_WHERE) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1595:4: whereClause
                            {
                            pushFollow(FOLLOW_whereClause_in_body11471);
                            whereClause705=whereClause();
                            _fsp--;

                            stream_whereClause.add(whereClause705.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1596:4: ( groupByClause )?
                    int alt209=2;
                    int LA209_0 = input.LA(1);

                    if ( (LA209_0==KW_GROUP) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1596:4: groupByClause
                            {
                            pushFollow(FOLLOW_groupByClause_in_body11477);
                            groupByClause706=groupByClause();
                            _fsp--;

                            stream_groupByClause.add(groupByClause706.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1597:4: ( havingClause )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==KW_HAVING) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1597:4: havingClause
                            {
                            pushFollow(FOLLOW_havingClause_in_body11483);
                            havingClause707=havingClause();
                            _fsp--;

                            stream_havingClause.add(havingClause707.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:4: ( orderByClause )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==KW_ORDER) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1598:4: orderByClause
                            {
                            pushFollow(FOLLOW_orderByClause_in_body11489);
                            orderByClause708=orderByClause();
                            _fsp--;

                            stream_orderByClause.add(orderByClause708.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1599:4: ( clusterByClause )?
                    int alt212=2;
                    int LA212_0 = input.LA(1);

                    if ( (LA212_0==KW_CLUSTER) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1599:4: clusterByClause
                            {
                            pushFollow(FOLLOW_clusterByClause_in_body11495);
                            clusterByClause709=clusterByClause();
                            _fsp--;

                            stream_clusterByClause.add(clusterByClause709.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:4: ( distributeByClause )?
                    int alt213=2;
                    int LA213_0 = input.LA(1);

                    if ( (LA213_0==KW_DISTRIBUTE) ) {
                        alt213=1;
                    }
                    switch (alt213) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1600:4: distributeByClause
                            {
                            pushFollow(FOLLOW_distributeByClause_in_body11501);
                            distributeByClause710=distributeByClause();
                            _fsp--;

                            stream_distributeByClause.add(distributeByClause710.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1601:4: ( sortByClause )?
                    int alt214=2;
                    int LA214_0 = input.LA(1);

                    if ( (LA214_0==KW_SORT) ) {
                        alt214=1;
                    }
                    switch (alt214) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1601:4: sortByClause
                            {
                            pushFollow(FOLLOW_sortByClause_in_body11507);
                            sortByClause711=sortByClause();
                            _fsp--;

                            stream_sortByClause.add(sortByClause711.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:4: ( limitClause )?
                    int alt215=2;
                    int LA215_0 = input.LA(1);

                    if ( (LA215_0==KW_LIMIT) ) {
                        alt215=1;
                    }
                    switch (alt215) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:4: limitClause
                            {
                            pushFollow(FOLLOW_limitClause_in_body11513);
                            limitClause712=limitClause();
                            _fsp--;

                            stream_limitClause.add(limitClause712.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: groupByClause, havingClause, clusterByClause, limitClause, orderByClause, distributeByClause, whereClause, sortByClause, selectClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1602:17: -> ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:20: ^( TOK_INSERT ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) ) selectClause ( whereClause )? ( groupByClause )? ( havingClause )? ( orderByClause )? ( clusterByClause )? ( distributeByClause )? ( sortByClause )? ( limitClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT, "TOK_INSERT"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:33: ^( TOK_DESTINATION ^( TOK_DIR TOK_TMP_FILE ) )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_2);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1602:51: ^( TOK_DIR TOK_TMP_FILE )
                        {
                        CommonTree root_3 = (CommonTree)adaptor.nil();
                        root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_3);

                        adaptor.addChild(root_3, adaptor.create(TOK_TMP_FILE, "TOK_TMP_FILE"));

                        adaptor.addChild(root_2, root_3);
                        }

                        adaptor.addChild(root_1, root_2);
                        }
                        adaptor.addChild(root_1, stream_selectClause.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1603:35: ( whereClause )?
                        if ( stream_whereClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whereClause.next());

                        }
                        stream_whereClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1603:48: ( groupByClause )?
                        if ( stream_groupByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByClause.next());

                        }
                        stream_groupByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1603:63: ( havingClause )?
                        if ( stream_havingClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_havingClause.next());

                        }
                        stream_havingClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1603:77: ( orderByClause )?
                        if ( stream_orderByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_orderByClause.next());

                        }
                        stream_orderByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1603:92: ( clusterByClause )?
                        if ( stream_clusterByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_clusterByClause.next());

                        }
                        stream_clusterByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1604:22: ( distributeByClause )?
                        if ( stream_distributeByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_distributeByClause.next());

                        }
                        stream_distributeByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1604:42: ( sortByClause )?
                        if ( stream_sortByClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_sortByClause.next());

                        }
                        stream_sortByClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1604:56: ( limitClause )?
                        if ( stream_limitClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_limitClause.next());

                        }
                        stream_limitClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end body

    public static class insertClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start insertClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1607:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) );
    public final insertClause_return insertClause() throws RecognitionException {
        insertClause_return retval = new insertClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_INSERT713=null;
        Token KW_OVERWRITE714=null;
        Token KW_INSERT717=null;
        Token KW_INTO718=null;
        Token KW_TABLE719=null;
        destination_return destination715 = null;

        ifNotExists_return ifNotExists716 = null;

        tableOrPartition_return tableOrPartition720 = null;


        CommonTree KW_INSERT713_tree=null;
        CommonTree KW_OVERWRITE714_tree=null;
        CommonTree KW_INSERT717_tree=null;
        CommonTree KW_INTO718_tree=null;
        CommonTree KW_TABLE719_tree=null;
        RewriteRuleTokenStream stream_KW_INTO=new RewriteRuleTokenStream(adaptor,"token KW_INTO");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleTokenStream stream_KW_OVERWRITE=new RewriteRuleTokenStream(adaptor,"token KW_OVERWRITE");
        RewriteRuleTokenStream stream_KW_INSERT=new RewriteRuleTokenStream(adaptor,"token KW_INSERT");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
        RewriteRuleSubtreeStream stream_ifNotExists=new RewriteRuleSubtreeStream(adaptor,"rule ifNotExists");
        RewriteRuleSubtreeStream stream_destination=new RewriteRuleSubtreeStream(adaptor,"rule destination");
         msgs.push("insert clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1610:4: ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) )
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==KW_INSERT) ) {
                int LA218_1 = input.LA(2);

                if ( (LA218_1==KW_INTO) ) {
                    alt218=2;
                }
                else if ( (LA218_1==KW_OVERWRITE) ) {
                    alt218=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1607:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) );", 218, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1607:1: insertClause : ( KW_INSERT KW_OVERWRITE destination ( ifNotExists )? -> ^( TOK_DESTINATION destination ( ifNotExists )? ) | KW_INSERT KW_INTO KW_TABLE tableOrPartition -> ^( TOK_INSERT_INTO ^( tableOrPartition ) ) );", 218, 0, input);

                throw nvae;
            }
            switch (alt218) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:6: KW_INSERT KW_OVERWRITE destination ( ifNotExists )?
                    {
                    KW_INSERT713=(Token)input.LT(1);
                    match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause11628); 
                    stream_KW_INSERT.add(KW_INSERT713);

                    KW_OVERWRITE714=(Token)input.LT(1);
                    match(input,KW_OVERWRITE,FOLLOW_KW_OVERWRITE_in_insertClause11630); 
                    stream_KW_OVERWRITE.add(KW_OVERWRITE714);

                    pushFollow(FOLLOW_destination_in_insertClause11632);
                    destination715=destination();
                    _fsp--;

                    stream_destination.add(destination715.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:41: ( ifNotExists )?
                    int alt217=2;
                    int LA217_0 = input.LA(1);

                    if ( (LA217_0==KW_IF) ) {
                        alt217=1;
                    }
                    switch (alt217) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:41: ifNotExists
                            {
                            pushFollow(FOLLOW_ifNotExists_in_insertClause11634);
                            ifNotExists716=ifNotExists();
                            _fsp--;

                            stream_ifNotExists.add(ifNotExists716.getTree());

                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: destination, ifNotExists
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1611:54: -> ^( TOK_DESTINATION destination ( ifNotExists )? )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:57: ^( TOK_DESTINATION destination ( ifNotExists )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DESTINATION, "TOK_DESTINATION"), root_1);

                        adaptor.addChild(root_1, stream_destination.next());
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1611:87: ( ifNotExists )?
                        if ( stream_ifNotExists.hasNext() ) {
                            adaptor.addChild(root_1, stream_ifNotExists.next());

                        }
                        stream_ifNotExists.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1612:6: KW_INSERT KW_INTO KW_TABLE tableOrPartition
                    {
                    KW_INSERT717=(Token)input.LT(1);
                    match(input,KW_INSERT,FOLLOW_KW_INSERT_in_insertClause11653); 
                    stream_KW_INSERT.add(KW_INSERT717);

                    KW_INTO718=(Token)input.LT(1);
                    match(input,KW_INTO,FOLLOW_KW_INTO_in_insertClause11655); 
                    stream_KW_INTO.add(KW_INTO718);

                    KW_TABLE719=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_insertClause11657); 
                    stream_KW_TABLE.add(KW_TABLE719);

                    pushFollow(FOLLOW_tableOrPartition_in_insertClause11659);
                    tableOrPartition720=tableOrPartition();
                    _fsp--;

                    stream_tableOrPartition.add(tableOrPartition720.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1613:8: -> ^( TOK_INSERT_INTO ^( tableOrPartition ) )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1613:11: ^( TOK_INSERT_INTO ^( tableOrPartition ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_INSERT_INTO, "TOK_INSERT_INTO"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1613:29: ^( tableOrPartition )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(stream_tableOrPartition.nextNode(), root_2);

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end insertClause

    public static class destination_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start destination
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1616:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) );
    public final destination_return destination() throws RecognitionException {
        destination_return retval = new destination_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LOCAL721=null;
        Token KW_DIRECTORY722=null;
        Token StringLiteral723=null;
        Token KW_DIRECTORY724=null;
        Token StringLiteral725=null;
        Token KW_TABLE726=null;
        tableOrPartition_return tableOrPartition727 = null;


        CommonTree KW_LOCAL721_tree=null;
        CommonTree KW_DIRECTORY722_tree=null;
        CommonTree StringLiteral723_tree=null;
        CommonTree KW_DIRECTORY724_tree=null;
        CommonTree StringLiteral725_tree=null;
        CommonTree KW_TABLE726_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_DIRECTORY=new RewriteRuleTokenStream(adaptor,"token KW_DIRECTORY");
        RewriteRuleTokenStream stream_KW_LOCAL=new RewriteRuleTokenStream(adaptor,"token KW_LOCAL");
        RewriteRuleTokenStream stream_KW_TABLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLE");
        RewriteRuleSubtreeStream stream_tableOrPartition=new RewriteRuleSubtreeStream(adaptor,"rule tableOrPartition");
         msgs.push("destination specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1619:4: ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) )
            int alt219=3;
            switch ( input.LA(1) ) {
            case KW_LOCAL:
                {
                alt219=1;
                }
                break;
            case KW_DIRECTORY:
                {
                alt219=2;
                }
                break;
            case KW_TABLE:
                {
                alt219=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1616:1: destination : ( KW_LOCAL KW_DIRECTORY StringLiteral -> ^( TOK_LOCAL_DIR StringLiteral ) | KW_DIRECTORY StringLiteral -> ^( TOK_DIR StringLiteral ) | KW_TABLE tableOrPartition -> ^( tableOrPartition ) );", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1620:6: KW_LOCAL KW_DIRECTORY StringLiteral
                    {
                    KW_LOCAL721=(Token)input.LT(1);
                    match(input,KW_LOCAL,FOLLOW_KW_LOCAL_in_destination11706); 
                    stream_KW_LOCAL.add(KW_LOCAL721);

                    KW_DIRECTORY722=(Token)input.LT(1);
                    match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination11708); 
                    stream_KW_DIRECTORY.add(KW_DIRECTORY722);

                    StringLiteral723=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_destination11710); 
                    stream_StringLiteral.add(StringLiteral723);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1620:42: -> ^( TOK_LOCAL_DIR StringLiteral )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1620:45: ^( TOK_LOCAL_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LOCAL_DIR, "TOK_LOCAL_DIR"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:6: KW_DIRECTORY StringLiteral
                    {
                    KW_DIRECTORY724=(Token)input.LT(1);
                    match(input,KW_DIRECTORY,FOLLOW_KW_DIRECTORY_in_destination11725); 
                    stream_KW_DIRECTORY.add(KW_DIRECTORY724);

                    StringLiteral725=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_destination11727); 
                    stream_StringLiteral.add(StringLiteral725);


                    // AST REWRITE
                    // elements: StringLiteral
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1621:33: -> ^( TOK_DIR StringLiteral )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1621:36: ^( TOK_DIR StringLiteral )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DIR, "TOK_DIR"), root_1);

                        adaptor.addChild(root_1, stream_StringLiteral.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1622:6: KW_TABLE tableOrPartition
                    {
                    KW_TABLE726=(Token)input.LT(1);
                    match(input,KW_TABLE,FOLLOW_KW_TABLE_in_destination11742); 
                    stream_KW_TABLE.add(KW_TABLE726);

                    pushFollow(FOLLOW_tableOrPartition_in_destination11744);
                    tableOrPartition727=tableOrPartition();
                    _fsp--;

                    stream_tableOrPartition.add(tableOrPartition727.getTree());

                    // AST REWRITE
                    // elements: tableOrPartition
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1622:32: -> ^( tableOrPartition )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1622:35: ^( tableOrPartition )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_tableOrPartition.nextNode(), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end destination

    public static class limitClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start limitClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1625:1: limitClause : KW_LIMIT num= Number -> ^( TOK_LIMIT $num) ;
    public final limitClause_return limitClause() throws RecognitionException {
        limitClause_return retval = new limitClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token num=null;
        Token KW_LIMIT728=null;

        CommonTree num_tree=null;
        CommonTree KW_LIMIT728_tree=null;
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_LIMIT=new RewriteRuleTokenStream(adaptor,"token KW_LIMIT");

         msgs.push("limit clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1628:4: ( KW_LIMIT num= Number -> ^( TOK_LIMIT $num) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1629:4: KW_LIMIT num= Number
            {
            KW_LIMIT728=(Token)input.LT(1);
            match(input,KW_LIMIT,FOLLOW_KW_LIMIT_in_limitClause11778); 
            stream_KW_LIMIT.add(KW_LIMIT728);

            num=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_limitClause11782); 
            stream_Number.add(num);


            // AST REWRITE
            // elements: num
            // token labels: num
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_num=new RewriteRuleTokenStream(adaptor,"token num",num);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1629:24: -> ^( TOK_LIMIT $num)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1629:27: ^( TOK_LIMIT $num)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LIMIT, "TOK_LIMIT"), root_1);

                adaptor.addChild(root_1, stream_num.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end limitClause

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1634:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );
    public final selectClause_return selectClause() throws RecognitionException {
        selectClause_return retval = new selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token dist=null;
        Token transform=null;
        Token KW_SELECT729=null;
        Token KW_ALL731=null;
        hintClause_return hintClause730 = null;

        selectList_return selectList732 = null;

        selectTrfmClause_return selectTrfmClause733 = null;

        trfmClause_return trfmClause734 = null;


        CommonTree dist_tree=null;
        CommonTree transform_tree=null;
        CommonTree KW_SELECT729_tree=null;
        CommonTree KW_ALL731_tree=null;
        RewriteRuleTokenStream stream_KW_ALL=new RewriteRuleTokenStream(adaptor,"token KW_ALL");
        RewriteRuleTokenStream stream_KW_SELECT=new RewriteRuleTokenStream(adaptor,"token KW_SELECT");
        RewriteRuleTokenStream stream_KW_TRANSFORM=new RewriteRuleTokenStream(adaptor,"token KW_TRANSFORM");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleSubtreeStream stream_selectList=new RewriteRuleSubtreeStream(adaptor,"rule selectList");
        RewriteRuleSubtreeStream stream_hintClause=new RewriteRuleSubtreeStream(adaptor,"rule hintClause");
        RewriteRuleSubtreeStream stream_trfmClause=new RewriteRuleSubtreeStream(adaptor,"rule trfmClause");
        RewriteRuleSubtreeStream stream_selectTrfmClause=new RewriteRuleSubtreeStream(adaptor,"rule selectTrfmClause");
         msgs.push("select clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1637:5: ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) )
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==KW_SELECT) ) {
                alt223=1;
            }
            else if ( (LA223_0==KW_MAP||LA223_0==KW_REDUCE) ) {
                alt223=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1634:1: selectClause : ( KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) ) -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList ) -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList ) -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) ) | trfmClause -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) ) );", 223, 0, input);

                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:5: KW_SELECT ( hintClause )? ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    {
                    KW_SELECT729=(Token)input.LT(1);
                    match(input,KW_SELECT,FOLLOW_KW_SELECT_in_selectClause11823); 
                    stream_KW_SELECT.add(KW_SELECT729);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:15: ( hintClause )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==DIVIDE) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:15: hintClause
                            {
                            pushFollow(FOLLOW_hintClause_in_selectClause11825);
                            hintClause730=hintClause();
                            _fsp--;

                            stream_hintClause.add(hintClause730.getTree());

                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:27: ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==StringLiteral||LA222_0==KW_IF||LA222_0==KW_NOT||LA222_0==Identifier||LA222_0==LPAREN||LA222_0==Number||LA222_0==KW_ALL||LA222_0==KW_MAP||LA222_0==KW_ARRAY||(LA222_0>=KW_STRUCT && LA222_0<=KW_UNIONTYPE)||LA222_0==KW_DISTINCT||(LA222_0>=STAR && LA222_0<=PLUS)||(LA222_0>=KW_CAST && LA222_0<=KW_CASE)||(LA222_0>=BigintLiteral && LA222_0<=CharSetName)||LA222_0==KW_NULL||(LA222_0>=MINUS && LA222_0<=TILDE)||(LA222_0>=KW_TRUE && LA222_0<=KW_FALSE)) ) {
                        alt222=1;
                    }
                    else if ( (LA222_0==KW_TRANSFORM) ) {
                        alt222=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1638:27: ( ( ( KW_ALL | dist= KW_DISTINCT )? selectList ) | (transform= KW_TRANSFORM selectTrfmClause ) )", 222, 0, input);

                        throw nvae;
                    }
                    switch (alt222) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:28: ( ( KW_ALL | dist= KW_DISTINCT )? selectList )
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:28: ( ( KW_ALL | dist= KW_DISTINCT )? selectList )
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:29: ( KW_ALL | dist= KW_DISTINCT )? selectList
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:29: ( KW_ALL | dist= KW_DISTINCT )?
                            int alt221=3;
                            int LA221_0 = input.LA(1);

                            if ( (LA221_0==KW_ALL) ) {
                                alt221=1;
                            }
                            else if ( (LA221_0==KW_DISTINCT) ) {
                                alt221=2;
                            }
                            switch (alt221) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:30: KW_ALL
                                    {
                                    KW_ALL731=(Token)input.LT(1);
                                    match(input,KW_ALL,FOLLOW_KW_ALL_in_selectClause11831); 
                                    stream_KW_ALL.add(KW_ALL731);


                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1638:39: dist= KW_DISTINCT
                                    {
                                    dist=(Token)input.LT(1);
                                    match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_selectClause11837); 
                                    stream_KW_DISTINCT.add(dist);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_selectList_in_selectClause11841);
                            selectList732=selectList();
                            _fsp--;

                            stream_selectList.add(selectList732.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1639:29: (transform= KW_TRANSFORM selectTrfmClause )
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1639:29: (transform= KW_TRANSFORM selectTrfmClause )
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1639:30: transform= KW_TRANSFORM selectTrfmClause
                            {
                            transform=(Token)input.LT(1);
                            match(input,KW_TRANSFORM,FOLLOW_KW_TRANSFORM_in_selectClause11875); 
                            stream_KW_TRANSFORM.add(transform);

                            pushFollow(FOLLOW_selectTrfmClause_in_selectClause11877);
                            selectTrfmClause733=selectTrfmClause();
                            _fsp--;

                            stream_selectTrfmClause.add(selectTrfmClause733.getTree());

                            }


                            }
                            break;

                    }


                    // AST REWRITE
                    // elements: selectTrfmClause, selectList, hintClause, hintClause, hintClause, selectList
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1640:6: -> {$transform == null && $dist == null}? ^( TOK_SELECT ( hintClause )? selectList )
                    if (transform == null && dist == null) {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1640:48: ^( TOK_SELECT ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1640:61: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        adaptor.addChild(root_1, stream_selectList.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1641:6: -> {$transform == null && $dist != null}? ^( TOK_SELECTDI ( hintClause )? selectList )
                    if (transform == null && dist != null) {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1641:48: ^( TOK_SELECTDI ( hintClause )? selectList )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECTDI, "TOK_SELECTDI"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1641:63: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        adaptor.addChild(root_1, stream_selectList.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1642:6: -> ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1642:9: ^( TOK_SELECT ( hintClause )? ^( TOK_SELEXPR selectTrfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1642:22: ( hintClause )?
                        if ( stream_hintClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_hintClause.next());

                        }
                        stream_hintClause.reset();
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1642:34: ^( TOK_SELEXPR selectTrfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);

                        adaptor.addChild(root_2, stream_selectTrfmClause.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:5: trfmClause
                    {
                    pushFollow(FOLLOW_trfmClause_in_selectClause11948);
                    trfmClause734=trfmClause();
                    _fsp--;

                    stream_trfmClause.add(trfmClause734.getTree());

                    // AST REWRITE
                    // elements: trfmClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1644:17: -> ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:19: ^( TOK_SELECT ^( TOK_SELEXPR trfmClause ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_1);

                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1644:32: ^( TOK_SELEXPR trfmClause )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_2);

                        adaptor.addChild(root_2, stream_trfmClause.next());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectClause

    public static class selectList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1647:1: selectList : selectItem ( COMMA selectItem )* -> ( selectItem )+ ;
    public final selectList_return selectList() throws RecognitionException {
        selectList_return retval = new selectList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA736=null;
        selectItem_return selectItem735 = null;

        selectItem_return selectItem737 = null;


        CommonTree COMMA736_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectItem=new RewriteRuleSubtreeStream(adaptor,"rule selectItem");
         msgs.push("select list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1650:5: ( selectItem ( COMMA selectItem )* -> ( selectItem )+ )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1651:5: selectItem ( COMMA selectItem )*
            {
            pushFollow(FOLLOW_selectItem_in_selectList11991);
            selectItem735=selectItem();
            _fsp--;

            stream_selectItem.add(selectItem735.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1651:16: ( COMMA selectItem )*
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);

                if ( (LA224_0==COMMA) ) {
                    alt224=1;
                }


                switch (alt224) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1651:18: COMMA selectItem
            	    {
            	    COMMA736=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_selectList11995); 
            	    stream_COMMA.add(COMMA736);

            	    pushFollow(FOLLOW_selectItem_in_selectList11998);
            	    selectItem737=selectItem();
            	    _fsp--;

            	    stream_selectItem.add(selectItem737.getTree());

            	    }
            	    break;

            	default :
            	    break loop224;
                }
            } while (true);


            // AST REWRITE
            // elements: selectItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1651:39: -> ( selectItem )+
            {
                if ( !(stream_selectItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_selectItem.next());

                }
                stream_selectItem.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectList

    public static class selectTrfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectTrfmClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1654:1: selectTrfmClause : LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final selectTrfmClause_return selectTrfmClause() throws RecognitionException {
        selectTrfmClause_return retval = new selectTrfmClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN738=null;
        Token RPAREN740=null;
        Token KW_USING741=null;
        Token StringLiteral742=null;
        Token KW_AS743=null;
        Token LPAREN744=null;
        Token RPAREN747=null;
        rowFormat_return inSerde = null;

        recordWriter_return inRec = null;

        rowFormat_return outSerde = null;

        recordReader_return outRec = null;

        selectExpressionList_return selectExpressionList739 = null;

        aliasList_return aliasList745 = null;

        columnNameTypeList_return columnNameTypeList746 = null;

        aliasList_return aliasList748 = null;

        columnNameTypeList_return columnNameTypeList749 = null;


        CommonTree LPAREN738_tree=null;
        CommonTree RPAREN740_tree=null;
        CommonTree KW_USING741_tree=null;
        CommonTree StringLiteral742_tree=null;
        CommonTree KW_AS743_tree=null;
        CommonTree LPAREN744_tree=null;
        CommonTree RPAREN747_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1657:5: ( LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1658:5: LPAREN selectExpressionList RPAREN inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            LPAREN738=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause12037); 
            stream_LPAREN.add(LPAREN738);

            pushFollow(FOLLOW_selectExpressionList_in_selectTrfmClause12039);
            selectExpressionList739=selectExpressionList();
            _fsp--;

            stream_selectExpressionList.add(selectExpressionList739.getTree());
            RPAREN740=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause12041); 
            stream_RPAREN.add(RPAREN740);

            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause12049);
            inSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(inSerde.getTree());
            pushFollow(FOLLOW_recordWriter_in_selectTrfmClause12053);
            inRec=recordWriter();
            _fsp--;

            stream_recordWriter.add(inRec.getTree());
            KW_USING741=(Token)input.LT(1);
            match(input,KW_USING,FOLLOW_KW_USING_in_selectTrfmClause12059); 
            stream_KW_USING.add(KW_USING741);

            StringLiteral742=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_selectTrfmClause12061); 
            stream_StringLiteral.add(StringLiteral742);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==KW_AS) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS743=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_selectTrfmClause12069); 
                    stream_KW_AS.add(KW_AS743);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==LPAREN) ) {
                        alt227=1;
                    }
                    else if ( (LA227_0==Identifier) ) {
                        alt227=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1661:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )", 227, 0, input);

                        throw nvae;
                    }
                    switch (alt227) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN744=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_selectTrfmClause12073); 
                            stream_LPAREN.add(LPAREN744);

                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:22: ( aliasList | columnNameTypeList )
                            int alt225=2;
                            int LA225_0 = input.LA(1);

                            if ( (LA225_0==Identifier) ) {
                                int LA225_1 = input.LA(2);

                                if ( ((LA225_1>=RPAREN && LA225_1<=COMMA)) ) {
                                    alt225=1;
                                }
                                else if ( (LA225_1==KW_MAP||(LA225_1>=KW_TINYINT && LA225_1<=KW_ARRAY)||(LA225_1>=KW_STRUCT && LA225_1<=KW_UNIONTYPE)) ) {
                                    alt225=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("1661:22: ( aliasList | columnNameTypeList )", 225, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1661:22: ( aliasList | columnNameTypeList )", 225, 0, input);

                                throw nvae;
                            }
                            switch (alt225) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause12076);
                                    aliasList745=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList745.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause12080);
                                    columnNameTypeList746=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList746.getTree());

                                    }
                                    break;

                            }

                            RPAREN747=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_selectTrfmClause12083); 
                            stream_RPAREN.add(RPAREN747);


                            }


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:65: ( aliasList | columnNameTypeList )
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:65: ( aliasList | columnNameTypeList )
                            int alt226=2;
                            int LA226_0 = input.LA(1);

                            if ( (LA226_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case KW_TINYINT:
                                case KW_SMALLINT:
                                case KW_INT:
                                case KW_BIGINT:
                                case KW_BOOLEAN:
                                case KW_FLOAT:
                                case KW_DOUBLE:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_TIMESTAMP:
                                case KW_STRING:
                                case KW_BINARY:
                                case KW_ARRAY:
                                case KW_STRUCT:
                                case KW_UNIONTYPE:
                                    {
                                    alt226=2;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA226_16 = input.LA(3);

                                    if ( (LA226_16==LESSTHAN) ) {
                                        alt226=2;
                                    }
                                    else if ( (LA226_16==StringLiteral||LA226_16==KW_IF||LA226_16==KW_NOT||LA226_16==Identifier||LA226_16==LPAREN||LA226_16==Number||LA226_16==KW_MAP||LA226_16==KW_ARRAY||(LA226_16>=KW_STRUCT && LA226_16<=KW_UNIONTYPE)||(LA226_16>=STAR && LA226_16<=PLUS)||(LA226_16>=KW_CAST && LA226_16<=KW_CASE)||(LA226_16>=BigintLiteral && LA226_16<=CharSetName)||LA226_16==KW_NULL||(LA226_16>=MINUS && LA226_16<=TILDE)||(LA226_16>=KW_TRUE && LA226_16<=KW_FALSE)) ) {
                                        alt226=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("1661:65: ( aliasList | columnNameTypeList )", 226, 16, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case EOF:
                                case KW_FROM:
                                case RPAREN:
                                case COMMA:
                                case KW_SELECT:
                                case KW_GROUP:
                                case KW_RECORDREADER:
                                case KW_ROW:
                                case KW_UNION:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_REDUCE:
                                case KW_WHERE:
                                case KW_HAVING:
                                case KW_ORDER:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_SORT:
                                    {
                                    alt226=1;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("1661:65: ( aliasList | columnNameTypeList )", 226, 1, input);

                                    throw nvae;
                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1661:65: ( aliasList | columnNameTypeList )", 226, 0, input);

                                throw nvae;
                            }
                            switch (alt226) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_selectTrfmClause12089);
                                    aliasList748=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList748.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1661:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_selectTrfmClause12093);
                                    columnNameTypeList749=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList749.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_selectTrfmClause12105);
            outSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(outSerde.getTree());
            pushFollow(FOLLOW_recordReader_in_selectTrfmClause12109);
            outRec=recordReader();
            _fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: outSerde, selectExpressionList, columnNameTypeList, StringLiteral, aliasList, inRec, inSerde, outRec
            // token labels: 
            // rule labels: retval, inSerde, inRec, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"token inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"token inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"token outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"token outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1663:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1663:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.next());
                adaptor.addChild(root_1, stream_inSerde.next());
                adaptor.addChild(root_1, stream_inRec.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());
                adaptor.addChild(root_1, stream_outSerde.next());
                adaptor.addChild(root_1, stream_outRec.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1663:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.next());

                }
                stream_aliasList.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1663:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectTrfmClause

    public static class hintClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1666:1: hintClause : DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) ;
    public final hintClause_return hintClause() throws RecognitionException {
        hintClause_return retval = new hintClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DIVIDE750=null;
        Token STAR751=null;
        Token PLUS752=null;
        Token STAR754=null;
        Token DIVIDE755=null;
        hintList_return hintList753 = null;


        CommonTree DIVIDE750_tree=null;
        CommonTree STAR751_tree=null;
        CommonTree PLUS752_tree=null;
        CommonTree STAR754_tree=null;
        CommonTree DIVIDE755_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIVIDE=new RewriteRuleTokenStream(adaptor,"token DIVIDE");
        RewriteRuleSubtreeStream stream_hintList=new RewriteRuleSubtreeStream(adaptor,"rule hintList");
         msgs.push("hint clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1669:5: ( DIVIDE STAR PLUS hintList STAR DIVIDE -> ^( TOK_HINTLIST hintList ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1670:5: DIVIDE STAR PLUS hintList STAR DIVIDE
            {
            DIVIDE750=(Token)input.LT(1);
            match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause12172); 
            stream_DIVIDE.add(DIVIDE750);

            STAR751=(Token)input.LT(1);
            match(input,STAR,FOLLOW_STAR_in_hintClause12174); 
            stream_STAR.add(STAR751);

            PLUS752=(Token)input.LT(1);
            match(input,PLUS,FOLLOW_PLUS_in_hintClause12176); 
            stream_PLUS.add(PLUS752);

            pushFollow(FOLLOW_hintList_in_hintClause12178);
            hintList753=hintList();
            _fsp--;

            stream_hintList.add(hintList753.getTree());
            STAR754=(Token)input.LT(1);
            match(input,STAR,FOLLOW_STAR_in_hintClause12180); 
            stream_STAR.add(STAR754);

            DIVIDE755=(Token)input.LT(1);
            match(input,DIVIDE,FOLLOW_DIVIDE_in_hintClause12182); 
            stream_DIVIDE.add(DIVIDE755);


            // AST REWRITE
            // elements: hintList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1670:43: -> ^( TOK_HINTLIST hintList )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1670:46: ^( TOK_HINTLIST hintList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINTLIST, "TOK_HINTLIST"), root_1);

                adaptor.addChild(root_1, stream_hintList.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintClause

    public static class hintList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1673:1: hintList : hintItem ( COMMA hintItem )* -> ( hintItem )+ ;
    public final hintList_return hintList() throws RecognitionException {
        hintList_return retval = new hintList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA757=null;
        hintItem_return hintItem756 = null;

        hintItem_return hintItem758 = null;


        CommonTree COMMA757_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintItem=new RewriteRuleSubtreeStream(adaptor,"rule hintItem");
         msgs.push("hint list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1676:5: ( hintItem ( COMMA hintItem )* -> ( hintItem )+ )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1677:5: hintItem ( COMMA hintItem )*
            {
            pushFollow(FOLLOW_hintItem_in_hintList12221);
            hintItem756=hintItem();
            _fsp--;

            stream_hintItem.add(hintItem756.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1677:14: ( COMMA hintItem )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==COMMA) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1677:15: COMMA hintItem
            	    {
            	    COMMA757=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_hintList12224); 
            	    stream_COMMA.add(COMMA757);

            	    pushFollow(FOLLOW_hintItem_in_hintList12226);
            	    hintItem758=hintItem();
            	    _fsp--;

            	    stream_hintItem.add(hintItem758.getTree());

            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);


            // AST REWRITE
            // elements: hintItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1677:32: -> ( hintItem )+
            {
                if ( !(stream_hintItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintItem.hasNext() ) {
                    adaptor.addChild(root_0, stream_hintItem.next());

                }
                stream_hintItem.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintList

    public static class hintItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintItem
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1680:1: hintItem : hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) ;
    public final hintItem_return hintItem() throws RecognitionException {
        hintItem_return retval = new hintItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN760=null;
        Token RPAREN762=null;
        hintName_return hintName759 = null;

        hintArgs_return hintArgs761 = null;


        CommonTree LPAREN760_tree=null;
        CommonTree RPAREN762_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_hintName=new RewriteRuleSubtreeStream(adaptor,"rule hintName");
        RewriteRuleSubtreeStream stream_hintArgs=new RewriteRuleSubtreeStream(adaptor,"rule hintArgs");
         msgs.push("hint item"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1683:5: ( hintName ( LPAREN hintArgs RPAREN )? -> ^( TOK_HINT hintName ( hintArgs )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1684:5: hintName ( LPAREN hintArgs RPAREN )?
            {
            pushFollow(FOLLOW_hintName_in_hintItem12264);
            hintName759=hintName();
            _fsp--;

            stream_hintName.add(hintName759.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1684:14: ( LPAREN hintArgs RPAREN )?
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==LPAREN) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1684:15: LPAREN hintArgs RPAREN
                    {
                    LPAREN760=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_hintItem12267); 
                    stream_LPAREN.add(LPAREN760);

                    pushFollow(FOLLOW_hintArgs_in_hintItem12269);
                    hintArgs761=hintArgs();
                    _fsp--;

                    stream_hintArgs.add(hintArgs761.getTree());
                    RPAREN762=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_hintItem12271); 
                    stream_RPAREN.add(RPAREN762);


                    }
                    break;

            }


            // AST REWRITE
            // elements: hintArgs, hintName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1684:40: -> ^( TOK_HINT hintName ( hintArgs )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1684:43: ^( TOK_HINT hintName ( hintArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINT, "TOK_HINT"), root_1);

                adaptor.addChild(root_1, stream_hintName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1684:63: ( hintArgs )?
                if ( stream_hintArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_hintArgs.next());

                }
                stream_hintArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintItem

    public static class hintName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1687:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME );
    public final hintName_return hintName() throws RecognitionException {
        hintName_return retval = new hintName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAPJOIN763=null;
        Token KW_STREAMTABLE764=null;
        Token KW_HOLD_DDLTIME765=null;

        CommonTree KW_MAPJOIN763_tree=null;
        CommonTree KW_STREAMTABLE764_tree=null;
        CommonTree KW_HOLD_DDLTIME765_tree=null;
        RewriteRuleTokenStream stream_KW_HOLD_DDLTIME=new RewriteRuleTokenStream(adaptor,"token KW_HOLD_DDLTIME");
        RewriteRuleTokenStream stream_KW_MAPJOIN=new RewriteRuleTokenStream(adaptor,"token KW_MAPJOIN");
        RewriteRuleTokenStream stream_KW_STREAMTABLE=new RewriteRuleTokenStream(adaptor,"token KW_STREAMTABLE");

         msgs.push("hint name"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1690:5: ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME )
            int alt231=3;
            switch ( input.LA(1) ) {
            case KW_MAPJOIN:
                {
                alt231=1;
                }
                break;
            case KW_STREAMTABLE:
                {
                alt231=2;
                }
                break;
            case KW_HOLD_DDLTIME:
                {
                alt231=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1687:1: hintName : ( KW_MAPJOIN -> TOK_MAPJOIN | KW_STREAMTABLE -> TOK_STREAMTABLE | KW_HOLD_DDLTIME -> TOK_HOLD_DDLTIME );", 231, 0, input);

                throw nvae;
            }

            switch (alt231) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1691:5: KW_MAPJOIN
                    {
                    KW_MAPJOIN763=(Token)input.LT(1);
                    match(input,KW_MAPJOIN,FOLLOW_KW_MAPJOIN_in_hintName12315); 
                    stream_KW_MAPJOIN.add(KW_MAPJOIN763);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1691:16: -> TOK_MAPJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_MAPJOIN, "TOK_MAPJOIN"));

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1692:7: KW_STREAMTABLE
                    {
                    KW_STREAMTABLE764=(Token)input.LT(1);
                    match(input,KW_STREAMTABLE,FOLLOW_KW_STREAMTABLE_in_hintName12327); 
                    stream_KW_STREAMTABLE.add(KW_STREAMTABLE764);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1692:22: -> TOK_STREAMTABLE
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_STREAMTABLE, "TOK_STREAMTABLE"));

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1693:7: KW_HOLD_DDLTIME
                    {
                    KW_HOLD_DDLTIME765=(Token)input.LT(1);
                    match(input,KW_HOLD_DDLTIME,FOLLOW_KW_HOLD_DDLTIME_in_hintName12339); 
                    stream_KW_HOLD_DDLTIME.add(KW_HOLD_DDLTIME765);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1693:23: -> TOK_HOLD_DDLTIME
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_HOLD_DDLTIME, "TOK_HOLD_DDLTIME"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintName

    public static class hintArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintArgs
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1696:1: hintArgs : hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) ;
    public final hintArgs_return hintArgs() throws RecognitionException {
        hintArgs_return retval = new hintArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA767=null;
        hintArgName_return hintArgName766 = null;

        hintArgName_return hintArgName768 = null;


        CommonTree COMMA767_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_hintArgName=new RewriteRuleSubtreeStream(adaptor,"rule hintArgName");
         msgs.push("hint arguments"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1699:5: ( hintArgName ( COMMA hintArgName )* -> ^( TOK_HINTARGLIST ( hintArgName )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1700:5: hintArgName ( COMMA hintArgName )*
            {
            pushFollow(FOLLOW_hintArgName_in_hintArgs12374);
            hintArgName766=hintArgName();
            _fsp--;

            stream_hintArgName.add(hintArgName766.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1700:17: ( COMMA hintArgName )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==COMMA) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1700:18: COMMA hintArgName
            	    {
            	    COMMA767=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_hintArgs12377); 
            	    stream_COMMA.add(COMMA767);

            	    pushFollow(FOLLOW_hintArgName_in_hintArgs12379);
            	    hintArgName768=hintArgName();
            	    _fsp--;

            	    stream_hintArgName.add(hintArgName768.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            // AST REWRITE
            // elements: hintArgName
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1700:38: -> ^( TOK_HINTARGLIST ( hintArgName )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1700:41: ^( TOK_HINTARGLIST ( hintArgName )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HINTARGLIST, "TOK_HINTARGLIST"), root_1);

                if ( !(stream_hintArgName.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_hintArgName.hasNext() ) {
                    adaptor.addChild(root_1, stream_hintArgName.next());

                }
                stream_hintArgName.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintArgs

    public static class hintArgName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start hintArgName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1703:1: hintArgName : Identifier ;
    public final hintArgName_return hintArgName() throws RecognitionException {
        hintArgName_return retval = new hintArgName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier769=null;

        CommonTree Identifier769_tree=null;

         msgs.push("hint argument name"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1706:5: ( Identifier )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1707:5: Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            Identifier769=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_hintArgName12421); 
            Identifier769_tree = (CommonTree)adaptor.create(Identifier769);
            adaptor.addChild(root_0, Identifier769_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end hintArgName

    public static class selectItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectItem
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1710:1: selectItem : ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) ;
    public final selectItem_return selectItem() throws RecognitionException {
        selectItem_return retval = new selectItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_AS771=null;
        Token Identifier772=null;
        Token KW_AS773=null;
        Token LPAREN774=null;
        Token Identifier775=null;
        Token COMMA776=null;
        Token Identifier777=null;
        Token RPAREN778=null;
        selectExpression_return selectExpression770 = null;


        CommonTree KW_AS771_tree=null;
        CommonTree Identifier772_tree=null;
        CommonTree KW_AS773_tree=null;
        CommonTree LPAREN774_tree=null;
        CommonTree Identifier775_tree=null;
        CommonTree COMMA776_tree=null;
        CommonTree Identifier777_tree=null;
        CommonTree RPAREN778_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("selection target"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1713:5: ( ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? ) -> ^( TOK_SELEXPR selectExpression ( Identifier )* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:5: ( selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )? )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:7: selectExpression ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            {
            pushFollow(FOLLOW_selectExpression_in_selectItem12454);
            selectExpression770=selectExpression();
            _fsp--;

            stream_selectExpression.add(selectExpression770.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:25: ( ( ( KW_AS )? Identifier ) | ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN ) )?
            int alt235=3;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==KW_AS) ) {
                int LA235_1 = input.LA(2);

                if ( (LA235_1==LPAREN) ) {
                    alt235=2;
                }
                else if ( (LA235_1==Identifier) ) {
                    alt235=1;
                }
            }
            else if ( (LA235_0==Identifier) ) {
                alt235=1;
            }
            switch (alt235) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:26: ( ( KW_AS )? Identifier )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:26: ( ( KW_AS )? Identifier )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:27: ( KW_AS )? Identifier
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:27: ( KW_AS )?
                    int alt233=2;
                    int LA233_0 = input.LA(1);

                    if ( (LA233_0==KW_AS) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:27: KW_AS
                            {
                            KW_AS771=(Token)input.LT(1);
                            match(input,KW_AS,FOLLOW_KW_AS_in_selectItem12459); 
                            stream_KW_AS.add(KW_AS771);


                            }
                            break;

                    }

                    Identifier772=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selectItem12462); 
                    stream_Identifier.add(Identifier772);


                    }


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:48: ( KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:49: KW_AS LPAREN Identifier ( COMMA Identifier )* RPAREN
                    {
                    KW_AS773=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_selectItem12468); 
                    stream_KW_AS.add(KW_AS773);

                    LPAREN774=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_selectItem12470); 
                    stream_LPAREN.add(LPAREN774);

                    Identifier775=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_selectItem12472); 
                    stream_Identifier.add(Identifier775);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:73: ( COMMA Identifier )*
                    loop234:
                    do {
                        int alt234=2;
                        int LA234_0 = input.LA(1);

                        if ( (LA234_0==COMMA) ) {
                            alt234=1;
                        }


                        switch (alt234) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:74: COMMA Identifier
                    	    {
                    	    COMMA776=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_selectItem12475); 
                    	    stream_COMMA.add(COMMA776);

                    	    Identifier777=(Token)input.LT(1);
                    	    match(input,Identifier,FOLLOW_Identifier_in_selectItem12477); 
                    	    stream_Identifier.add(Identifier777);


                    	    }
                    	    break;

                    	default :
                    	    break loop234;
                        }
                    } while (true);

                    RPAREN778=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_selectItem12481); 
                    stream_RPAREN.add(RPAREN778);


                    }


                    }
                    break;

            }


            }


            // AST REWRITE
            // elements: Identifier, selectExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1714:104: -> ^( TOK_SELEXPR selectExpression ( Identifier )* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:107: ^( TOK_SELEXPR selectExpression ( Identifier )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_1);

                adaptor.addChild(root_1, stream_selectExpression.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1714:138: ( Identifier )*
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectItem

    public static class trfmClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start trfmClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1717:1: trfmClause : ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) ;
    public final trfmClause_return trfmClause() throws RecognitionException {
        trfmClause_return retval = new trfmClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_MAP779=null;
        Token KW_REDUCE781=null;
        Token KW_USING783=null;
        Token StringLiteral784=null;
        Token KW_AS785=null;
        Token LPAREN786=null;
        Token RPAREN789=null;
        rowFormat_return inSerde = null;

        recordWriter_return inRec = null;

        rowFormat_return outSerde = null;

        recordReader_return outRec = null;

        selectExpressionList_return selectExpressionList780 = null;

        selectExpressionList_return selectExpressionList782 = null;

        aliasList_return aliasList787 = null;

        columnNameTypeList_return columnNameTypeList788 = null;

        aliasList_return aliasList790 = null;

        columnNameTypeList_return columnNameTypeList791 = null;


        CommonTree KW_MAP779_tree=null;
        CommonTree KW_REDUCE781_tree=null;
        CommonTree KW_USING783_tree=null;
        CommonTree StringLiteral784_tree=null;
        CommonTree KW_AS785_tree=null;
        CommonTree LPAREN786_tree=null;
        CommonTree RPAREN789_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_REDUCE=new RewriteRuleTokenStream(adaptor,"token KW_REDUCE");
        RewriteRuleTokenStream stream_KW_USING=new RewriteRuleTokenStream(adaptor,"token KW_USING");
        RewriteRuleTokenStream stream_KW_MAP=new RewriteRuleTokenStream(adaptor,"token KW_MAP");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_rowFormat=new RewriteRuleSubtreeStream(adaptor,"rule rowFormat");
        RewriteRuleSubtreeStream stream_columnNameTypeList=new RewriteRuleSubtreeStream(adaptor,"rule columnNameTypeList");
        RewriteRuleSubtreeStream stream_recordReader=new RewriteRuleSubtreeStream(adaptor,"rule recordReader");
        RewriteRuleSubtreeStream stream_aliasList=new RewriteRuleSubtreeStream(adaptor,"rule aliasList");
        RewriteRuleSubtreeStream stream_selectExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule selectExpressionList");
        RewriteRuleSubtreeStream stream_recordWriter=new RewriteRuleSubtreeStream(adaptor,"rule recordWriter");
         msgs.push("transform clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1720:5: ( ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1721:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList ) inSerde= rowFormat inRec= recordWriter KW_USING StringLiteral ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )? outSerde= rowFormat outRec= recordReader
            {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1721:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==KW_MAP) ) {
                alt236=1;
            }
            else if ( (LA236_0==KW_REDUCE) ) {
                alt236=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1721:5: ( KW_MAP selectExpressionList | KW_REDUCE selectExpressionList )", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1721:9: KW_MAP selectExpressionList
                    {
                    KW_MAP779=(Token)input.LT(1);
                    match(input,KW_MAP,FOLLOW_KW_MAP_in_trfmClause12531); 
                    stream_KW_MAP.add(KW_MAP779);

                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause12536);
                    selectExpressionList780=selectExpressionList();
                    _fsp--;

                    stream_selectExpressionList.add(selectExpressionList780.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1722:9: KW_REDUCE selectExpressionList
                    {
                    KW_REDUCE781=(Token)input.LT(1);
                    match(input,KW_REDUCE,FOLLOW_KW_REDUCE_in_trfmClause12546); 
                    stream_KW_REDUCE.add(KW_REDUCE781);

                    pushFollow(FOLLOW_selectExpressionList_in_trfmClause12548);
                    selectExpressionList782=selectExpressionList();
                    _fsp--;

                    stream_selectExpressionList.add(selectExpressionList782.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_trfmClause12558);
            inSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(inSerde.getTree());
            pushFollow(FOLLOW_recordWriter_in_trfmClause12562);
            inRec=recordWriter();
            _fsp--;

            stream_recordWriter.add(inRec.getTree());
            KW_USING783=(Token)input.LT(1);
            match(input,KW_USING,FOLLOW_KW_USING_in_trfmClause12568); 
            stream_KW_USING.add(KW_USING783);

            StringLiteral784=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_trfmClause12570); 
            stream_StringLiteral.add(StringLiteral784);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:5: ( KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) ) )?
            int alt240=2;
            int LA240_0 = input.LA(1);

            if ( (LA240_0==KW_AS) ) {
                alt240=1;
            }
            switch (alt240) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:7: KW_AS ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    {
                    KW_AS785=(Token)input.LT(1);
                    match(input,KW_AS,FOLLOW_KW_AS_in_trfmClause12578); 
                    stream_KW_AS.add(KW_AS785);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==LPAREN) ) {
                        alt239=1;
                    }
                    else if ( (LA239_0==Identifier) ) {
                        alt239=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1725:13: ( ( LPAREN ( aliasList | columnNameTypeList ) RPAREN ) | ( aliasList | columnNameTypeList ) )", 239, 0, input);

                        throw nvae;
                    }
                    switch (alt239) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:14: ( LPAREN ( aliasList | columnNameTypeList ) RPAREN )
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:15: LPAREN ( aliasList | columnNameTypeList ) RPAREN
                            {
                            LPAREN786=(Token)input.LT(1);
                            match(input,LPAREN,FOLLOW_LPAREN_in_trfmClause12582); 
                            stream_LPAREN.add(LPAREN786);

                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:22: ( aliasList | columnNameTypeList )
                            int alt237=2;
                            int LA237_0 = input.LA(1);

                            if ( (LA237_0==Identifier) ) {
                                int LA237_1 = input.LA(2);

                                if ( ((LA237_1>=RPAREN && LA237_1<=COMMA)) ) {
                                    alt237=1;
                                }
                                else if ( (LA237_1==KW_MAP||(LA237_1>=KW_TINYINT && LA237_1<=KW_ARRAY)||(LA237_1>=KW_STRUCT && LA237_1<=KW_UNIONTYPE)) ) {
                                    alt237=2;
                                }
                                else {
                                    NoViableAltException nvae =
                                        new NoViableAltException("1725:22: ( aliasList | columnNameTypeList )", 237, 1, input);

                                    throw nvae;
                                }
                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1725:22: ( aliasList | columnNameTypeList )", 237, 0, input);

                                throw nvae;
                            }
                            switch (alt237) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:23: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause12585);
                                    aliasList787=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList787.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:35: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause12589);
                                    columnNameTypeList788=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList788.getTree());

                                    }
                                    break;

                            }

                            RPAREN789=(Token)input.LT(1);
                            match(input,RPAREN,FOLLOW_RPAREN_in_trfmClause12592); 
                            stream_RPAREN.add(RPAREN789);


                            }


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:65: ( aliasList | columnNameTypeList )
                            {
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:65: ( aliasList | columnNameTypeList )
                            int alt238=2;
                            int LA238_0 = input.LA(1);

                            if ( (LA238_0==Identifier) ) {
                                switch ( input.LA(2) ) {
                                case EOF:
                                case KW_FROM:
                                case RPAREN:
                                case COMMA:
                                case KW_SELECT:
                                case KW_GROUP:
                                case KW_RECORDREADER:
                                case KW_ROW:
                                case KW_UNION:
                                case KW_INSERT:
                                case KW_LIMIT:
                                case KW_REDUCE:
                                case KW_WHERE:
                                case KW_HAVING:
                                case KW_ORDER:
                                case KW_CLUSTER:
                                case KW_DISTRIBUTE:
                                case KW_SORT:
                                    {
                                    alt238=1;
                                    }
                                    break;
                                case KW_MAP:
                                    {
                                    int LA238_19 = input.LA(3);

                                    if ( (LA238_19==LESSTHAN) ) {
                                        alt238=2;
                                    }
                                    else if ( (LA238_19==StringLiteral||LA238_19==KW_IF||LA238_19==KW_NOT||LA238_19==Identifier||LA238_19==LPAREN||LA238_19==Number||LA238_19==KW_MAP||LA238_19==KW_ARRAY||(LA238_19>=KW_STRUCT && LA238_19<=KW_UNIONTYPE)||(LA238_19>=STAR && LA238_19<=PLUS)||(LA238_19>=KW_CAST && LA238_19<=KW_CASE)||(LA238_19>=BigintLiteral && LA238_19<=CharSetName)||LA238_19==KW_NULL||(LA238_19>=MINUS && LA238_19<=TILDE)||(LA238_19>=KW_TRUE && LA238_19<=KW_FALSE)) ) {
                                        alt238=1;
                                    }
                                    else {
                                        NoViableAltException nvae =
                                            new NoViableAltException("1725:65: ( aliasList | columnNameTypeList )", 238, 19, input);

                                        throw nvae;
                                    }
                                    }
                                    break;
                                case KW_TINYINT:
                                case KW_SMALLINT:
                                case KW_INT:
                                case KW_BIGINT:
                                case KW_BOOLEAN:
                                case KW_FLOAT:
                                case KW_DOUBLE:
                                case KW_DATE:
                                case KW_DATETIME:
                                case KW_TIMESTAMP:
                                case KW_STRING:
                                case KW_BINARY:
                                case KW_ARRAY:
                                case KW_STRUCT:
                                case KW_UNIONTYPE:
                                    {
                                    alt238=2;
                                    }
                                    break;
                                default:
                                    NoViableAltException nvae =
                                        new NoViableAltException("1725:65: ( aliasList | columnNameTypeList )", 238, 1, input);

                                    throw nvae;
                                }

                            }
                            else {
                                NoViableAltException nvae =
                                    new NoViableAltException("1725:65: ( aliasList | columnNameTypeList )", 238, 0, input);

                                throw nvae;
                            }
                            switch (alt238) {
                                case 1 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:66: aliasList
                                    {
                                    pushFollow(FOLLOW_aliasList_in_trfmClause12598);
                                    aliasList790=aliasList();
                                    _fsp--;

                                    stream_aliasList.add(aliasList790.getTree());

                                    }
                                    break;
                                case 2 :
                                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1725:78: columnNameTypeList
                                    {
                                    pushFollow(FOLLOW_columnNameTypeList_in_trfmClause12602);
                                    columnNameTypeList791=columnNameTypeList();
                                    _fsp--;

                                    stream_columnNameTypeList.add(columnNameTypeList791.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_rowFormat_in_trfmClause12614);
            outSerde=rowFormat();
            _fsp--;

            stream_rowFormat.add(outSerde.getTree());
            pushFollow(FOLLOW_recordReader_in_trfmClause12618);
            outRec=recordReader();
            _fsp--;

            stream_recordReader.add(outRec.getTree());

            // AST REWRITE
            // elements: outRec, inSerde, inRec, selectExpressionList, outSerde, columnNameTypeList, aliasList, StringLiteral
            // token labels: 
            // rule labels: retval, inRec, inSerde, outRec, outSerde
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_inRec=new RewriteRuleSubtreeStream(adaptor,"token inRec",inRec!=null?inRec.tree:null);
            RewriteRuleSubtreeStream stream_inSerde=new RewriteRuleSubtreeStream(adaptor,"token inSerde",inSerde!=null?inSerde.tree:null);
            RewriteRuleSubtreeStream stream_outRec=new RewriteRuleSubtreeStream(adaptor,"token outRec",outRec!=null?outRec.tree:null);
            RewriteRuleSubtreeStream stream_outSerde=new RewriteRuleSubtreeStream(adaptor,"token outSerde",outSerde!=null?outSerde.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1727:5: -> ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1727:8: ^( TOK_TRANSFORM selectExpressionList $inSerde $inRec StringLiteral $outSerde $outRec ( aliasList )? ( columnNameTypeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TRANSFORM, "TOK_TRANSFORM"), root_1);

                adaptor.addChild(root_1, stream_selectExpressionList.next());
                adaptor.addChild(root_1, stream_inSerde.next());
                adaptor.addChild(root_1, stream_inRec.next());
                adaptor.addChild(root_1, stream_StringLiteral.next());
                adaptor.addChild(root_1, stream_outSerde.next());
                adaptor.addChild(root_1, stream_outRec.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1727:93: ( aliasList )?
                if ( stream_aliasList.hasNext() ) {
                    adaptor.addChild(root_1, stream_aliasList.next());

                }
                stream_aliasList.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1727:104: ( columnNameTypeList )?
                if ( stream_columnNameTypeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnNameTypeList.next());

                }
                stream_columnNameTypeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end trfmClause

    public static class selectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1730:1: selectExpression : ( expression | tableAllColumns );
    public final selectExpression_return selectExpression() throws RecognitionException {
        selectExpression_return retval = new selectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression792 = null;

        tableAllColumns_return tableAllColumns793 = null;



         msgs.push("select expression"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1733:5: ( expression | tableAllColumns )
            int alt241=2;
            switch ( input.LA(1) ) {
            case StringLiteral:
            case KW_IF:
            case KW_NOT:
            case LPAREN:
            case Number:
            case KW_MAP:
            case KW_ARRAY:
            case KW_STRUCT:
            case KW_UNIONTYPE:
            case PLUS:
            case KW_CAST:
            case KW_CASE:
            case BigintLiteral:
            case SmallintLiteral:
            case TinyintLiteral:
            case CharSetName:
            case KW_NULL:
            case MINUS:
            case TILDE:
            case KW_TRUE:
            case KW_FALSE:
                {
                alt241=1;
                }
                break;
            case Identifier:
                {
                int LA241_12 = input.LA(2);

                if ( (LA241_12==DOT) ) {
                    int LA241_18 = input.LA(3);

                    if ( (LA241_18==Identifier) ) {
                        alt241=1;
                    }
                    else if ( (LA241_18==STAR) ) {
                        alt241=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1730:1: selectExpression : ( expression | tableAllColumns );", 241, 18, input);

                        throw nvae;
                    }
                }
                else if ( (LA241_12==EOF||LA241_12==KW_FROM||LA241_12==KW_NOT||LA241_12==KW_AS||LA241_12==KW_OR||LA241_12==Identifier||(LA241_12>=LPAREN && LA241_12<=COMMA)||LA241_12==KW_LIKE||LA241_12==KW_IN||LA241_12==EQUAL||LA241_12==KW_SELECT||LA241_12==KW_GROUP||(LA241_12>=KW_RECORDWRITER && LA241_12<=KW_ROW)||LA241_12==KW_MAP||(LA241_12>=LESSTHAN && LA241_12<=GREATERTHAN)||(LA241_12>=KW_UNION && LA241_12<=KW_INSERT)||LA241_12==KW_LIMIT||(LA241_12>=KW_USING && LA241_12<=PLUS)||LA241_12==KW_REDUCE||LA241_12==KW_WHERE||(LA241_12>=KW_HAVING && LA241_12<=KW_SORT)||LA241_12==LSQUARE||LA241_12==MINUS||(LA241_12>=KW_IS && LA241_12<=KW_AND)) ) {
                    alt241=1;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1730:1: selectExpression : ( expression | tableAllColumns );", 241, 12, input);

                    throw nvae;
                }
                }
                break;
            case STAR:
                {
                alt241=2;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1730:1: selectExpression : ( expression | tableAllColumns );", 241, 0, input);

                throw nvae;
            }

            switch (alt241) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1734:5: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_selectExpression12681);
                    expression792=expression();
                    _fsp--;

                    adaptor.addChild(root_0, expression792.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1734:18: tableAllColumns
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableAllColumns_in_selectExpression12685);
                    tableAllColumns793=tableAllColumns();
                    _fsp--;

                    adaptor.addChild(root_0, tableAllColumns793.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectExpression

    public static class selectExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start selectExpressionList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1737:1: selectExpressionList : selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) ;
    public final selectExpressionList_return selectExpressionList() throws RecognitionException {
        selectExpressionList_return retval = new selectExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA795=null;
        selectExpression_return selectExpression794 = null;

        selectExpression_return selectExpression796 = null;


        CommonTree COMMA795_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_selectExpression=new RewriteRuleSubtreeStream(adaptor,"rule selectExpression");
         msgs.push("select expression list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1740:5: ( selectExpression ( COMMA selectExpression )* -> ^( TOK_EXPLIST ( selectExpression )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1741:5: selectExpression ( COMMA selectExpression )*
            {
            pushFollow(FOLLOW_selectExpression_in_selectExpressionList12716);
            selectExpression794=selectExpression();
            _fsp--;

            stream_selectExpression.add(selectExpression794.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1741:22: ( COMMA selectExpression )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==COMMA) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1741:23: COMMA selectExpression
            	    {
            	    COMMA795=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_selectExpressionList12719); 
            	    stream_COMMA.add(COMMA795);

            	    pushFollow(FOLLOW_selectExpression_in_selectExpressionList12721);
            	    selectExpression796=selectExpression();
            	    _fsp--;

            	    stream_selectExpression.add(selectExpression796.getTree());

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            // AST REWRITE
            // elements: selectExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1741:48: -> ^( TOK_EXPLIST ( selectExpression )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1741:51: ^( TOK_EXPLIST ( selectExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                if ( !(stream_selectExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_selectExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_selectExpression.next());

                }
                stream_selectExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end selectExpressionList

    public static class tableAllColumns_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableAllColumns
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1747:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) );
    public final tableAllColumns_return tableAllColumns() throws RecognitionException {
        tableAllColumns_return retval = new tableAllColumns_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR797=null;
        Token DOT799=null;
        Token STAR800=null;
        tableName_return tableName798 = null;


        CommonTree STAR797_tree=null;
        CommonTree DOT799_tree=null;
        CommonTree STAR800_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:5: ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) )
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==STAR) ) {
                alt243=1;
            }
            else if ( (LA243_0==Identifier) ) {
                alt243=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1747:1: tableAllColumns : ( STAR -> ^( TOK_ALLCOLREF ) | tableName DOT STAR -> ^( TOK_ALLCOLREF tableName ) );", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1748:7: STAR
                    {
                    STAR797=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_tableAllColumns12752); 
                    stream_STAR.add(STAR797);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1749:9: -> ^( TOK_ALLCOLREF )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1749:12: ^( TOK_ALLCOLREF )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1750:7: tableName DOT STAR
                    {
                    pushFollow(FOLLOW_tableName_in_tableAllColumns12774);
                    tableName798=tableName();
                    _fsp--;

                    stream_tableName.add(tableName798.getTree());
                    DOT799=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_tableAllColumns12776); 
                    stream_DOT.add(DOT799);

                    STAR800=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_tableAllColumns12778); 
                    stream_STAR.add(STAR800);


                    // AST REWRITE
                    // elements: tableName
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1751:9: -> ^( TOK_ALLCOLREF tableName )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1751:12: ^( TOK_ALLCOLREF tableName )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALLCOLREF, "TOK_ALLCOLREF"), root_1);

                        adaptor.addChild(root_1, stream_tableName.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableAllColumns

    public static class tableOrColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableOrColumn
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1755:1: tableOrColumn : Identifier -> ^( TOK_TABLE_OR_COL Identifier ) ;
    public final tableOrColumn_return tableOrColumn() throws RecognitionException {
        tableOrColumn_return retval = new tableOrColumn_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier801=null;

        CommonTree Identifier801_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("table or column identifier"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1758:5: ( Identifier -> ^( TOK_TABLE_OR_COL Identifier ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1759:5: Identifier
            {
            Identifier801=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableOrColumn12826); 
            stream_Identifier.add(Identifier801);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1759:16: -> ^( TOK_TABLE_OR_COL Identifier )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1759:19: ^( TOK_TABLE_OR_COL Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLE_OR_COL, "TOK_TABLE_OR_COL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableOrColumn

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressionList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1762:1: expressionList : expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) ;
    public final expressionList_return expressionList() throws RecognitionException {
        expressionList_return retval = new expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA803=null;
        expression_return expression802 = null;

        expression_return expression804 = null;


        CommonTree COMMA803_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("expression list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1765:5: ( expression ( COMMA expression )* -> ^( TOK_EXPLIST ( expression )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1766:5: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList12865);
            expression802=expression();
            _fsp--;

            stream_expression.add(expression802.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1766:16: ( COMMA expression )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==COMMA) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1766:17: COMMA expression
            	    {
            	    COMMA803=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_expressionList12868); 
            	    stream_COMMA.add(COMMA803);

            	    pushFollow(FOLLOW_expression_in_expressionList12870);
            	    expression804=expression();
            	    _fsp--;

            	    stream_expression.add(expression804.getTree());

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1766:36: -> ^( TOK_EXPLIST ( expression )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1766:39: ^( TOK_EXPLIST ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expressionList

    public static class aliasList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start aliasList
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1769:1: aliasList : Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) ;
    public final aliasList_return aliasList() throws RecognitionException {
        aliasList_return retval = new aliasList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier805=null;
        Token COMMA806=null;
        Token Identifier807=null;

        CommonTree Identifier805_tree=null;
        CommonTree COMMA806_tree=null;
        CommonTree Identifier807_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("alias list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1772:5: ( Identifier ( COMMA Identifier )* -> ^( TOK_ALIASLIST ( Identifier )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1773:5: Identifier ( COMMA Identifier )*
            {
            Identifier805=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_aliasList12912); 
            stream_Identifier.add(Identifier805);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1773:16: ( COMMA Identifier )*
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==COMMA) ) {
                    alt245=1;
                }


                switch (alt245) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1773:17: COMMA Identifier
            	    {
            	    COMMA806=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_aliasList12915); 
            	    stream_COMMA.add(COMMA806);

            	    Identifier807=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_aliasList12917); 
            	    stream_Identifier.add(Identifier807);


            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1773:36: -> ^( TOK_ALIASLIST ( Identifier )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1773:39: ^( TOK_ALIASLIST ( Identifier )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ALIASLIST, "TOK_ALIASLIST"), root_1);

                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_Identifier.next());

                }
                stream_Identifier.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end aliasList

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fromClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1778:1: fromClause : KW_FROM joinSource -> ^( TOK_FROM joinSource ) ;
    public final fromClause_return fromClause() throws RecognitionException {
        fromClause_return retval = new fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_FROM808=null;
        joinSource_return joinSource809 = null;


        CommonTree KW_FROM808_tree=null;
        RewriteRuleTokenStream stream_KW_FROM=new RewriteRuleTokenStream(adaptor,"token KW_FROM");
        RewriteRuleSubtreeStream stream_joinSource=new RewriteRuleSubtreeStream(adaptor,"rule joinSource");
         msgs.push("from clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1781:5: ( KW_FROM joinSource -> ^( TOK_FROM joinSource ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1782:5: KW_FROM joinSource
            {
            KW_FROM808=(Token)input.LT(1);
            match(input,KW_FROM,FOLLOW_KW_FROM_in_fromClause12961); 
            stream_KW_FROM.add(KW_FROM808);

            pushFollow(FOLLOW_joinSource_in_fromClause12963);
            joinSource809=joinSource();
            _fsp--;

            stream_joinSource.add(joinSource809.getTree());

            // AST REWRITE
            // elements: joinSource
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1782:24: -> ^( TOK_FROM joinSource )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1782:27: ^( TOK_FROM joinSource )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FROM, "TOK_FROM"), root_1);

                adaptor.addChild(root_1, stream_joinSource.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fromClause

    public static class joinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start joinSource
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1785:1: joinSource : ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ );
    public final joinSource_return joinSource() throws RecognitionException {
        joinSource_return retval = new joinSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ON813=null;
        Token COMMA817=null;
        fromSource_return fromSource810 = null;

        joinToken_return joinToken811 = null;

        fromSource_return fromSource812 = null;

        expression_return expression814 = null;

        uniqueJoinToken_return uniqueJoinToken815 = null;

        uniqueJoinSource_return uniqueJoinSource816 = null;

        uniqueJoinSource_return uniqueJoinSource818 = null;


        CommonTree KW_ON813_tree=null;
        CommonTree COMMA817_tree=null;

         msgs.push("join source"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1788:5: ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ )
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( (LA249_0==Identifier||LA249_0==LPAREN) ) {
                alt249=1;
            }
            else if ( (LA249_0==KW_UNIQUEJOIN) ) {
                alt249=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1785:1: joinSource : ( fromSource ( joinToken fromSource ( KW_ON expression )? )* | uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+ );", 249, 0, input);

                throw nvae;
            }
            switch (alt249) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1788:7: fromSource ( joinToken fromSource ( KW_ON expression )? )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_fromSource_in_joinSource12998);
                    fromSource810=fromSource();
                    _fsp--;

                    adaptor.addChild(root_0, fromSource810.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1788:18: ( joinToken fromSource ( KW_ON expression )? )*
                    loop247:
                    do {
                        int alt247=2;
                        int LA247_0 = input.LA(1);

                        if ( (LA247_0==Identifier||(LA247_0>=KW_JOIN && LA247_0<=KW_LEFT)||(LA247_0>=KW_RIGHT && LA247_0<=KW_FULL)) ) {
                            alt247=1;
                        }


                        switch (alt247) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1788:20: joinToken fromSource ( KW_ON expression )?
                    	    {
                    	    pushFollow(FOLLOW_joinToken_in_joinSource13002);
                    	    joinToken811=joinToken();
                    	    _fsp--;
                    	    
                    	    
                    	    root_0 = (CommonTree)adaptor.becomeRoot(joinToken811.getTree(), root_0);
                    	    pushFollow(FOLLOW_fromSource_in_joinSource13005);
                    	    fromSource812=fromSource();
                    	    _fsp--;

                    	    adaptor.addChild(root_0, fromSource812.getTree());
                    	    
                    	    adaptor.setTokenBoundaries(joinToken811.getTree(), null, input.LT(-1));
                    	    
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1788:42: ( KW_ON expression )?
                    	    int alt246=2;
                    	    int LA246_0 = input.LA(1);

                    	    if ( (LA246_0==KW_ON) ) {
                    	        alt246=1;
                    	    }
                    	    switch (alt246) {
                    	        case 1 :
                    	            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1788:43: KW_ON expression
                    	            {
                    	            KW_ON813=(Token)input.LT(1);
                    	            match(input,KW_ON,FOLLOW_KW_ON_in_joinSource13008); 
                    	            pushFollow(FOLLOW_expression_in_joinSource13011);
                    	            expression814=expression();
                    	            _fsp--;

                    	            adaptor.addChild(root_0, expression814.getTree());
                    	            adaptor.setTokenBoundaries(joinToken811.getTree(), null, input.LT(-1));
                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop247;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1789:7: uniqueJoinToken uniqueJoinSource ( COMMA uniqueJoinSource )+
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_uniqueJoinToken_in_joinSource13024);
                    uniqueJoinToken815=uniqueJoinToken();
                    _fsp--;

                    root_0 = (CommonTree)adaptor.becomeRoot(uniqueJoinToken815.getTree(), root_0);
                    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource13027);
                    uniqueJoinSource816=uniqueJoinSource();
                    _fsp--;

                    adaptor.addChild(root_0, uniqueJoinSource816.getTree());
                    adaptor.setTokenBoundaries(uniqueJoinToken815.getTree(), null, input.LT(-1));
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1789:41: ( COMMA uniqueJoinSource )+
                    int cnt248=0;
                    loop248:
                    do {
                        int alt248=2;
                        int LA248_0 = input.LA(1);

                        if ( (LA248_0==COMMA) ) {
                            alt248=1;
                        }


                        switch (alt248) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1789:42: COMMA uniqueJoinSource
                    	    {
                    	    COMMA817=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_joinSource13030); 
                    	    pushFollow(FOLLOW_uniqueJoinSource_in_joinSource13033);
                    	    uniqueJoinSource818=uniqueJoinSource();
                    	    _fsp--;

                    	    adaptor.addChild(root_0, uniqueJoinSource818.getTree());
                    	    adaptor.setTokenBoundaries(uniqueJoinToken815.getTree(), null, input.LT(-1));
                    	    }
                    	    break;

                    	default :
                    	    if ( cnt248 >= 1 ) break loop248;
                                EarlyExitException eee =
                                    new EarlyExitException(248, input);
                                throw eee;
                        }
                        cnt248++;
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end joinSource

    public static class uniqueJoinSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinSource
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1792:1: uniqueJoinSource : ( KW_PRESERVE )? fromSource uniqueJoinExpr ;
    public final uniqueJoinSource_return uniqueJoinSource() throws RecognitionException {
        uniqueJoinSource_return retval = new uniqueJoinSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PRESERVE819=null;
        fromSource_return fromSource820 = null;

        uniqueJoinExpr_return uniqueJoinExpr821 = null;


        CommonTree KW_PRESERVE819_tree=null;

         msgs.push("join source"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1795:5: ( ( KW_PRESERVE )? fromSource uniqueJoinExpr )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1795:7: ( KW_PRESERVE )? fromSource uniqueJoinExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1795:7: ( KW_PRESERVE )?
            int alt250=2;
            int LA250_0 = input.LA(1);

            if ( (LA250_0==KW_PRESERVE) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1795:7: KW_PRESERVE
                    {
                    KW_PRESERVE819=(Token)input.LT(1);
                    match(input,KW_PRESERVE,FOLLOW_KW_PRESERVE_in_uniqueJoinSource13062); 
                    KW_PRESERVE819_tree = (CommonTree)adaptor.create(KW_PRESERVE819);
                    adaptor.addChild(root_0, KW_PRESERVE819_tree);


                    }
                    break;

            }

            pushFollow(FOLLOW_fromSource_in_uniqueJoinSource13065);
            fromSource820=fromSource();
            _fsp--;

            adaptor.addChild(root_0, fromSource820.getTree());
            pushFollow(FOLLOW_uniqueJoinExpr_in_uniqueJoinSource13067);
            uniqueJoinExpr821=uniqueJoinExpr();
            _fsp--;

            adaptor.addChild(root_0, uniqueJoinExpr821.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinSource

    public static class uniqueJoinExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinExpr
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1798:1: uniqueJoinExpr : LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) ;
    public final uniqueJoinExpr_return uniqueJoinExpr() throws RecognitionException {
        uniqueJoinExpr_return retval = new uniqueJoinExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN822=null;
        Token COMMA823=null;
        Token RPAREN824=null;
        List list_e1=null;
        RuleReturnScope e1 = null;
        CommonTree LPAREN822_tree=null;
        CommonTree COMMA823_tree=null;
        CommonTree RPAREN824_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("unique join expression list"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:5: ( LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN -> ^( TOK_EXPLIST ( $e1)* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:7: LPAREN e1+= expression ( COMMA e1+= expression )* RPAREN
            {
            LPAREN822=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_uniqueJoinExpr13094); 
            stream_LPAREN.add(LPAREN822);

            pushFollow(FOLLOW_expression_in_uniqueJoinExpr13098);
            e1=expression();
            _fsp--;

            stream_expression.add(e1.getTree());
            if (list_e1==null) list_e1=new ArrayList();
            list_e1.add(e1);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:29: ( COMMA e1+= expression )*
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==COMMA) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1801:30: COMMA e1+= expression
            	    {
            	    COMMA823=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_uniqueJoinExpr13101); 
            	    stream_COMMA.add(COMMA823);

            	    pushFollow(FOLLOW_expression_in_uniqueJoinExpr13105);
            	    e1=expression();
            	    _fsp--;

            	    stream_expression.add(e1.getTree());
            	    if (list_e1==null) list_e1=new ArrayList();
            	    list_e1.add(e1);


            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);

            RPAREN824=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_uniqueJoinExpr13109); 
            stream_RPAREN.add(RPAREN824);


            // AST REWRITE
            // elements: e1
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: e1
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"token e1",list_e1);
            root_0 = (CommonTree)adaptor.nil();
            // 1802:7: -> ^( TOK_EXPLIST ( $e1)* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1802:10: ^( TOK_EXPLIST ( $e1)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_EXPLIST, "TOK_EXPLIST"), root_1);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1802:24: ( $e1)*
                while ( stream_e1.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_e1.next()).getTree());

                }
                stream_e1.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinExpr

    public static class uniqueJoinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start uniqueJoinToken
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1805:1: uniqueJoinToken : KW_UNIQUEJOIN -> TOK_UNIQUEJOIN ;
    public final uniqueJoinToken_return uniqueJoinToken() throws RecognitionException {
        uniqueJoinToken_return retval = new uniqueJoinToken_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_UNIQUEJOIN825=null;

        CommonTree KW_UNIQUEJOIN825_tree=null;
        RewriteRuleTokenStream stream_KW_UNIQUEJOIN=new RewriteRuleTokenStream(adaptor,"token KW_UNIQUEJOIN");

         msgs.push("unique join"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:5: ( KW_UNIQUEJOIN -> TOK_UNIQUEJOIN )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1808:7: KW_UNIQUEJOIN
            {
            KW_UNIQUEJOIN825=(Token)input.LT(1);
            match(input,KW_UNIQUEJOIN,FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken13152); 
            stream_KW_UNIQUEJOIN.add(KW_UNIQUEJOIN825);


            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1808:21: -> TOK_UNIQUEJOIN
            {
                adaptor.addChild(root_0, adaptor.create(TOK_UNIQUEJOIN, "TOK_UNIQUEJOIN"));

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end uniqueJoinToken

    public static class joinToken_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start joinToken
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1810:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_CROSS KW_JOIN -> TOK_CROSSJOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );
    public final joinToken_return joinToken() throws RecognitionException {
        joinToken_return retval = new joinToken_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_JOIN826=null;
        Token KW_JOIN828=null;
        Token KW_CROSS829=null;
        Token KW_JOIN830=null;
        Token KW_LEFT831=null;
        Token KW_OUTER832=null;
        Token KW_JOIN833=null;
        Token KW_RIGHT834=null;
        Token KW_OUTER835=null;
        Token KW_JOIN836=null;
        Token KW_FULL837=null;
        Token KW_OUTER838=null;
        Token KW_JOIN839=null;
        Token KW_LEFT840=null;
        Token KW_SEMI841=null;
        Token KW_JOIN842=null;
        kwInner_return kwInner827 = null;


        CommonTree KW_JOIN826_tree=null;
        CommonTree KW_JOIN828_tree=null;
        CommonTree KW_CROSS829_tree=null;
        CommonTree KW_JOIN830_tree=null;
        CommonTree KW_LEFT831_tree=null;
        CommonTree KW_OUTER832_tree=null;
        CommonTree KW_JOIN833_tree=null;
        CommonTree KW_RIGHT834_tree=null;
        CommonTree KW_OUTER835_tree=null;
        CommonTree KW_JOIN836_tree=null;
        CommonTree KW_FULL837_tree=null;
        CommonTree KW_OUTER838_tree=null;
        CommonTree KW_JOIN839_tree=null;
        CommonTree KW_LEFT840_tree=null;
        CommonTree KW_SEMI841_tree=null;
        CommonTree KW_JOIN842_tree=null;
        RewriteRuleTokenStream stream_KW_RIGHT=new RewriteRuleTokenStream(adaptor,"token KW_RIGHT");
        RewriteRuleTokenStream stream_KW_OUTER=new RewriteRuleTokenStream(adaptor,"token KW_OUTER");
        RewriteRuleTokenStream stream_KW_JOIN=new RewriteRuleTokenStream(adaptor,"token KW_JOIN");
        RewriteRuleTokenStream stream_KW_LEFT=new RewriteRuleTokenStream(adaptor,"token KW_LEFT");
        RewriteRuleTokenStream stream_KW_CROSS=new RewriteRuleTokenStream(adaptor,"token KW_CROSS");
        RewriteRuleTokenStream stream_KW_SEMI=new RewriteRuleTokenStream(adaptor,"token KW_SEMI");
        RewriteRuleTokenStream stream_KW_FULL=new RewriteRuleTokenStream(adaptor,"token KW_FULL");
        RewriteRuleSubtreeStream stream_kwInner=new RewriteRuleSubtreeStream(adaptor,"rule kwInner");
         msgs.push("join type specifier"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1813:5: ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_CROSS KW_JOIN -> TOK_CROSSJOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN )
            int alt252=7;
            switch ( input.LA(1) ) {
            case KW_JOIN:
                {
                alt252=1;
                }
                break;
            case Identifier:
                {
                alt252=2;
                }
                break;
            case KW_CROSS:
                {
                alt252=3;
                }
                break;
            case KW_LEFT:
                {
                int LA252_4 = input.LA(2);

                if ( (LA252_4==KW_OUTER) ) {
                    alt252=4;
                }
                else if ( (LA252_4==KW_SEMI) ) {
                    alt252=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1810:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_CROSS KW_JOIN -> TOK_CROSSJOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );", 252, 4, input);

                    throw nvae;
                }
                }
                break;
            case KW_RIGHT:
                {
                alt252=5;
                }
                break;
            case KW_FULL:
                {
                alt252=6;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("1810:1: joinToken : ( KW_JOIN -> TOK_JOIN | kwInner KW_JOIN -> TOK_JOIN | KW_CROSS KW_JOIN -> TOK_CROSSJOIN | KW_LEFT KW_OUTER KW_JOIN -> TOK_LEFTOUTERJOIN | KW_RIGHT KW_OUTER KW_JOIN -> TOK_RIGHTOUTERJOIN | KW_FULL KW_OUTER KW_JOIN -> TOK_FULLOUTERJOIN | KW_LEFT KW_SEMI KW_JOIN -> TOK_LEFTSEMIJOIN );", 252, 0, input);

                throw nvae;
            }

            switch (alt252) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1814:7: KW_JOIN
                    {
                    KW_JOIN826=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken13184); 
                    stream_KW_JOIN.add(KW_JOIN826);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1814:35: -> TOK_JOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_JOIN, "TOK_JOIN"));

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1815:7: kwInner KW_JOIN
                    {
                    pushFollow(FOLLOW_kwInner_in_joinToken13216);
                    kwInner827=kwInner();
                    _fsp--;

                    stream_kwInner.add(kwInner827.getTree());
                    KW_JOIN828=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken13219); 
                    stream_KW_JOIN.add(KW_JOIN828);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1815:35: -> TOK_JOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_JOIN, "TOK_JOIN"));

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1816:7: KW_CROSS KW_JOIN
                    {
                    KW_CROSS829=(Token)input.LT(1);
                    match(input,KW_CROSS,FOLLOW_KW_CROSS_in_joinToken13242); 
                    stream_KW_CROSS.add(KW_CROSS829);

                    KW_JOIN830=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken13244); 
                    stream_KW_JOIN.add(KW_JOIN830);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1816:35: -> TOK_CROSSJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_CROSSJOIN, "TOK_CROSSJOIN"));

                    }



                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1817:7: KW_LEFT KW_OUTER KW_JOIN
                    {
                    KW_LEFT831=(Token)input.LT(1);
                    match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken13267); 
                    stream_KW_LEFT.add(KW_LEFT831);

                    KW_OUTER832=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken13270); 
                    stream_KW_OUTER.add(KW_OUTER832);

                    KW_JOIN833=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken13272); 
                    stream_KW_JOIN.add(KW_JOIN833);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1817:35: -> TOK_LEFTOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_LEFTOUTERJOIN, "TOK_LEFTOUTERJOIN"));

                    }



                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1818:7: KW_RIGHT KW_OUTER KW_JOIN
                    {
                    KW_RIGHT834=(Token)input.LT(1);
                    match(input,KW_RIGHT,FOLLOW_KW_RIGHT_in_joinToken13286); 
                    stream_KW_RIGHT.add(KW_RIGHT834);

                    KW_OUTER835=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken13288); 
                    stream_KW_OUTER.add(KW_OUTER835);

                    KW_JOIN836=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken13290); 
                    stream_KW_JOIN.add(KW_JOIN836);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1818:35: -> TOK_RIGHTOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_RIGHTOUTERJOIN, "TOK_RIGHTOUTERJOIN"));

                    }



                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1819:7: KW_FULL KW_OUTER KW_JOIN
                    {
                    KW_FULL837=(Token)input.LT(1);
                    match(input,KW_FULL,FOLLOW_KW_FULL_in_joinToken13304); 
                    stream_KW_FULL.add(KW_FULL837);

                    KW_OUTER838=(Token)input.LT(1);
                    match(input,KW_OUTER,FOLLOW_KW_OUTER_in_joinToken13307); 
                    stream_KW_OUTER.add(KW_OUTER838);

                    KW_JOIN839=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken13309); 
                    stream_KW_JOIN.add(KW_JOIN839);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1819:35: -> TOK_FULLOUTERJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_FULLOUTERJOIN, "TOK_FULLOUTERJOIN"));

                    }



                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1820:7: KW_LEFT KW_SEMI KW_JOIN
                    {
                    KW_LEFT840=(Token)input.LT(1);
                    match(input,KW_LEFT,FOLLOW_KW_LEFT_in_joinToken13323); 
                    stream_KW_LEFT.add(KW_LEFT840);

                    KW_SEMI841=(Token)input.LT(1);
                    match(input,KW_SEMI,FOLLOW_KW_SEMI_in_joinToken13326); 
                    stream_KW_SEMI.add(KW_SEMI841);

                    KW_JOIN842=(Token)input.LT(1);
                    match(input,KW_JOIN,FOLLOW_KW_JOIN_in_joinToken13329); 
                    stream_KW_JOIN.add(KW_JOIN842);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1820:35: -> TOK_LEFTSEMIJOIN
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_LEFTSEMIJOIN, "TOK_LEFTSEMIJOIN"));

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end joinToken

    public static class lateralView_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start lateralView
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1823:1: lateralView : KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) ;
    public final lateralView_return lateralView() throws RecognitionException {
        lateralView_return retval = new lateralView_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_LATERAL843=null;
        Token KW_VIEW844=null;
        Token KW_AS847=null;
        Token Identifier848=null;
        Token COMMA849=null;
        Token Identifier850=null;
        function_return function845 = null;

        tableAlias_return tableAlias846 = null;


        CommonTree KW_LATERAL843_tree=null;
        CommonTree KW_VIEW844_tree=null;
        CommonTree KW_AS847_tree=null;
        CommonTree Identifier848_tree=null;
        CommonTree COMMA849_tree=null;
        CommonTree Identifier850_tree=null;
        RewriteRuleTokenStream stream_KW_LATERAL=new RewriteRuleTokenStream(adaptor,"token KW_LATERAL");
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_KW_VIEW=new RewriteRuleTokenStream(adaptor,"token KW_VIEW");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableAlias=new RewriteRuleSubtreeStream(adaptor,"rule tableAlias");
        RewriteRuleSubtreeStream stream_function=new RewriteRuleSubtreeStream(adaptor,"rule function");
        msgs.push("lateral view"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1826:2: ( KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )* -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1827:2: KW_LATERAL KW_VIEW function tableAlias KW_AS Identifier ( COMMA Identifier )*
            {
            KW_LATERAL843=(Token)input.LT(1);
            match(input,KW_LATERAL,FOLLOW_KW_LATERAL_in_lateralView13360); 
            stream_KW_LATERAL.add(KW_LATERAL843);

            KW_VIEW844=(Token)input.LT(1);
            match(input,KW_VIEW,FOLLOW_KW_VIEW_in_lateralView13362); 
            stream_KW_VIEW.add(KW_VIEW844);

            pushFollow(FOLLOW_function_in_lateralView13364);
            function845=function();
            _fsp--;

            stream_function.add(function845.getTree());
            pushFollow(FOLLOW_tableAlias_in_lateralView13366);
            tableAlias846=tableAlias();
            _fsp--;

            stream_tableAlias.add(tableAlias846.getTree());
            KW_AS847=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_lateralView13368); 
            stream_KW_AS.add(KW_AS847);

            Identifier848=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_lateralView13370); 
            stream_Identifier.add(Identifier848);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1827:58: ( COMMA Identifier )*
            loop253:
            do {
                int alt253=2;
                int LA253_0 = input.LA(1);

                if ( (LA253_0==COMMA) ) {
                    alt253=1;
                }


                switch (alt253) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1827:59: COMMA Identifier
            	    {
            	    COMMA849=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_lateralView13373); 
            	    stream_COMMA.add(COMMA849);

            	    Identifier850=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_lateralView13375); 
            	    stream_Identifier.add(Identifier850);


            	    }
            	    break;

            	default :
            	    break loop253;
                }
            } while (true);


            // AST REWRITE
            // elements: Identifier, function, tableAlias
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1827:78: -> ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1827:81: ^( TOK_LATERAL_VIEW ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_LATERAL_VIEW, "TOK_LATERAL_VIEW"), root_1);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1827:100: ^( TOK_SELECT ^( TOK_SELEXPR function ( Identifier )+ tableAlias ) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELECT, "TOK_SELECT"), root_2);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1827:113: ^( TOK_SELEXPR function ( Identifier )+ tableAlias )
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SELEXPR, "TOK_SELEXPR"), root_3);

                adaptor.addChild(root_3, stream_function.next());
                if ( !(stream_Identifier.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_Identifier.hasNext() ) {
                    adaptor.addChild(root_3, stream_Identifier.next());

                }
                stream_Identifier.reset();
                adaptor.addChild(root_3, stream_tableAlias.next());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end lateralView

    public static class tableAlias_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableAlias
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1830:1: tableAlias : Identifier -> ^( TOK_TABALIAS Identifier ) ;
    public final tableAlias_return tableAlias() throws RecognitionException {
        tableAlias_return retval = new tableAlias_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier851=null;

        CommonTree Identifier851_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

        msgs.push("table alias"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1833:5: ( Identifier -> ^( TOK_TABALIAS Identifier ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1834:5: Identifier
            {
            Identifier851=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_tableAlias13426); 
            stream_Identifier.add(Identifier851);


            // AST REWRITE
            // elements: Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1834:16: -> ^( TOK_TABALIAS Identifier )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1834:19: ^( TOK_TABALIAS Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABALIAS, "TOK_TABALIAS"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableAlias

    public static class fromSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start fromSource
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1837:1: fromSource : ( tableSource | subQuerySource ) ( lateralView )* ;
    public final fromSource_return fromSource() throws RecognitionException {
        fromSource_return retval = new fromSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tableSource_return tableSource852 = null;

        subQuerySource_return subQuerySource853 = null;

        lateralView_return lateralView854 = null;



         msgs.push("from source"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1840:5: ( ( tableSource | subQuerySource ) ( lateralView )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1841:5: ( tableSource | subQuerySource ) ( lateralView )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1841:5: ( tableSource | subQuerySource )
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( (LA254_0==Identifier) ) {
                alt254=1;
            }
            else if ( (LA254_0==LPAREN) ) {
                alt254=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1841:5: ( tableSource | subQuerySource )", 254, 0, input);

                throw nvae;
            }
            switch (alt254) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1841:6: tableSource
                    {
                    pushFollow(FOLLOW_tableSource_in_fromSource13466);
                    tableSource852=tableSource();
                    _fsp--;

                    adaptor.addChild(root_0, tableSource852.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1841:20: subQuerySource
                    {
                    pushFollow(FOLLOW_subQuerySource_in_fromSource13470);
                    subQuerySource853=subQuerySource();
                    _fsp--;

                    adaptor.addChild(root_0, subQuerySource853.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1841:36: ( lateralView )*
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==KW_LATERAL) ) {
                    alt255=1;
                }


                switch (alt255) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1841:37: lateralView
            	    {
            	    pushFollow(FOLLOW_lateralView_in_fromSource13474);
            	    lateralView854=lateralView();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(lateralView854.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end fromSource

    public static class tableBucketSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableBucketSample
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1844:1: tableBucketSample : KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) ;
    public final tableBucketSample_return tableBucketSample() throws RecognitionException {
        tableBucketSample_return retval = new tableBucketSample_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token numerator=null;
        Token denominator=null;
        Token KW_TABLESAMPLE855=null;
        Token LPAREN856=null;
        Token KW_BUCKET857=null;
        Token KW_OUT858=null;
        Token KW_OF859=null;
        Token KW_ON860=null;
        Token COMMA861=null;
        Token RPAREN862=null;
        List list_expr=null;
        RuleReturnScope expr = null;
        CommonTree numerator_tree=null;
        CommonTree denominator_tree=null;
        CommonTree KW_TABLESAMPLE855_tree=null;
        CommonTree LPAREN856_tree=null;
        CommonTree KW_BUCKET857_tree=null;
        CommonTree KW_OUT858_tree=null;
        CommonTree KW_OF859_tree=null;
        CommonTree KW_ON860_tree=null;
        CommonTree COMMA861_tree=null;
        CommonTree RPAREN862_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_OUT=new RewriteRuleTokenStream(adaptor,"token KW_OUT");
        RewriteRuleTokenStream stream_KW_OF=new RewriteRuleTokenStream(adaptor,"token KW_OF");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_BUCKET=new RewriteRuleTokenStream(adaptor,"token KW_BUCKET");
        RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ON=new RewriteRuleTokenStream(adaptor,"token KW_ON");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("table bucket sample specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1847:5: ( KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:5: KW_TABLESAMPLE LPAREN KW_BUCKET (numerator= Number ) KW_OUT KW_OF (denominator= Number ) ( KW_ON expr+= expression ( COMMA expr+= expression )* )? RPAREN
            {
            KW_TABLESAMPLE855=(Token)input.LT(1);
            match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_tableBucketSample13508); 
            stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE855);

            LPAREN856=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_tableBucketSample13510); 
            stream_LPAREN.add(LPAREN856);

            KW_BUCKET857=(Token)input.LT(1);
            match(input,KW_BUCKET,FOLLOW_KW_BUCKET_in_tableBucketSample13512); 
            stream_KW_BUCKET.add(KW_BUCKET857);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:37: (numerator= Number )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:38: numerator= Number
            {
            numerator=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableBucketSample13517); 
            stream_Number.add(numerator);


            }

            KW_OUT858=(Token)input.LT(1);
            match(input,KW_OUT,FOLLOW_KW_OUT_in_tableBucketSample13520); 
            stream_KW_OUT.add(KW_OUT858);

            KW_OF859=(Token)input.LT(1);
            match(input,KW_OF,FOLLOW_KW_OF_in_tableBucketSample13522); 
            stream_KW_OF.add(KW_OF859);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:69: (denominator= Number )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:70: denominator= Number
            {
            denominator=(Token)input.LT(1);
            match(input,Number,FOLLOW_Number_in_tableBucketSample13527); 
            stream_Number.add(denominator);


            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:90: ( KW_ON expr+= expression ( COMMA expr+= expression )* )?
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==KW_ON) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:91: KW_ON expr+= expression ( COMMA expr+= expression )*
                    {
                    KW_ON860=(Token)input.LT(1);
                    match(input,KW_ON,FOLLOW_KW_ON_in_tableBucketSample13531); 
                    stream_KW_ON.add(KW_ON860);

                    pushFollow(FOLLOW_expression_in_tableBucketSample13535);
                    expr=expression();
                    _fsp--;

                    stream_expression.add(expr.getTree());
                    if (list_expr==null) list_expr=new ArrayList();
                    list_expr.add(expr);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:114: ( COMMA expr+= expression )*
                    loop256:
                    do {
                        int alt256=2;
                        int LA256_0 = input.LA(1);

                        if ( (LA256_0==COMMA) ) {
                            alt256=1;
                        }


                        switch (alt256) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:115: COMMA expr+= expression
                    	    {
                    	    COMMA861=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_tableBucketSample13538); 
                    	    stream_COMMA.add(COMMA861);

                    	    pushFollow(FOLLOW_expression_in_tableBucketSample13542);
                    	    expr=expression();
                    	    _fsp--;

                    	    stream_expression.add(expr.getTree());
                    	    if (list_expr==null) list_expr=new ArrayList();
                    	    list_expr.add(expr);


                    	    }
                    	    break;

                    	default :
                    	    break loop256;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN862=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_tableBucketSample13548); 
            stream_RPAREN.add(RPAREN862);


            // AST REWRITE
            // elements: numerator, expr, denominator
            // token labels: denominator, numerator
            // rule labels: retval
            // token list labels: 
            // rule list labels: expr
            retval.tree = root_0;
            RewriteRuleTokenStream stream_denominator=new RewriteRuleTokenStream(adaptor,"token denominator",denominator);
            RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"token expr",list_expr);
            root_0 = (CommonTree)adaptor.nil();
            // 1848:149: -> ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:152: ^( TOK_TABLEBUCKETSAMPLE $numerator $denominator ( $expr)* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLEBUCKETSAMPLE, "TOK_TABLEBUCKETSAMPLE"), root_1);

                adaptor.addChild(root_1, stream_numerator.next());
                adaptor.addChild(root_1, stream_denominator.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1848:200: ( $expr)*
                while ( stream_expr.hasNext() ) {
                    adaptor.addChild(root_1, ((ParserRuleReturnScope)stream_expr.next()).getTree());

                }
                stream_expr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableBucketSample

    public static class splitSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start splitSample
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1851:1: splitSample : ( KW_TABLESAMPLE LPAREN (numerator= Number ) (percent= KW_PERCENT | KW_ROWS ) RPAREN -> {percent != null}? ^( TOK_TABLESPLITSAMPLE TOK_PERCENT $numerator) -> ^( TOK_TABLESPLITSAMPLE TOK_ROWCOUNT $numerator) | KW_TABLESAMPLE LPAREN (numerator= ByteLengthLiteral ) RPAREN -> ^( TOK_TABLESPLITSAMPLE TOK_LENGTH $numerator) );
    public final splitSample_return splitSample() throws RecognitionException {
        splitSample_return retval = new splitSample_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token numerator=null;
        Token percent=null;
        Token KW_TABLESAMPLE863=null;
        Token LPAREN864=null;
        Token KW_ROWS865=null;
        Token RPAREN866=null;
        Token KW_TABLESAMPLE867=null;
        Token LPAREN868=null;
        Token RPAREN869=null;

        CommonTree numerator_tree=null;
        CommonTree percent_tree=null;
        CommonTree KW_TABLESAMPLE863_tree=null;
        CommonTree LPAREN864_tree=null;
        CommonTree KW_ROWS865_tree=null;
        CommonTree RPAREN866_tree=null;
        CommonTree KW_TABLESAMPLE867_tree=null;
        CommonTree LPAREN868_tree=null;
        CommonTree RPAREN869_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ByteLengthLiteral=new RewriteRuleTokenStream(adaptor,"token ByteLengthLiteral");
        RewriteRuleTokenStream stream_Number=new RewriteRuleTokenStream(adaptor,"token Number");
        RewriteRuleTokenStream stream_KW_ROWS=new RewriteRuleTokenStream(adaptor,"token KW_ROWS");
        RewriteRuleTokenStream stream_KW_TABLESAMPLE=new RewriteRuleTokenStream(adaptor,"token KW_TABLESAMPLE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_PERCENT=new RewriteRuleTokenStream(adaptor,"token KW_PERCENT");

         msgs.push("table split sample specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1854:5: ( KW_TABLESAMPLE LPAREN (numerator= Number ) (percent= KW_PERCENT | KW_ROWS ) RPAREN -> {percent != null}? ^( TOK_TABLESPLITSAMPLE TOK_PERCENT $numerator) -> ^( TOK_TABLESPLITSAMPLE TOK_ROWCOUNT $numerator) | KW_TABLESAMPLE LPAREN (numerator= ByteLengthLiteral ) RPAREN -> ^( TOK_TABLESPLITSAMPLE TOK_LENGTH $numerator) )
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==KW_TABLESAMPLE) ) {
                int LA259_1 = input.LA(2);

                if ( (LA259_1==LPAREN) ) {
                    int LA259_2 = input.LA(3);

                    if ( (LA259_2==Number) ) {
                        alt259=1;
                    }
                    else if ( (LA259_2==ByteLengthLiteral) ) {
                        alt259=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1851:1: splitSample : ( KW_TABLESAMPLE LPAREN (numerator= Number ) (percent= KW_PERCENT | KW_ROWS ) RPAREN -> {percent != null}? ^( TOK_TABLESPLITSAMPLE TOK_PERCENT $numerator) -> ^( TOK_TABLESPLITSAMPLE TOK_ROWCOUNT $numerator) | KW_TABLESAMPLE LPAREN (numerator= ByteLengthLiteral ) RPAREN -> ^( TOK_TABLESPLITSAMPLE TOK_LENGTH $numerator) );", 259, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1851:1: splitSample : ( KW_TABLESAMPLE LPAREN (numerator= Number ) (percent= KW_PERCENT | KW_ROWS ) RPAREN -> {percent != null}? ^( TOK_TABLESPLITSAMPLE TOK_PERCENT $numerator) -> ^( TOK_TABLESPLITSAMPLE TOK_ROWCOUNT $numerator) | KW_TABLESAMPLE LPAREN (numerator= ByteLengthLiteral ) RPAREN -> ^( TOK_TABLESPLITSAMPLE TOK_LENGTH $numerator) );", 259, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1851:1: splitSample : ( KW_TABLESAMPLE LPAREN (numerator= Number ) (percent= KW_PERCENT | KW_ROWS ) RPAREN -> {percent != null}? ^( TOK_TABLESPLITSAMPLE TOK_PERCENT $numerator) -> ^( TOK_TABLESPLITSAMPLE TOK_ROWCOUNT $numerator) | KW_TABLESAMPLE LPAREN (numerator= ByteLengthLiteral ) RPAREN -> ^( TOK_TABLESPLITSAMPLE TOK_LENGTH $numerator) );", 259, 0, input);

                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1855:5: KW_TABLESAMPLE LPAREN (numerator= Number ) (percent= KW_PERCENT | KW_ROWS ) RPAREN
                    {
                    KW_TABLESAMPLE863=(Token)input.LT(1);
                    match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_splitSample13595); 
                    stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE863);

                    LPAREN864=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_splitSample13597); 
                    stream_LPAREN.add(LPAREN864);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1855:28: (numerator= Number )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1855:29: numerator= Number
                    {
                    numerator=(Token)input.LT(1);
                    match(input,Number,FOLLOW_Number_in_splitSample13603); 
                    stream_Number.add(numerator);


                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1855:47: (percent= KW_PERCENT | KW_ROWS )
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==KW_PERCENT) ) {
                        alt258=1;
                    }
                    else if ( (LA258_0==KW_ROWS) ) {
                        alt258=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1855:47: (percent= KW_PERCENT | KW_ROWS )", 258, 0, input);

                        throw nvae;
                    }
                    switch (alt258) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1855:48: percent= KW_PERCENT
                            {
                            percent=(Token)input.LT(1);
                            match(input,KW_PERCENT,FOLLOW_KW_PERCENT_in_splitSample13609); 
                            stream_KW_PERCENT.add(percent);


                            }
                            break;
                        case 2 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1855:67: KW_ROWS
                            {
                            KW_ROWS865=(Token)input.LT(1);
                            match(input,KW_ROWS,FOLLOW_KW_ROWS_in_splitSample13611); 
                            stream_KW_ROWS.add(KW_ROWS865);


                            }
                            break;

                    }

                    RPAREN866=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_splitSample13614); 
                    stream_RPAREN.add(RPAREN866);


                    // AST REWRITE
                    // elements: numerator, numerator
                    // token labels: numerator
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1856:5: -> {percent != null}? ^( TOK_TABLESPLITSAMPLE TOK_PERCENT $numerator)
                    if (percent != null) {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1856:27: ^( TOK_TABLESPLITSAMPLE TOK_PERCENT $numerator)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESPLITSAMPLE, "TOK_TABLESPLITSAMPLE"), root_1);

                        adaptor.addChild(root_1, adaptor.create(TOK_PERCENT, "TOK_PERCENT"));
                        adaptor.addChild(root_1, stream_numerator.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1857:5: -> ^( TOK_TABLESPLITSAMPLE TOK_ROWCOUNT $numerator)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1857:8: ^( TOK_TABLESPLITSAMPLE TOK_ROWCOUNT $numerator)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESPLITSAMPLE, "TOK_TABLESPLITSAMPLE"), root_1);

                        adaptor.addChild(root_1, adaptor.create(TOK_ROWCOUNT, "TOK_ROWCOUNT"));
                        adaptor.addChild(root_1, stream_numerator.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1859:5: KW_TABLESAMPLE LPAREN (numerator= ByteLengthLiteral ) RPAREN
                    {
                    KW_TABLESAMPLE867=(Token)input.LT(1);
                    match(input,KW_TABLESAMPLE,FOLLOW_KW_TABLESAMPLE_in_splitSample13658); 
                    stream_KW_TABLESAMPLE.add(KW_TABLESAMPLE867);

                    LPAREN868=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_splitSample13660); 
                    stream_LPAREN.add(LPAREN868);

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1859:28: (numerator= ByteLengthLiteral )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1859:29: numerator= ByteLengthLiteral
                    {
                    numerator=(Token)input.LT(1);
                    match(input,ByteLengthLiteral,FOLLOW_ByteLengthLiteral_in_splitSample13666); 
                    stream_ByteLengthLiteral.add(numerator);


                    }

                    RPAREN869=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_splitSample13669); 
                    stream_RPAREN.add(RPAREN869);


                    // AST REWRITE
                    // elements: numerator
                    // token labels: numerator
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_numerator=new RewriteRuleTokenStream(adaptor,"token numerator",numerator);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1860:5: -> ^( TOK_TABLESPLITSAMPLE TOK_LENGTH $numerator)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1860:8: ^( TOK_TABLESPLITSAMPLE TOK_LENGTH $numerator)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABLESPLITSAMPLE, "TOK_TABLESPLITSAMPLE"), root_1);

                        adaptor.addChild(root_1, adaptor.create(TOK_LENGTH, "TOK_LENGTH"));
                        adaptor.addChild(root_1, stream_numerator.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end splitSample

    public static class tableSample_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableSample
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1863:1: tableSample : ( tableBucketSample | splitSample );
    public final tableSample_return tableSample() throws RecognitionException {
        tableSample_return retval = new tableSample_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tableBucketSample_return tableBucketSample870 = null;

        splitSample_return splitSample871 = null;



         msgs.push("table sample specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1866:5: ( tableBucketSample | splitSample )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==KW_TABLESAMPLE) ) {
                int LA260_1 = input.LA(2);

                if ( (LA260_1==LPAREN) ) {
                    int LA260_2 = input.LA(3);

                    if ( (LA260_2==KW_BUCKET) ) {
                        alt260=1;
                    }
                    else if ( (LA260_2==Number||LA260_2==ByteLengthLiteral) ) {
                        alt260=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1863:1: tableSample : ( tableBucketSample | splitSample );", 260, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1863:1: tableSample : ( tableBucketSample | splitSample );", 260, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1863:1: tableSample : ( tableBucketSample | splitSample );", 260, 0, input);

                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1867:5: tableBucketSample
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableBucketSample_in_tableSample13715);
                    tableBucketSample870=tableBucketSample();
                    _fsp--;

                    adaptor.addChild(root_0, tableBucketSample870.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1868:5: splitSample
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_splitSample_in_tableSample13723);
                    splitSample871=splitSample();
                    _fsp--;

                    adaptor.addChild(root_0, splitSample871.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableSample

    public static class tableSource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableSource
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1871:1: tableSource : tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) ;
    public final tableSource_return tableSource() throws RecognitionException {
        tableSource_return retval = new tableSource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token alias=null;
        tableName_return tabname = null;

        tableSample_return ts = null;


        CommonTree alias_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_tableSample=new RewriteRuleSubtreeStream(adaptor,"rule tableSample");
         msgs.push("table source"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1874:5: (tabname= tableName (ts= tableSample )? (alias= Identifier )? -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1874:7: tabname= tableName (ts= tableSample )? (alias= Identifier )?
            {
            pushFollow(FOLLOW_tableName_in_tableSource13752);
            tabname=tableName();
            _fsp--;

            stream_tableName.add(tabname.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1874:25: (ts= tableSample )?
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==KW_TABLESAMPLE) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1874:26: ts= tableSample
                    {
                    pushFollow(FOLLOW_tableSample_in_tableSource13757);
                    ts=tableSample();
                    _fsp--;

                    stream_tableSample.add(ts.getTree());

                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1874:43: (alias= Identifier )?
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( (LA262_0==Identifier) ) {
                int LA262_1 = input.LA(2);

                if ( (LA262_1==KW_JOIN) ) {
                    int LA262_25 = input.LA(3);

                    if ( (!(input.LT(1).getText().equalsIgnoreCase("inner"))) ) {
                        alt262=1;
                    }
                }
                else if ( (LA262_1==EOF||LA262_1==Identifier||(LA262_1>=LPAREN && LA262_1<=RPAREN)||LA262_1==KW_ON||LA262_1==KW_SELECT||LA262_1==KW_GROUP||LA262_1==KW_MAP||(LA262_1>=KW_UNION && LA262_1<=KW_INSERT)||LA262_1==KW_LIMIT||LA262_1==KW_REDUCE||(LA262_1>=KW_CROSS && LA262_1<=KW_LEFT)||(LA262_1>=KW_RIGHT && LA262_1<=KW_FULL)||LA262_1==KW_LATERAL||LA262_1==KW_WHERE||(LA262_1>=KW_HAVING && LA262_1<=KW_SORT)) ) {
                    alt262=1;
                }
            }
            switch (alt262) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1874:44: alias= Identifier
                    {
                    alias=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableSource13764); 
                    stream_Identifier.add(alias);


                    }
                    break;

            }


            // AST REWRITE
            // elements: tabname, alias, ts
            // token labels: alias
            // rule labels: retval, ts, tabname
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_alias=new RewriteRuleTokenStream(adaptor,"token alias",alias);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_ts=new RewriteRuleSubtreeStream(adaptor,"token ts",ts!=null?ts.tree:null);
            RewriteRuleSubtreeStream stream_tabname=new RewriteRuleSubtreeStream(adaptor,"token tabname",tabname!=null?tabname.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1875:5: -> ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1875:8: ^( TOK_TABREF $tabname ( $ts)? ( $alias)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABREF, "TOK_TABREF"), root_1);

                adaptor.addChild(root_1, stream_tabname.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1875:30: ( $ts)?
                if ( stream_ts.hasNext() ) {
                    adaptor.addChild(root_1, stream_ts.next());

                }
                stream_ts.reset();
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1875:35: ( $alias)?
                if ( stream_alias.hasNext() ) {
                    adaptor.addChild(root_1, stream_alias.next());

                }
                stream_alias.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableSource

    public static class tableName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1878:1: tableName : (db= Identifier DOT tab= Identifier -> ^( TOK_TABNAME $db $tab) | tab= Identifier -> ^( TOK_TABNAME $tab) );
    public final tableName_return tableName() throws RecognitionException {
        tableName_return retval = new tableName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token db=null;
        Token tab=null;
        Token DOT872=null;

        CommonTree db_tree=null;
        CommonTree tab_tree=null;
        CommonTree DOT872_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("table name"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1881:5: (db= Identifier DOT tab= Identifier -> ^( TOK_TABNAME $db $tab) | tab= Identifier -> ^( TOK_TABNAME $tab) )
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==Identifier) ) {
                int LA263_1 = input.LA(2);

                if ( (LA263_1==DOT) ) {
                    int LA263_2 = input.LA(3);

                    if ( (LA263_2==STAR) ) {
                        alt263=2;
                    }
                    else if ( (LA263_2==Identifier) ) {
                        alt263=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1878:1: tableName : (db= Identifier DOT tab= Identifier -> ^( TOK_TABNAME $db $tab) | tab= Identifier -> ^( TOK_TABNAME $tab) );", 263, 2, input);

                        throw nvae;
                    }
                }
                else if ( (LA263_1==EOF||LA263_1==KW_TO||(LA263_1>=KW_FROM && LA263_1<=KW_IF)||(LA263_1>=KW_STORED && LA263_1<=KW_AS)||LA263_1==Identifier||(LA263_1>=KW_LOCATION && LA263_1<=RPAREN)||(LA263_1>=KW_COMMENT && LA263_1<=KW_LIKE)||LA263_1==KW_ON||LA263_1==KW_IN||LA263_1==KW_TBLPROPERTIES||LA263_1==KW_SKEWED||LA263_1==KW_CLUSTERED||LA263_1==KW_COMPUTE||(LA263_1>=KW_SHARED && LA263_1<=KW_EXCLUSIVE)||LA263_1==KW_SELECT||LA263_1==KW_GROUP||LA263_1==KW_PARTITIONED||LA263_1==KW_ROW||LA263_1==KW_MAP||(LA263_1>=KW_UNION && LA263_1<=KW_INSERT)||LA263_1==KW_LIMIT||LA263_1==KW_REDUCE||(LA263_1>=KW_JOIN && LA263_1<=KW_LEFT)||(LA263_1>=KW_RIGHT && LA263_1<=KW_FULL)||(LA263_1>=KW_LATERAL && LA263_1<=KW_TABLESAMPLE)||LA263_1==KW_WHERE||(LA263_1>=KW_HAVING && LA263_1<=KW_SORT)||LA263_1==KW_PARTITION) ) {
                    alt263=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1878:1: tableName : (db= Identifier DOT tab= Identifier -> ^( TOK_TABNAME $db $tab) | tab= Identifier -> ^( TOK_TABNAME $tab) );", 263, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1878:1: tableName : (db= Identifier DOT tab= Identifier -> ^( TOK_TABNAME $db $tab) | tab= Identifier -> ^( TOK_TABNAME $tab) );", 263, 0, input);

                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1882:5: db= Identifier DOT tab= Identifier
                    {
                    db=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableName13820); 
                    stream_Identifier.add(db);

                    DOT872=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_tableName13822); 
                    stream_DOT.add(DOT872);

                    tab=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableName13826); 
                    stream_Identifier.add(tab);


                    // AST REWRITE
                    // elements: tab, db
                    // token labels: db, tab
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
                    RewriteRuleTokenStream stream_tab=new RewriteRuleTokenStream(adaptor,"token tab",tab);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1883:5: -> ^( TOK_TABNAME $db $tab)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1883:8: ^( TOK_TABNAME $db $tab)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_1);

                        adaptor.addChild(root_1, stream_db.next());
                        adaptor.addChild(root_1, stream_tab.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1885:5: tab= Identifier
                    {
                    tab=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_tableName13856); 
                    stream_Identifier.add(tab);


                    // AST REWRITE
                    // elements: tab
                    // token labels: tab
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_tab=new RewriteRuleTokenStream(adaptor,"token tab",tab);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1886:5: -> ^( TOK_TABNAME $tab)
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1886:8: ^( TOK_TABNAME $tab)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_1);

                        adaptor.addChild(root_1, stream_tab.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableName

    public static class viewName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start viewName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1889:1: viewName : (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) ;
    public final viewName_return viewName() throws RecognitionException {
        viewName_return retval = new viewName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token db=null;
        Token view=null;
        Token DOT873=null;

        CommonTree db_tree=null;
        CommonTree view_tree=null;
        CommonTree DOT873_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");

         msgs.push("view name"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1892:5: ( (db= Identifier DOT )? view= Identifier -> ^( TOK_TABNAME ( $db)? $view) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1893:5: (db= Identifier DOT )? view= Identifier
            {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1893:5: (db= Identifier DOT )?
            int alt264=2;
            int LA264_0 = input.LA(1);

            if ( (LA264_0==Identifier) ) {
                int LA264_1 = input.LA(2);

                if ( (LA264_1==DOT) ) {
                    alt264=1;
                }
            }
            switch (alt264) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1893:6: db= Identifier DOT
                    {
                    db=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_viewName13903); 
                    stream_Identifier.add(db);

                    DOT873=(Token)input.LT(1);
                    match(input,DOT,FOLLOW_DOT_in_viewName13905); 
                    stream_DOT.add(DOT873);


                    }
                    break;

            }

            view=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_viewName13911); 
            stream_Identifier.add(view);


            // AST REWRITE
            // elements: view, db
            // token labels: db, view
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_view=new RewriteRuleTokenStream(adaptor,"token view",view);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1894:5: -> ^( TOK_TABNAME ( $db)? $view)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1894:8: ^( TOK_TABNAME ( $db)? $view)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TABNAME, "TOK_TABNAME"), root_1);

                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1894:22: ( $db)?
                if ( stream_db.hasNext() ) {
                    adaptor.addChild(root_1, stream_db.next());

                }
                stream_db.reset();
                adaptor.addChild(root_1, stream_view.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end viewName

    public static class subQuerySource_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start subQuerySource
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1897:1: subQuerySource : LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) ;
    public final subQuerySource_return subQuerySource() throws RecognitionException {
        subQuerySource_return retval = new subQuerySource_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN874=null;
        Token RPAREN876=null;
        Token Identifier877=null;
        queryStatementExpression_return queryStatementExpression875 = null;


        CommonTree LPAREN874_tree=null;
        CommonTree RPAREN876_tree=null;
        CommonTree Identifier877_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_queryStatementExpression=new RewriteRuleSubtreeStream(adaptor,"rule queryStatementExpression");
         msgs.push("subquery source"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1900:5: ( LPAREN queryStatementExpression RPAREN Identifier -> ^( TOK_SUBQUERY queryStatementExpression Identifier ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1901:5: LPAREN queryStatementExpression RPAREN Identifier
            {
            LPAREN874=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_subQuerySource13959); 
            stream_LPAREN.add(LPAREN874);

            pushFollow(FOLLOW_queryStatementExpression_in_subQuerySource13961);
            queryStatementExpression875=queryStatementExpression();
            _fsp--;

            stream_queryStatementExpression.add(queryStatementExpression875.getTree());
            RPAREN876=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_subQuerySource13963); 
            stream_RPAREN.add(RPAREN876);

            Identifier877=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_subQuerySource13965); 
            stream_Identifier.add(Identifier877);


            // AST REWRITE
            // elements: Identifier, queryStatementExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0; 
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1901:55: -> ^( TOK_SUBQUERY queryStatementExpression Identifier )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1901:58: ^( TOK_SUBQUERY queryStatementExpression Identifier )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SUBQUERY, "TOK_SUBQUERY"), root_1);

                adaptor.addChild(root_1, stream_queryStatementExpression.next());
                adaptor.addChild(root_1, stream_Identifier.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        
    
        Integer[] pos = new Integer[4];
        pos[0] = retval.start.getLine();
        pos[1] = retval.start.getCharPositionInLine();
        pos[2] = retval.stop.getLine();
        pos[3] = retval.stop.getCharPositionInLine();
        
        String curkey = retval.stop.getText();

        Entry<String, Integer[]>[] entrySet = aliasmap.entrySet().toArray(new Entry[0] );

        for(int i=0; i<entrySet.length; i++) {
        	Entry<String, Integer[]> entry = entrySet[i];
            String key1 = entry.getKey();
            Integer[] val = entry.getValue();

            if (((pos[0] == val[0] && pos[1] < val[1])  ||   pos[0] < val[0])
              && ((pos[2] == val[2] && pos[3] > val[3])  ||   pos[2] > val[2])) {
                //在子
                aliasmap.remove(key1);
                aliasmap.put(curkey + ":" + key1, val);
            }
         }

         aliasmap.put(curkey, pos);
        
        return retval;
    }
    // $ANTLR end subQuerySource

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whereClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1906:1: whereClause : KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) ;
    public final whereClause_return whereClause() throws RecognitionException {
        whereClause_return retval = new whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_WHERE878=null;
        searchCondition_return searchCondition879 = null;


        CommonTree KW_WHERE878_tree=null;
        RewriteRuleTokenStream stream_KW_WHERE=new RewriteRuleTokenStream(adaptor,"token KW_WHERE");
        RewriteRuleSubtreeStream stream_searchCondition=new RewriteRuleSubtreeStream(adaptor,"rule searchCondition");
         msgs.push("where clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1909:5: ( KW_WHERE searchCondition -> ^( TOK_WHERE searchCondition ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1910:5: KW_WHERE searchCondition
            {
            KW_WHERE878=(Token)input.LT(1);
            match(input,KW_WHERE,FOLLOW_KW_WHERE_in_whereClause14008); 
            stream_KW_WHERE.add(KW_WHERE878);

            pushFollow(FOLLOW_searchCondition_in_whereClause14010);
            searchCondition879=searchCondition();
            _fsp--;

            stream_searchCondition.add(searchCondition879.getTree());

            // AST REWRITE
            // elements: searchCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1910:30: -> ^( TOK_WHERE searchCondition )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1910:33: ^( TOK_WHERE searchCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_WHERE, "TOK_WHERE"), root_1);

                adaptor.addChild(root_1, stream_searchCondition.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end whereClause

    public static class searchCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start searchCondition
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1913:1: searchCondition : expression ;
    public final searchCondition_return searchCondition() throws RecognitionException {
        searchCondition_return retval = new searchCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression880 = null;



         msgs.push("search condition"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1916:5: ( expression )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1917:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_searchCondition14049);
            expression880=expression();
            _fsp--;

            adaptor.addChild(root_0, expression880.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end searchCondition

    public static class groupByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start groupByClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1923:1: groupByClause : KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )? (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )? -> {rollup != null}? ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ ) -> {cube != null}? ^( TOK_CUBE_GROUPBY ( groupByExpression )+ ) -> {sets != null}? ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ ) -> ^( TOK_GROUPBY ( groupByExpression )+ ) ;
    public final groupByClause_return groupByClause() throws RecognitionException {
        groupByClause_return retval = new groupByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token rollup=null;
        Token cube=null;
        Token sets=null;
        Token KW_GROUP881=null;
        Token KW_BY882=null;
        Token COMMA884=null;
        Token KW_ROLLUP886=null;
        Token KW_CUBE887=null;
        Token KW_SETS888=null;
        Token LPAREN889=null;
        Token COMMA891=null;
        Token RPAREN893=null;
        groupByExpression_return groupByExpression883 = null;

        groupByExpression_return groupByExpression885 = null;

        groupingSetExpression_return groupingSetExpression890 = null;

        groupingSetExpression_return groupingSetExpression892 = null;


        CommonTree rollup_tree=null;
        CommonTree cube_tree=null;
        CommonTree sets_tree=null;
        CommonTree KW_GROUP881_tree=null;
        CommonTree KW_BY882_tree=null;
        CommonTree COMMA884_tree=null;
        CommonTree KW_ROLLUP886_tree=null;
        CommonTree KW_CUBE887_tree=null;
        CommonTree KW_SETS888_tree=null;
        CommonTree LPAREN889_tree=null;
        CommonTree COMMA891_tree=null;
        CommonTree RPAREN893_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_GROUPING=new RewriteRuleTokenStream(adaptor,"token KW_GROUPING");
        RewriteRuleTokenStream stream_KW_CUBE=new RewriteRuleTokenStream(adaptor,"token KW_CUBE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_ROLLUP=new RewriteRuleTokenStream(adaptor,"token KW_ROLLUP");
        RewriteRuleTokenStream stream_KW_WITH=new RewriteRuleTokenStream(adaptor,"token KW_WITH");
        RewriteRuleTokenStream stream_KW_GROUP=new RewriteRuleTokenStream(adaptor,"token KW_GROUP");
        RewriteRuleTokenStream stream_KW_SETS=new RewriteRuleTokenStream(adaptor,"token KW_SETS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_groupingSetExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupingSetExpression");
        RewriteRuleSubtreeStream stream_groupByExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupByExpression");
         msgs.push("group by clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1926:5: ( KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )? (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )? -> {rollup != null}? ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ ) -> {cube != null}? ^( TOK_CUBE_GROUPBY ( groupByExpression )+ ) -> {sets != null}? ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ ) -> ^( TOK_GROUPBY ( groupByExpression )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1927:5: KW_GROUP KW_BY groupByExpression ( COMMA groupByExpression )* ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )? (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )?
            {
            KW_GROUP881=(Token)input.LT(1);
            match(input,KW_GROUP,FOLLOW_KW_GROUP_in_groupByClause14083); 
            stream_KW_GROUP.add(KW_GROUP881);

            KW_BY882=(Token)input.LT(1);
            match(input,KW_BY,FOLLOW_KW_BY_in_groupByClause14085); 
            stream_KW_BY.add(KW_BY882);

            pushFollow(FOLLOW_groupByExpression_in_groupByClause14091);
            groupByExpression883=groupByExpression();
            _fsp--;

            stream_groupByExpression.add(groupByExpression883.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1929:5: ( COMMA groupByExpression )*
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);

                if ( (LA265_0==COMMA) ) {
                    alt265=1;
                }


                switch (alt265) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1929:7: COMMA groupByExpression
            	    {
            	    COMMA884=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_groupByClause14099); 
            	    stream_COMMA.add(COMMA884);

            	    pushFollow(FOLLOW_groupByExpression_in_groupByClause14101);
            	    groupByExpression885=groupByExpression();
            	    _fsp--;

            	    stream_groupByExpression.add(groupByExpression885.getTree());

            	    }
            	    break;

            	default :
            	    break loop265;
                }
            } while (true);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:5: ( (rollup= KW_WITH KW_ROLLUP ) | (cube= KW_WITH KW_CUBE ) )?
            int alt266=3;
            int LA266_0 = input.LA(1);

            if ( (LA266_0==KW_WITH) ) {
                int LA266_1 = input.LA(2);

                if ( (LA266_1==KW_CUBE) ) {
                    alt266=2;
                }
                else if ( (LA266_1==KW_ROLLUP) ) {
                    alt266=1;
                }
            }
            switch (alt266) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:6: (rollup= KW_WITH KW_ROLLUP )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:6: (rollup= KW_WITH KW_ROLLUP )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:7: rollup= KW_WITH KW_ROLLUP
                    {
                    rollup=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_groupByClause14114); 
                    stream_KW_WITH.add(rollup);

                    KW_ROLLUP886=(Token)input.LT(1);
                    match(input,KW_ROLLUP,FOLLOW_KW_ROLLUP_in_groupByClause14116); 
                    stream_KW_ROLLUP.add(KW_ROLLUP886);


                    }


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:35: (cube= KW_WITH KW_CUBE )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:35: (cube= KW_WITH KW_CUBE )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1930:36: cube= KW_WITH KW_CUBE
                    {
                    cube=(Token)input.LT(1);
                    match(input,KW_WITH,FOLLOW_KW_WITH_in_groupByClause14124); 
                    stream_KW_WITH.add(cube);

                    KW_CUBE887=(Token)input.LT(1);
                    match(input,KW_CUBE,FOLLOW_KW_CUBE_in_groupByClause14126); 
                    stream_KW_CUBE.add(KW_CUBE887);


                    }


                    }
                    break;

            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1931:5: (sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==KW_GROUPING) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1931:6: sets= KW_GROUPING KW_SETS LPAREN groupingSetExpression ( COMMA groupingSetExpression )* RPAREN
                    {
                    sets=(Token)input.LT(1);
                    match(input,KW_GROUPING,FOLLOW_KW_GROUPING_in_groupByClause14139); 
                    stream_KW_GROUPING.add(sets);

                    KW_SETS888=(Token)input.LT(1);
                    match(input,KW_SETS,FOLLOW_KW_SETS_in_groupByClause14141); 
                    stream_KW_SETS.add(KW_SETS888);

                    LPAREN889=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_groupByClause14148); 
                    stream_LPAREN.add(LPAREN889);

                    pushFollow(FOLLOW_groupingSetExpression_in_groupByClause14150);
                    groupingSetExpression890=groupingSetExpression();
                    _fsp--;

                    stream_groupingSetExpression.add(groupingSetExpression890.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1932:34: ( COMMA groupingSetExpression )*
                    loop267:
                    do {
                        int alt267=2;
                        int LA267_0 = input.LA(1);

                        if ( (LA267_0==COMMA) ) {
                            alt267=1;
                        }


                        switch (alt267) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1932:36: COMMA groupingSetExpression
                    	    {
                    	    COMMA891=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_groupByClause14154); 
                    	    stream_COMMA.add(COMMA891);

                    	    pushFollow(FOLLOW_groupingSetExpression_in_groupByClause14156);
                    	    groupingSetExpression892=groupingSetExpression();
                    	    _fsp--;

                    	    stream_groupingSetExpression.add(groupingSetExpression892.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop267;
                        }
                    } while (true);

                    RPAREN893=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_groupByClause14161); 
                    stream_RPAREN.add(RPAREN893);


                    }
                    break;

            }


            // AST REWRITE
            // elements: groupByExpression, groupingSetExpression, groupByExpression, groupByExpression, groupByExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1933:5: -> {rollup != null}? ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ )
            if (rollup != null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1933:26: ^( TOK_ROLLUP_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ROLLUP_GROUPBY, "TOK_ROLLUP_GROUPBY"), root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.next());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1934:5: -> {cube != null}? ^( TOK_CUBE_GROUPBY ( groupByExpression )+ )
            if (cube != null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1934:24: ^( TOK_CUBE_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CUBE_GROUPBY, "TOK_CUBE_GROUPBY"), root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.next());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1935:5: -> {sets != null}? ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ )
            if (sets != null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1935:24: ^( TOK_GROUPING_SETS ( groupByExpression )+ ( groupingSetExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUPING_SETS, "TOK_GROUPING_SETS"), root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.next());

                }
                stream_groupByExpression.reset();
                if ( !(stream_groupingSetExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupingSetExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupingSetExpression.next());

                }
                stream_groupingSetExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1936:5: -> ^( TOK_GROUPBY ( groupByExpression )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1936:8: ^( TOK_GROUPBY ( groupByExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUPBY, "TOK_GROUPBY"), root_1);

                if ( !(stream_groupByExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_groupByExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByExpression.next());

                }
                stream_groupByExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end groupByClause

    public static class groupingSetExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start groupingSetExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );
    public final groupingSetExpression_return groupingSetExpression() throws RecognitionException {
        groupingSetExpression_return retval = new groupingSetExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN895=null;
        Token COMMA897=null;
        Token RPAREN899=null;
        Token LPAREN900=null;
        Token RPAREN901=null;
        groupByExpression_return groupByExpression894 = null;

        groupByExpression_return groupByExpression896 = null;

        groupByExpression_return groupByExpression898 = null;


        CommonTree LPAREN895_tree=null;
        CommonTree COMMA897_tree=null;
        CommonTree RPAREN899_tree=null;
        CommonTree LPAREN900_tree=null;
        CommonTree RPAREN901_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_groupByExpression=new RewriteRuleSubtreeStream(adaptor,"rule groupByExpression");
        msgs.push("grouping set expression"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1942:4: ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) )
            int alt270=3;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==StringLiteral||LA270_0==KW_IF||LA270_0==KW_NOT||LA270_0==Identifier||LA270_0==Number||LA270_0==KW_MAP||LA270_0==KW_ARRAY||(LA270_0>=KW_STRUCT && LA270_0<=KW_UNIONTYPE)||LA270_0==PLUS||(LA270_0>=KW_CAST && LA270_0<=KW_CASE)||(LA270_0>=BigintLiteral && LA270_0<=CharSetName)||LA270_0==KW_NULL||(LA270_0>=MINUS && LA270_0<=TILDE)||(LA270_0>=KW_TRUE && LA270_0<=KW_FALSE)) ) {
                alt270=1;
            }
            else if ( (LA270_0==LPAREN) ) {
                switch ( input.LA(2) ) {
                case RPAREN:
                    {
                    alt270=3;
                    }
                    break;
                case KW_NOT:
                    {
                    switch ( input.LA(3) ) {
                    case PLUS:
                    case MINUS:
                    case TILDE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NULL:
                        {
                        alt270=1;
                        }
                        break;
                    case Number:
                        {
                        alt270=1;
                        }
                        break;
                    case StringLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case BigintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case SmallintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case TinyintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case CharSetName:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_TRUE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_FALSE:
                        {
                        alt270=1;
                        }
                        break;
                    case Identifier:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CAST:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CASE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IF:
                    case KW_MAP:
                    case KW_ARRAY:
                    case KW_STRUCT:
                    case KW_UNIONTYPE:
                        {
                        alt270=1;
                        }
                        break;
                    case LPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 18, input);

                        throw nvae;
                    }

                    }
                    break;
                case PLUS:
                case MINUS:
                case TILDE:
                    {
                    switch ( input.LA(3) ) {
                    case KW_NULL:
                        {
                        alt270=1;
                        }
                        break;
                    case Number:
                        {
                        alt270=1;
                        }
                        break;
                    case StringLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case BigintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case SmallintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case TinyintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case CharSetName:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_TRUE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_FALSE:
                        {
                        alt270=1;
                        }
                        break;
                    case Identifier:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CAST:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CASE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IF:
                    case KW_MAP:
                    case KW_ARRAY:
                    case KW_STRUCT:
                    case KW_UNIONTYPE:
                        {
                        alt270=1;
                        }
                        break;
                    case LPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                    case TILDE:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 19, input);

                        throw nvae;
                    }

                    }
                    break;
                case KW_NULL:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 20, input);

                        throw nvae;
                    }

                    }
                    break;
                case Number:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 21, input);

                        throw nvae;
                    }

                    }
                    break;
                case StringLiteral:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    case StringLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 22, input);

                        throw nvae;
                    }

                    }
                    break;
                case BigintLiteral:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 23, input);

                        throw nvae;
                    }

                    }
                    break;
                case SmallintLiteral:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 24, input);

                        throw nvae;
                    }

                    }
                    break;
                case TinyintLiteral:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 25, input);

                        throw nvae;
                    }

                    }
                    break;
                case CharSetName:
                    {
                    int LA270_26 = input.LA(3);

                    if ( (LA270_26==CharSetLiteral) ) {
                        alt270=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 26, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_TRUE:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 27, input);

                        throw nvae;
                    }

                    }
                    break;
                case KW_FALSE:
                    {
                    switch ( input.LA(3) ) {
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 28, input);

                        throw nvae;
                    }

                    }
                    break;
                case Identifier:
                    {
                    switch ( input.LA(3) ) {
                    case LPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    case LSQUARE:
                        {
                        alt270=1;
                        }
                        break;
                    case DOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IS:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEXOR:
                        {
                        alt270=1;
                        }
                        break;
                    case DIVIDE:
                    case STAR:
                    case MOD:
                    case DIV:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                        {
                        alt270=1;
                        }
                        break;
                    case AMPERSAND:
                        {
                        alt270=1;
                        }
                        break;
                    case BITWISEOR:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case EQUAL_NS:
                        {
                        alt270=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case LESSTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHANOREQUALTO:
                        {
                        alt270=1;
                        }
                        break;
                    case GREATERTHAN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_BETWEEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_AND:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_OR:
                        {
                        alt270=1;
                        }
                        break;
                    case COMMA:
                        {
                        alt270=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 29, input);

                        throw nvae;
                    }

                    }
                    break;
                case KW_CAST:
                    {
                    int LA270_30 = input.LA(3);

                    if ( (LA270_30==LPAREN) ) {
                        alt270=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 30, input);

                        throw nvae;
                    }
                    }
                    break;
                case KW_CASE:
                    {
                    switch ( input.LA(3) ) {
                    case KW_WHEN:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                    case TILDE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NULL:
                        {
                        alt270=1;
                        }
                        break;
                    case Number:
                        {
                        alt270=1;
                        }
                        break;
                    case StringLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case BigintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case SmallintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case TinyintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case CharSetName:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_TRUE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_FALSE:
                        {
                        alt270=1;
                        }
                        break;
                    case Identifier:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CAST:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CASE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IF:
                    case KW_MAP:
                    case KW_ARRAY:
                    case KW_STRUCT:
                    case KW_UNIONTYPE:
                        {
                        alt270=1;
                        }
                        break;
                    case LPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 31, input);

                        throw nvae;
                    }

                    }
                    break;
                case KW_IF:
                case KW_MAP:
                case KW_ARRAY:
                case KW_STRUCT:
                case KW_UNIONTYPE:
                    {
                    int LA270_32 = input.LA(3);

                    if ( (LA270_32==LPAREN) ) {
                        alt270=1;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 32, input);

                        throw nvae;
                    }
                    }
                    break;
                case LPAREN:
                    {
                    switch ( input.LA(3) ) {
                    case KW_NOT:
                        {
                        alt270=1;
                        }
                        break;
                    case PLUS:
                    case MINUS:
                    case TILDE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_NULL:
                        {
                        alt270=1;
                        }
                        break;
                    case Number:
                        {
                        alt270=1;
                        }
                        break;
                    case StringLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case BigintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case SmallintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case TinyintLiteral:
                        {
                        alt270=1;
                        }
                        break;
                    case CharSetName:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_TRUE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_FALSE:
                        {
                        alt270=1;
                        }
                        break;
                    case Identifier:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CAST:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_CASE:
                        {
                        alt270=1;
                        }
                        break;
                    case KW_IF:
                    case KW_MAP:
                    case KW_ARRAY:
                    case KW_STRUCT:
                    case KW_UNIONTYPE:
                        {
                        alt270=1;
                        }
                        break;
                    case LPAREN:
                        {
                        alt270=1;
                        }
                        break;
                    default:
                        NoViableAltException nvae =
                            new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 33, input);

                        throw nvae;
                    }

                    }
                    break;
                default:
                    NoViableAltException nvae =
                        new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 16, input);

                    throw nvae;
                }

            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1939:1: groupingSetExpression : ( groupByExpression -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression ) | LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ ) | LPAREN RPAREN -> ^( TOK_GROUPING_SETS_EXPRESSION ) );", 270, 0, input);

                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1943:4: groupByExpression
                    {
                    pushFollow(FOLLOW_groupByExpression_in_groupingSetExpression14255);
                    groupByExpression894=groupByExpression();
                    _fsp--;

                    stream_groupByExpression.add(groupByExpression894.getTree());

                    // AST REWRITE
                    // elements: groupByExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1944:4: -> ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1944:7: ^( TOK_GROUPING_SETS_EXPRESSION groupByExpression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUPING_SETS_EXPRESSION, "TOK_GROUPING_SETS_EXPRESSION"), root_1);

                        adaptor.addChild(root_1, stream_groupByExpression.next());

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1946:4: LPAREN groupByExpression ( COMMA groupByExpression )* RPAREN
                    {
                    LPAREN895=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_groupingSetExpression14276); 
                    stream_LPAREN.add(LPAREN895);

                    pushFollow(FOLLOW_groupByExpression_in_groupingSetExpression14282);
                    groupByExpression896=groupByExpression();
                    _fsp--;

                    stream_groupByExpression.add(groupByExpression896.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1947:22: ( COMMA groupByExpression )*
                    loop269:
                    do {
                        int alt269=2;
                        int LA269_0 = input.LA(1);

                        if ( (LA269_0==COMMA) ) {
                            alt269=1;
                        }


                        switch (alt269) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1947:23: COMMA groupByExpression
                    	    {
                    	    COMMA897=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_groupingSetExpression14285); 
                    	    stream_COMMA.add(COMMA897);

                    	    pushFollow(FOLLOW_groupByExpression_in_groupingSetExpression14287);
                    	    groupByExpression898=groupByExpression();
                    	    _fsp--;

                    	    stream_groupByExpression.add(groupByExpression898.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop269;
                        }
                    } while (true);

                    RPAREN899=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_groupingSetExpression14294); 
                    stream_RPAREN.add(RPAREN899);


                    // AST REWRITE
                    // elements: groupByExpression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1949:4: -> ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1949:7: ^( TOK_GROUPING_SETS_EXPRESSION ( groupByExpression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUPING_SETS_EXPRESSION, "TOK_GROUPING_SETS_EXPRESSION"), root_1);

                        if ( !(stream_groupByExpression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_groupByExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_groupByExpression.next());

                        }
                        stream_groupByExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1951:4: LPAREN RPAREN
                    {
                    LPAREN900=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_groupingSetExpression14316); 
                    stream_LPAREN.add(LPAREN900);

                    RPAREN901=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_groupingSetExpression14321); 
                    stream_RPAREN.add(RPAREN901);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1953:4: -> ^( TOK_GROUPING_SETS_EXPRESSION )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1953:7: ^( TOK_GROUPING_SETS_EXPRESSION )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_GROUPING_SETS_EXPRESSION, "TOK_GROUPING_SETS_EXPRESSION"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

            msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end groupingSetExpression

    public static class groupByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start groupByExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1957:1: groupByExpression : expression ;
    public final groupByExpression_return groupByExpression() throws RecognitionException {
        groupByExpression_return retval = new groupByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression902 = null;



         msgs.push("group by expression"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1960:5: ( expression )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1961:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_groupByExpression14361);
            expression902=expression();
            _fsp--;

            adaptor.addChild(root_0, expression902.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end groupByExpression

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start havingClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1964:1: havingClause : KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) ;
    public final havingClause_return havingClause() throws RecognitionException {
        havingClause_return retval = new havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_HAVING903=null;
        havingCondition_return havingCondition904 = null;


        CommonTree KW_HAVING903_tree=null;
        RewriteRuleTokenStream stream_KW_HAVING=new RewriteRuleTokenStream(adaptor,"token KW_HAVING");
        RewriteRuleSubtreeStream stream_havingCondition=new RewriteRuleSubtreeStream(adaptor,"rule havingCondition");
         msgs.push("having clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1967:5: ( KW_HAVING havingCondition -> ^( TOK_HAVING havingCondition ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1968:5: KW_HAVING havingCondition
            {
            KW_HAVING903=(Token)input.LT(1);
            match(input,KW_HAVING,FOLLOW_KW_HAVING_in_havingClause14392); 
            stream_KW_HAVING.add(KW_HAVING903);

            pushFollow(FOLLOW_havingCondition_in_havingClause14394);
            havingCondition904=havingCondition();
            _fsp--;

            stream_havingCondition.add(havingCondition904.getTree());

            // AST REWRITE
            // elements: havingCondition
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1968:31: -> ^( TOK_HAVING havingCondition )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1968:34: ^( TOK_HAVING havingCondition )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_HAVING, "TOK_HAVING"), root_1);

                adaptor.addChild(root_1, stream_havingCondition.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end havingClause

    public static class havingCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start havingCondition
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1971:1: havingCondition : expression ;
    public final havingCondition_return havingCondition() throws RecognitionException {
        havingCondition_return retval = new havingCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        expression_return expression905 = null;



         msgs.push("having condition"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1974:5: ( expression )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1975:5: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_havingCondition14433);
            expression905=expression();
            _fsp--;

            adaptor.addChild(root_0, expression905.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end havingCondition

    public static class orderByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start orderByClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1979:1: orderByClause : ( KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_ORDERBY ( columnRefOrder )+ ) | KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) );
    public final orderByClause_return orderByClause() throws RecognitionException {
        orderByClause_return retval = new orderByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_ORDER906=null;
        Token KW_BY907=null;
        Token LPAREN908=null;
        Token COMMA910=null;
        Token RPAREN912=null;
        Token KW_ORDER913=null;
        Token KW_BY914=null;
        Token COMMA916=null;
        columnRefOrder_return columnRefOrder909 = null;

        columnRefOrder_return columnRefOrder911 = null;

        columnRefOrder_return columnRefOrder915 = null;

        columnRefOrder_return columnRefOrder917 = null;


        CommonTree KW_ORDER906_tree=null;
        CommonTree KW_BY907_tree=null;
        CommonTree LPAREN908_tree=null;
        CommonTree COMMA910_tree=null;
        CommonTree RPAREN912_tree=null;
        CommonTree KW_ORDER913_tree=null;
        CommonTree KW_BY914_tree=null;
        CommonTree COMMA916_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_ORDER=new RewriteRuleTokenStream(adaptor,"token KW_ORDER");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("order by clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1982:5: ( KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_ORDERBY ( columnRefOrder )+ ) | KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==KW_ORDER) ) {
                int LA273_1 = input.LA(2);

                if ( (LA273_1==KW_BY) ) {
                    int LA273_2 = input.LA(3);

                    if ( (LA273_2==LPAREN) ) {
                        alt273=1;
                    }
                    else if ( (LA273_2==StringLiteral||LA273_2==KW_IF||LA273_2==KW_NOT||LA273_2==Identifier||LA273_2==Number||LA273_2==KW_MAP||LA273_2==KW_ARRAY||(LA273_2>=KW_STRUCT && LA273_2<=KW_UNIONTYPE)||LA273_2==PLUS||(LA273_2>=KW_CAST && LA273_2<=KW_CASE)||(LA273_2>=BigintLiteral && LA273_2<=CharSetName)||LA273_2==KW_NULL||(LA273_2>=MINUS && LA273_2<=TILDE)||(LA273_2>=KW_TRUE && LA273_2<=KW_FALSE)) ) {
                        alt273=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1979:1: orderByClause : ( KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_ORDERBY ( columnRefOrder )+ ) | KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) );", 273, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1979:1: orderByClause : ( KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_ORDERBY ( columnRefOrder )+ ) | KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) );", 273, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1979:1: orderByClause : ( KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_ORDERBY ( columnRefOrder )+ ) | KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_ORDERBY ( columnRefOrder )+ ) );", 273, 0, input);

                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1983:5: KW_ORDER KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN
                    {
                    KW_ORDER906=(Token)input.LT(1);
                    match(input,KW_ORDER,FOLLOW_KW_ORDER_in_orderByClause14465); 
                    stream_KW_ORDER.add(KW_ORDER906);

                    KW_BY907=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_orderByClause14467); 
                    stream_KW_BY.add(KW_BY907);

                    LPAREN908=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_orderByClause14473); 
                    stream_LPAREN.add(LPAREN908);

                    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14475);
                    columnRefOrder909=columnRefOrder();
                    _fsp--;

                    stream_columnRefOrder.add(columnRefOrder909.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1985:5: ( COMMA columnRefOrder )*
                    loop271:
                    do {
                        int alt271=2;
                        int LA271_0 = input.LA(1);

                        if ( (LA271_0==COMMA) ) {
                            alt271=1;
                        }


                        switch (alt271) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1985:7: COMMA columnRefOrder
                    	    {
                    	    COMMA910=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_orderByClause14483); 
                    	    stream_COMMA.add(COMMA910);

                    	    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14485);
                    	    columnRefOrder911=columnRefOrder();
                    	    _fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder911.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop271;
                        }
                    } while (true);

                    RPAREN912=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_orderByClause14489); 
                    stream_RPAREN.add(RPAREN912);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1985:37: -> ^( TOK_ORDERBY ( columnRefOrder )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1985:40: ^( TOK_ORDERBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ORDERBY, "TOK_ORDERBY"), root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.next());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1987:5: KW_ORDER KW_BY columnRefOrder ( COMMA columnRefOrder )*
                    {
                    KW_ORDER913=(Token)input.LT(1);
                    match(input,KW_ORDER,FOLLOW_KW_ORDER_in_orderByClause14510); 
                    stream_KW_ORDER.add(KW_ORDER913);

                    KW_BY914=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_orderByClause14512); 
                    stream_KW_BY.add(KW_BY914);

                    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14518);
                    columnRefOrder915=columnRefOrder();
                    _fsp--;

                    stream_columnRefOrder.add(columnRefOrder915.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1989:5: ( COMMA columnRefOrder )*
                    loop272:
                    do {
                        int alt272=2;
                        int LA272_0 = input.LA(1);

                        if ( (LA272_0==COMMA) ) {
                            alt272=1;
                        }


                        switch (alt272) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1989:7: COMMA columnRefOrder
                    	    {
                    	    COMMA916=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_orderByClause14526); 
                    	    stream_COMMA.add(COMMA916);

                    	    pushFollow(FOLLOW_columnRefOrder_in_orderByClause14528);
                    	    columnRefOrder917=columnRefOrder();
                    	    _fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder917.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop272;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1989:30: -> ^( TOK_ORDERBY ( columnRefOrder )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1989:33: ^( TOK_ORDERBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ORDERBY, "TOK_ORDERBY"), root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.next());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end orderByClause

    public static class clusterByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start clusterByClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1992:1: clusterByClause : ( KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_CLUSTERBY ( expression )+ ) | KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) );
    public final clusterByClause_return clusterByClause() throws RecognitionException {
        clusterByClause_return retval = new clusterByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CLUSTER918=null;
        Token KW_BY919=null;
        Token LPAREN920=null;
        Token COMMA922=null;
        Token RPAREN924=null;
        Token KW_CLUSTER925=null;
        Token KW_BY926=null;
        Token COMMA928=null;
        expression_return expression921 = null;

        expression_return expression923 = null;

        expression_return expression927 = null;

        expression_return expression929 = null;


        CommonTree KW_CLUSTER918_tree=null;
        CommonTree KW_BY919_tree=null;
        CommonTree LPAREN920_tree=null;
        CommonTree COMMA922_tree=null;
        CommonTree RPAREN924_tree=null;
        CommonTree KW_CLUSTER925_tree=null;
        CommonTree KW_BY926_tree=null;
        CommonTree COMMA928_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CLUSTER=new RewriteRuleTokenStream(adaptor,"token KW_CLUSTER");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("cluster by clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1995:5: ( KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_CLUSTERBY ( expression )+ ) | KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) )
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==KW_CLUSTER) ) {
                int LA276_1 = input.LA(2);

                if ( (LA276_1==KW_BY) ) {
                    int LA276_2 = input.LA(3);

                    if ( (LA276_2==LPAREN) ) {
                        alt276=1;
                    }
                    else if ( (LA276_2==StringLiteral||LA276_2==KW_IF||LA276_2==KW_NOT||LA276_2==Identifier||LA276_2==Number||LA276_2==KW_MAP||LA276_2==KW_ARRAY||(LA276_2>=KW_STRUCT && LA276_2<=KW_UNIONTYPE)||LA276_2==PLUS||(LA276_2>=KW_CAST && LA276_2<=KW_CASE)||(LA276_2>=BigintLiteral && LA276_2<=CharSetName)||LA276_2==KW_NULL||(LA276_2>=MINUS && LA276_2<=TILDE)||(LA276_2>=KW_TRUE && LA276_2<=KW_FALSE)) ) {
                        alt276=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("1992:1: clusterByClause : ( KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_CLUSTERBY ( expression )+ ) | KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) );", 276, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("1992:1: clusterByClause : ( KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_CLUSTERBY ( expression )+ ) | KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) );", 276, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("1992:1: clusterByClause : ( KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_CLUSTERBY ( expression )+ ) | KW_CLUSTER KW_BY expression ( COMMA expression )* -> ^( TOK_CLUSTERBY ( expression )+ ) );", 276, 0, input);

                throw nvae;
            }
            switch (alt276) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1996:5: KW_CLUSTER KW_BY LPAREN expression ( COMMA expression )* RPAREN
                    {
                    KW_CLUSTER918=(Token)input.LT(1);
                    match(input,KW_CLUSTER,FOLLOW_KW_CLUSTER_in_clusterByClause14570); 
                    stream_KW_CLUSTER.add(KW_CLUSTER918);

                    KW_BY919=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_clusterByClause14572); 
                    stream_KW_BY.add(KW_BY919);

                    LPAREN920=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_clusterByClause14578); 
                    stream_LPAREN.add(LPAREN920);

                    pushFollow(FOLLOW_expression_in_clusterByClause14580);
                    expression921=expression();
                    _fsp--;

                    stream_expression.add(expression921.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1997:23: ( COMMA expression )*
                    loop274:
                    do {
                        int alt274=2;
                        int LA274_0 = input.LA(1);

                        if ( (LA274_0==COMMA) ) {
                            alt274=1;
                        }


                        switch (alt274) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1997:24: COMMA expression
                    	    {
                    	    COMMA922=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_clusterByClause14583); 
                    	    stream_COMMA.add(COMMA922);

                    	    pushFollow(FOLLOW_expression_in_clusterByClause14585);
                    	    expression923=expression();
                    	    _fsp--;

                    	    stream_expression.add(expression923.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop274;
                        }
                    } while (true);

                    RPAREN924=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_clusterByClause14589); 
                    stream_RPAREN.add(RPAREN924);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1997:50: -> ^( TOK_CLUSTERBY ( expression )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1997:53: ^( TOK_CLUSTERBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CLUSTERBY, "TOK_CLUSTERBY"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.next());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:1999:5: KW_CLUSTER KW_BY expression ( COMMA expression )*
                    {
                    KW_CLUSTER925=(Token)input.LT(1);
                    match(input,KW_CLUSTER,FOLLOW_KW_CLUSTER_in_clusterByClause14610); 
                    stream_KW_CLUSTER.add(KW_CLUSTER925);

                    KW_BY926=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_clusterByClause14612); 
                    stream_KW_BY.add(KW_BY926);

                    pushFollow(FOLLOW_expression_in_clusterByClause14618);
                    expression927=expression();
                    _fsp--;

                    stream_expression.add(expression927.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2001:5: ( COMMA expression )*
                    loop275:
                    do {
                        int alt275=2;
                        int LA275_0 = input.LA(1);

                        if ( (LA275_0==COMMA) ) {
                            alt275=1;
                        }


                        switch (alt275) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2001:7: COMMA expression
                    	    {
                    	    COMMA928=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_clusterByClause14626); 
                    	    stream_COMMA.add(COMMA928);

                    	    pushFollow(FOLLOW_expression_in_clusterByClause14628);
                    	    expression929=expression();
                    	    _fsp--;

                    	    stream_expression.add(expression929.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop275;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2001:27: -> ^( TOK_CLUSTERBY ( expression )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2001:30: ^( TOK_CLUSTERBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CLUSTERBY, "TOK_CLUSTERBY"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.next());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end clusterByClause

    public static class distributeByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start distributeByClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2004:1: distributeByClause : ( KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_DISTRIBUTEBY ( expression )+ ) | KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) );
    public final distributeByClause_return distributeByClause() throws RecognitionException {
        distributeByClause_return retval = new distributeByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_DISTRIBUTE930=null;
        Token KW_BY931=null;
        Token LPAREN932=null;
        Token COMMA934=null;
        Token RPAREN936=null;
        Token KW_DISTRIBUTE937=null;
        Token KW_BY938=null;
        Token COMMA940=null;
        expression_return expression933 = null;

        expression_return expression935 = null;

        expression_return expression939 = null;

        expression_return expression941 = null;


        CommonTree KW_DISTRIBUTE930_tree=null;
        CommonTree KW_BY931_tree=null;
        CommonTree LPAREN932_tree=null;
        CommonTree COMMA934_tree=null;
        CommonTree RPAREN936_tree=null;
        CommonTree KW_DISTRIBUTE937_tree=null;
        CommonTree KW_BY938_tree=null;
        CommonTree COMMA940_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTRIBUTE=new RewriteRuleTokenStream(adaptor,"token KW_DISTRIBUTE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("distribute by clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2007:5: ( KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_DISTRIBUTEBY ( expression )+ ) | KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) )
            int alt279=2;
            int LA279_0 = input.LA(1);

            if ( (LA279_0==KW_DISTRIBUTE) ) {
                int LA279_1 = input.LA(2);

                if ( (LA279_1==KW_BY) ) {
                    int LA279_2 = input.LA(3);

                    if ( (LA279_2==LPAREN) ) {
                        alt279=1;
                    }
                    else if ( (LA279_2==StringLiteral||LA279_2==KW_IF||LA279_2==KW_NOT||LA279_2==Identifier||LA279_2==Number||LA279_2==KW_MAP||LA279_2==KW_ARRAY||(LA279_2>=KW_STRUCT && LA279_2<=KW_UNIONTYPE)||LA279_2==PLUS||(LA279_2>=KW_CAST && LA279_2<=KW_CASE)||(LA279_2>=BigintLiteral && LA279_2<=CharSetName)||LA279_2==KW_NULL||(LA279_2>=MINUS && LA279_2<=TILDE)||(LA279_2>=KW_TRUE && LA279_2<=KW_FALSE)) ) {
                        alt279=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("2004:1: distributeByClause : ( KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_DISTRIBUTEBY ( expression )+ ) | KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) );", 279, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("2004:1: distributeByClause : ( KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_DISTRIBUTEBY ( expression )+ ) | KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) );", 279, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("2004:1: distributeByClause : ( KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN -> ^( TOK_DISTRIBUTEBY ( expression )+ ) | KW_DISTRIBUTE KW_BY expression ( COMMA expression )* -> ^( TOK_DISTRIBUTEBY ( expression )+ ) );", 279, 0, input);

                throw nvae;
            }
            switch (alt279) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2008:5: KW_DISTRIBUTE KW_BY LPAREN expression ( COMMA expression )* RPAREN
                    {
                    KW_DISTRIBUTE930=(Token)input.LT(1);
                    match(input,KW_DISTRIBUTE,FOLLOW_KW_DISTRIBUTE_in_distributeByClause14671); 
                    stream_KW_DISTRIBUTE.add(KW_DISTRIBUTE930);

                    KW_BY931=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_distributeByClause14673); 
                    stream_KW_BY.add(KW_BY931);

                    LPAREN932=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_distributeByClause14679); 
                    stream_LPAREN.add(LPAREN932);

                    pushFollow(FOLLOW_expression_in_distributeByClause14681);
                    expression933=expression();
                    _fsp--;

                    stream_expression.add(expression933.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2009:23: ( COMMA expression )*
                    loop277:
                    do {
                        int alt277=2;
                        int LA277_0 = input.LA(1);

                        if ( (LA277_0==COMMA) ) {
                            alt277=1;
                        }


                        switch (alt277) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2009:24: COMMA expression
                    	    {
                    	    COMMA934=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_distributeByClause14684); 
                    	    stream_COMMA.add(COMMA934);

                    	    pushFollow(FOLLOW_expression_in_distributeByClause14686);
                    	    expression935=expression();
                    	    _fsp--;

                    	    stream_expression.add(expression935.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop277;
                        }
                    } while (true);

                    RPAREN936=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_distributeByClause14690); 
                    stream_RPAREN.add(RPAREN936);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2009:50: -> ^( TOK_DISTRIBUTEBY ( expression )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2009:53: ^( TOK_DISTRIBUTEBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DISTRIBUTEBY, "TOK_DISTRIBUTEBY"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.next());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2011:5: KW_DISTRIBUTE KW_BY expression ( COMMA expression )*
                    {
                    KW_DISTRIBUTE937=(Token)input.LT(1);
                    match(input,KW_DISTRIBUTE,FOLLOW_KW_DISTRIBUTE_in_distributeByClause14711); 
                    stream_KW_DISTRIBUTE.add(KW_DISTRIBUTE937);

                    KW_BY938=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_distributeByClause14713); 
                    stream_KW_BY.add(KW_BY938);

                    pushFollow(FOLLOW_expression_in_distributeByClause14719);
                    expression939=expression();
                    _fsp--;

                    stream_expression.add(expression939.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2012:16: ( COMMA expression )*
                    loop278:
                    do {
                        int alt278=2;
                        int LA278_0 = input.LA(1);

                        if ( (LA278_0==COMMA) ) {
                            alt278=1;
                        }


                        switch (alt278) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2012:17: COMMA expression
                    	    {
                    	    COMMA940=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_distributeByClause14722); 
                    	    stream_COMMA.add(COMMA940);

                    	    pushFollow(FOLLOW_expression_in_distributeByClause14724);
                    	    expression941=expression();
                    	    _fsp--;

                    	    stream_expression.add(expression941.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop278;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2012:36: -> ^( TOK_DISTRIBUTEBY ( expression )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2012:39: ^( TOK_DISTRIBUTEBY ( expression )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_DISTRIBUTEBY, "TOK_DISTRIBUTEBY"), root_1);

                        if ( !(stream_expression.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_expression.hasNext() ) {
                            adaptor.addChild(root_1, stream_expression.next());

                        }
                        stream_expression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end distributeByClause

    public static class sortByClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sortByClause
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2015:1: sortByClause : ( KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_SORTBY ( columnRefOrder )+ ) | KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) );
    public final sortByClause_return sortByClause() throws RecognitionException {
        sortByClause_return retval = new sortByClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_SORT942=null;
        Token KW_BY943=null;
        Token LPAREN944=null;
        Token COMMA946=null;
        Token RPAREN948=null;
        Token KW_SORT949=null;
        Token KW_BY950=null;
        Token COMMA952=null;
        columnRefOrder_return columnRefOrder945 = null;

        columnRefOrder_return columnRefOrder947 = null;

        columnRefOrder_return columnRefOrder951 = null;

        columnRefOrder_return columnRefOrder953 = null;


        CommonTree KW_SORT942_tree=null;
        CommonTree KW_BY943_tree=null;
        CommonTree LPAREN944_tree=null;
        CommonTree COMMA946_tree=null;
        CommonTree RPAREN948_tree=null;
        CommonTree KW_SORT949_tree=null;
        CommonTree KW_BY950_tree=null;
        CommonTree COMMA952_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_KW_SORT=new RewriteRuleTokenStream(adaptor,"token KW_SORT");
        RewriteRuleTokenStream stream_KW_BY=new RewriteRuleTokenStream(adaptor,"token KW_BY");
        RewriteRuleSubtreeStream stream_columnRefOrder=new RewriteRuleSubtreeStream(adaptor,"rule columnRefOrder");
         msgs.push("sort by clause"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2018:5: ( KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_SORTBY ( columnRefOrder )+ ) | KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) )
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==KW_SORT) ) {
                int LA282_1 = input.LA(2);

                if ( (LA282_1==KW_BY) ) {
                    int LA282_2 = input.LA(3);

                    if ( (LA282_2==LPAREN) ) {
                        alt282=1;
                    }
                    else if ( (LA282_2==StringLiteral||LA282_2==KW_IF||LA282_2==KW_NOT||LA282_2==Identifier||LA282_2==Number||LA282_2==KW_MAP||LA282_2==KW_ARRAY||(LA282_2>=KW_STRUCT && LA282_2<=KW_UNIONTYPE)||LA282_2==PLUS||(LA282_2>=KW_CAST && LA282_2<=KW_CASE)||(LA282_2>=BigintLiteral && LA282_2<=CharSetName)||LA282_2==KW_NULL||(LA282_2>=MINUS && LA282_2<=TILDE)||(LA282_2>=KW_TRUE && LA282_2<=KW_FALSE)) ) {
                        alt282=2;
                    }
                    else {
                        NoViableAltException nvae =
                            new NoViableAltException("2015:1: sortByClause : ( KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_SORTBY ( columnRefOrder )+ ) | KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) );", 282, 2, input);

                        throw nvae;
                    }
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("2015:1: sortByClause : ( KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_SORTBY ( columnRefOrder )+ ) | KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) );", 282, 1, input);

                    throw nvae;
                }
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("2015:1: sortByClause : ( KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN -> ^( TOK_SORTBY ( columnRefOrder )+ ) | KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )* -> ^( TOK_SORTBY ( columnRefOrder )+ ) );", 282, 0, input);

                throw nvae;
            }
            switch (alt282) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2019:5: KW_SORT KW_BY LPAREN columnRefOrder ( COMMA columnRefOrder )* RPAREN
                    {
                    KW_SORT942=(Token)input.LT(1);
                    match(input,KW_SORT,FOLLOW_KW_SORT_in_sortByClause14766); 
                    stream_KW_SORT.add(KW_SORT942);

                    KW_BY943=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_sortByClause14768); 
                    stream_KW_BY.add(KW_BY943);

                    LPAREN944=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_sortByClause14774); 
                    stream_LPAREN.add(LPAREN944);

                    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14776);
                    columnRefOrder945=columnRefOrder();
                    _fsp--;

                    stream_columnRefOrder.add(columnRefOrder945.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2021:5: ( COMMA columnRefOrder )*
                    loop280:
                    do {
                        int alt280=2;
                        int LA280_0 = input.LA(1);

                        if ( (LA280_0==COMMA) ) {
                            alt280=1;
                        }


                        switch (alt280) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2021:7: COMMA columnRefOrder
                    	    {
                    	    COMMA946=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_sortByClause14784); 
                    	    stream_COMMA.add(COMMA946);

                    	    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14786);
                    	    columnRefOrder947=columnRefOrder();
                    	    _fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder947.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop280;
                        }
                    } while (true);

                    RPAREN948=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_sortByClause14790); 
                    stream_RPAREN.add(RPAREN948);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2021:37: -> ^( TOK_SORTBY ( columnRefOrder )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2021:40: ^( TOK_SORTBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SORTBY, "TOK_SORTBY"), root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.next());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2023:5: KW_SORT KW_BY columnRefOrder ( COMMA columnRefOrder )*
                    {
                    KW_SORT949=(Token)input.LT(1);
                    match(input,KW_SORT,FOLLOW_KW_SORT_in_sortByClause14811); 
                    stream_KW_SORT.add(KW_SORT949);

                    KW_BY950=(Token)input.LT(1);
                    match(input,KW_BY,FOLLOW_KW_BY_in_sortByClause14813); 
                    stream_KW_BY.add(KW_BY950);

                    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14819);
                    columnRefOrder951=columnRefOrder();
                    _fsp--;

                    stream_columnRefOrder.add(columnRefOrder951.getTree());
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2025:5: ( COMMA columnRefOrder )*
                    loop281:
                    do {
                        int alt281=2;
                        int LA281_0 = input.LA(1);

                        if ( (LA281_0==COMMA) ) {
                            alt281=1;
                        }


                        switch (alt281) {
                    	case 1 :
                    	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2025:7: COMMA columnRefOrder
                    	    {
                    	    COMMA952=(Token)input.LT(1);
                    	    match(input,COMMA,FOLLOW_COMMA_in_sortByClause14827); 
                    	    stream_COMMA.add(COMMA952);

                    	    pushFollow(FOLLOW_columnRefOrder_in_sortByClause14829);
                    	    columnRefOrder953=columnRefOrder();
                    	    _fsp--;

                    	    stream_columnRefOrder.add(columnRefOrder953.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop281;
                        }
                    } while (true);


                    // AST REWRITE
                    // elements: columnRefOrder
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2025:30: -> ^( TOK_SORTBY ( columnRefOrder )+ )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2025:33: ^( TOK_SORTBY ( columnRefOrder )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_SORTBY, "TOK_SORTBY"), root_1);

                        if ( !(stream_columnRefOrder.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_columnRefOrder.hasNext() ) {
                            adaptor.addChild(root_1, stream_columnRefOrder.next());

                        }
                        stream_columnRefOrder.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sortByClause

    public static class function_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start function
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2029:1: function : functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) ;
    public final function_return function() throws RecognitionException {
        function_return retval = new function_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token star=null;
        Token dist=null;
        Token LPAREN955=null;
        Token COMMA957=null;
        Token RPAREN959=null;
        functionName_return functionName954 = null;

        expression_return expression956 = null;

        expression_return expression958 = null;


        CommonTree star_tree=null;
        CommonTree dist_tree=null;
        CommonTree LPAREN955_tree=null;
        CommonTree COMMA957_tree=null;
        CommonTree RPAREN959_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_DISTINCT=new RewriteRuleTokenStream(adaptor,"token KW_DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_functionName=new RewriteRuleSubtreeStream(adaptor,"rule functionName");
         msgs.push("function specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2032:5: ( functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName ) -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? ) -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2033:5: functionName LPAREN ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? ) RPAREN
            {
            pushFollow(FOLLOW_functionName_in_function14872);
            functionName954=functionName();
            _fsp--;

            stream_functionName.add(functionName954.getTree());
            LPAREN955=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_function14878); 
            stream_LPAREN.add(LPAREN955);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2035:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==STAR) ) {
                alt286=1;
            }
            else if ( (LA286_0==StringLiteral||LA286_0==KW_IF||LA286_0==KW_NOT||LA286_0==Identifier||(LA286_0>=LPAREN && LA286_0<=RPAREN)||LA286_0==Number||LA286_0==KW_MAP||LA286_0==KW_ARRAY||(LA286_0>=KW_STRUCT && LA286_0<=KW_UNIONTYPE)||LA286_0==KW_DISTINCT||LA286_0==PLUS||(LA286_0>=KW_CAST && LA286_0<=KW_CASE)||(LA286_0>=BigintLiteral && LA286_0<=CharSetName)||LA286_0==KW_NULL||(LA286_0>=MINUS && LA286_0<=TILDE)||(LA286_0>=KW_TRUE && LA286_0<=KW_FALSE)) ) {
                alt286=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("2035:7: ( (star= STAR ) | (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )? )", 286, 0, input);

                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2036:9: (star= STAR )
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2036:9: (star= STAR )
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2036:10: star= STAR
                    {
                    star=(Token)input.LT(1);
                    match(input,STAR,FOLLOW_STAR_in_function14899); 
                    stream_STAR.add(star);


                    }


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:11: (dist= KW_DISTINCT )? ( expression ( COMMA expression )* )?
                    {
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:11: (dist= KW_DISTINCT )?
                    int alt283=2;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==KW_DISTINCT) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:12: dist= KW_DISTINCT
                            {
                            dist=(Token)input.LT(1);
                            match(input,KW_DISTINCT,FOLLOW_KW_DISTINCT_in_function14915); 
                            stream_KW_DISTINCT.add(dist);


                            }
                            break;

                    }

                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:31: ( expression ( COMMA expression )* )?
                    int alt285=2;
                    int LA285_0 = input.LA(1);

                    if ( (LA285_0==StringLiteral||LA285_0==KW_IF||LA285_0==KW_NOT||LA285_0==Identifier||LA285_0==LPAREN||LA285_0==Number||LA285_0==KW_MAP||LA285_0==KW_ARRAY||(LA285_0>=KW_STRUCT && LA285_0<=KW_UNIONTYPE)||LA285_0==PLUS||(LA285_0>=KW_CAST && LA285_0<=KW_CASE)||(LA285_0>=BigintLiteral && LA285_0<=CharSetName)||LA285_0==KW_NULL||(LA285_0>=MINUS && LA285_0<=TILDE)||(LA285_0>=KW_TRUE && LA285_0<=KW_FALSE)) ) {
                        alt285=1;
                    }
                    switch (alt285) {
                        case 1 :
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:32: expression ( COMMA expression )*
                            {
                            pushFollow(FOLLOW_expression_in_function14920);
                            expression956=expression();
                            _fsp--;

                            stream_expression.add(expression956.getTree());
                            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:43: ( COMMA expression )*
                            loop284:
                            do {
                                int alt284=2;
                                int LA284_0 = input.LA(1);

                                if ( (LA284_0==COMMA) ) {
                                    alt284=1;
                                }


                                switch (alt284) {
                            	case 1 :
                            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2037:44: COMMA expression
                            	    {
                            	    COMMA957=(Token)input.LT(1);
                            	    match(input,COMMA,FOLLOW_COMMA_in_function14923); 
                            	    stream_COMMA.add(COMMA957);

                            	    pushFollow(FOLLOW_expression_in_function14925);
                            	    expression958=expression();
                            	    _fsp--;

                            	    stream_expression.add(expression958.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop284;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RPAREN959=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_function14943); 
            stream_RPAREN.add(RPAREN959);


            // AST REWRITE
            // elements: functionName, functionName, expression, functionName, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2039:12: -> {$star != null}? ^( TOK_FUNCTIONSTAR functionName )
            if (star != null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2039:32: ^( TOK_FUNCTIONSTAR functionName )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTIONSTAR, "TOK_FUNCTIONSTAR"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 2040:12: -> {$dist == null}? ^( TOK_FUNCTION functionName ( ( expression )+ )? )
            if (dist == null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2040:32: ^( TOK_FUNCTION functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2040:60: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.next());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 2041:29: -> ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2041:32: ^( TOK_FUNCTIONDI functionName ( ( expression )+ )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTIONDI, "TOK_FUNCTIONDI"), root_1);

                adaptor.addChild(root_1, stream_functionName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2041:62: ( ( expression )+ )?
                if ( stream_expression.hasNext() ) {
                    if ( !(stream_expression.hasNext()) ) {
                        throw new RewriteEarlyExitException();
                    }
                    while ( stream_expression.hasNext() ) {
                        adaptor.addChild(root_1, stream_expression.next());

                    }
                    stream_expression.reset();

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end function

    public static class functionName_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start functionName
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2044:1: functionName : ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE );
    public final functionName_return functionName() throws RecognitionException {
        functionName_return retval = new functionName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set960=null;

        CommonTree set960_tree=null;

         msgs.push("function name"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2047:5: ( Identifier | KW_IF | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set960=(Token)input.LT(1);
            if ( input.LA(1)==KW_IF||input.LA(1)==Identifier||input.LA(1)==KW_MAP||input.LA(1)==KW_ARRAY||(input.LA(1)>=KW_STRUCT && input.LA(1)<=KW_UNIONTYPE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set960));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_functionName0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end functionName

    public static class castExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start castExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2051:1: castExpression : KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) ;
    public final castExpression_return castExpression() throws RecognitionException {
        castExpression_return retval = new castExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CAST961=null;
        Token LPAREN962=null;
        Token KW_AS964=null;
        Token RPAREN966=null;
        expression_return expression963 = null;

        primitiveType_return primitiveType965 = null;


        CommonTree KW_CAST961_tree=null;
        CommonTree LPAREN962_tree=null;
        CommonTree KW_AS964_tree=null;
        CommonTree RPAREN966_tree=null;
        RewriteRuleTokenStream stream_KW_AS=new RewriteRuleTokenStream(adaptor,"token KW_AS");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_KW_CAST=new RewriteRuleTokenStream(adaptor,"token KW_CAST");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_primitiveType=new RewriteRuleSubtreeStream(adaptor,"rule primitiveType");
         msgs.push("cast expression"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2054:5: ( KW_CAST LPAREN expression KW_AS primitiveType RPAREN -> ^( TOK_FUNCTION primitiveType expression ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2055:5: KW_CAST LPAREN expression KW_AS primitiveType RPAREN
            {
            KW_CAST961=(Token)input.LT(1);
            match(input,KW_CAST,FOLLOW_KW_CAST_in_castExpression15105); 
            stream_KW_CAST.add(KW_CAST961);

            LPAREN962=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_castExpression15111); 
            stream_LPAREN.add(LPAREN962);

            pushFollow(FOLLOW_expression_in_castExpression15123);
            expression963=expression();
            _fsp--;

            stream_expression.add(expression963.getTree());
            KW_AS964=(Token)input.LT(1);
            match(input,KW_AS,FOLLOW_KW_AS_in_castExpression15135); 
            stream_KW_AS.add(KW_AS964);

            pushFollow(FOLLOW_primitiveType_in_castExpression15147);
            primitiveType965=primitiveType();
            _fsp--;

            stream_primitiveType.add(primitiveType965.getTree());
            RPAREN966=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_castExpression15153); 
            stream_RPAREN.add(RPAREN966);


            // AST REWRITE
            // elements: expression, primitiveType
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2060:12: -> ^( TOK_FUNCTION primitiveType expression )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2060:15: ^( TOK_FUNCTION primitiveType expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_primitiveType.next());
                adaptor.addChild(root_1, stream_expression.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end castExpression

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start caseExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2063:1: caseExpression : KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) ;
    public final caseExpression_return caseExpression() throws RecognitionException {
        caseExpression_return retval = new caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CASE967=null;
        Token KW_WHEN969=null;
        Token KW_THEN971=null;
        Token KW_ELSE973=null;
        Token KW_END975=null;
        expression_return expression968 = null;

        expression_return expression970 = null;

        expression_return expression972 = null;

        expression_return expression974 = null;


        CommonTree KW_CASE967_tree=null;
        CommonTree KW_WHEN969_tree=null;
        CommonTree KW_THEN971_tree=null;
        CommonTree KW_ELSE973_tree=null;
        CommonTree KW_END975_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2066:5: ( KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_CASE ( expression )* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2067:5: KW_CASE expression ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE967=(Token)input.LT(1);
            match(input,KW_CASE,FOLLOW_KW_CASE_in_caseExpression15194); 
            stream_KW_CASE.add(KW_CASE967);

            pushFollow(FOLLOW_expression_in_caseExpression15196);
            expression968=expression();
            _fsp--;

            stream_expression.add(expression968.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2068:5: ( KW_WHEN expression KW_THEN expression )+
            int cnt287=0;
            loop287:
            do {
                int alt287=2;
                int LA287_0 = input.LA(1);

                if ( (LA287_0==KW_WHEN) ) {
                    alt287=1;
                }


                switch (alt287) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2068:6: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN969=(Token)input.LT(1);
            	    match(input,KW_WHEN,FOLLOW_KW_WHEN_in_caseExpression15203); 
            	    stream_KW_WHEN.add(KW_WHEN969);

            	    pushFollow(FOLLOW_expression_in_caseExpression15205);
            	    expression970=expression();
            	    _fsp--;

            	    stream_expression.add(expression970.getTree());
            	    KW_THEN971=(Token)input.LT(1);
            	    match(input,KW_THEN,FOLLOW_KW_THEN_in_caseExpression15207); 
            	    stream_KW_THEN.add(KW_THEN971);

            	    pushFollow(FOLLOW_expression_in_caseExpression15209);
            	    expression972=expression();
            	    _fsp--;

            	    stream_expression.add(expression972.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt287 >= 1 ) break loop287;
                        EarlyExitException eee =
                            new EarlyExitException(287, input);
                        throw eee;
                }
                cnt287++;
            } while (true);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2069:5: ( KW_ELSE expression )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==KW_ELSE) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2069:6: KW_ELSE expression
                    {
                    KW_ELSE973=(Token)input.LT(1);
                    match(input,KW_ELSE,FOLLOW_KW_ELSE_in_caseExpression15218); 
                    stream_KW_ELSE.add(KW_ELSE973);

                    pushFollow(FOLLOW_expression_in_caseExpression15220);
                    expression974=expression();
                    _fsp--;

                    stream_expression.add(expression974.getTree());

                    }
                    break;

            }

            KW_END975=(Token)input.LT(1);
            match(input,KW_END,FOLLOW_KW_END_in_caseExpression15228); 
            stream_KW_END.add(KW_END975);


            // AST REWRITE
            // elements: expression, KW_CASE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2070:12: -> ^( TOK_FUNCTION KW_CASE ( expression )* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2070:15: ^( TOK_FUNCTION KW_CASE ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_KW_CASE.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2070:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end caseExpression

    public static class whenExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start whenExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2073:1: whenExpression : KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) ;
    public final whenExpression_return whenExpression() throws RecognitionException {
        whenExpression_return retval = new whenExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_CASE976=null;
        Token KW_WHEN977=null;
        Token KW_THEN979=null;
        Token KW_ELSE981=null;
        Token KW_END983=null;
        expression_return expression978 = null;

        expression_return expression980 = null;

        expression_return expression982 = null;


        CommonTree KW_CASE976_tree=null;
        CommonTree KW_WHEN977_tree=null;
        CommonTree KW_THEN979_tree=null;
        CommonTree KW_ELSE981_tree=null;
        CommonTree KW_END983_tree=null;
        RewriteRuleTokenStream stream_KW_THEN=new RewriteRuleTokenStream(adaptor,"token KW_THEN");
        RewriteRuleTokenStream stream_KW_CASE=new RewriteRuleTokenStream(adaptor,"token KW_CASE");
        RewriteRuleTokenStream stream_KW_WHEN=new RewriteRuleTokenStream(adaptor,"token KW_WHEN");
        RewriteRuleTokenStream stream_KW_END=new RewriteRuleTokenStream(adaptor,"token KW_END");
        RewriteRuleTokenStream stream_KW_ELSE=new RewriteRuleTokenStream(adaptor,"token KW_ELSE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         msgs.push("case expression"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2076:5: ( KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END -> ^( TOK_FUNCTION KW_WHEN ( expression )* ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2077:5: KW_CASE ( KW_WHEN expression KW_THEN expression )+ ( KW_ELSE expression )? KW_END
            {
            KW_CASE976=(Token)input.LT(1);
            match(input,KW_CASE,FOLLOW_KW_CASE_in_whenExpression15270); 
            stream_KW_CASE.add(KW_CASE976);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2078:6: ( KW_WHEN expression KW_THEN expression )+
            int cnt289=0;
            loop289:
            do {
                int alt289=2;
                int LA289_0 = input.LA(1);

                if ( (LA289_0==KW_WHEN) ) {
                    alt289=1;
                }


                switch (alt289) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2078:8: KW_WHEN expression KW_THEN expression
            	    {
            	    KW_WHEN977=(Token)input.LT(1);
            	    match(input,KW_WHEN,FOLLOW_KW_WHEN_in_whenExpression15279); 
            	    stream_KW_WHEN.add(KW_WHEN977);

            	    pushFollow(FOLLOW_expression_in_whenExpression15281);
            	    expression978=expression();
            	    _fsp--;

            	    stream_expression.add(expression978.getTree());
            	    KW_THEN979=(Token)input.LT(1);
            	    match(input,KW_THEN,FOLLOW_KW_THEN_in_whenExpression15283); 
            	    stream_KW_THEN.add(KW_THEN979);

            	    pushFollow(FOLLOW_expression_in_whenExpression15285);
            	    expression980=expression();
            	    _fsp--;

            	    stream_expression.add(expression980.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt289 >= 1 ) break loop289;
                        EarlyExitException eee =
                            new EarlyExitException(289, input);
                        throw eee;
                }
                cnt289++;
            } while (true);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2079:5: ( KW_ELSE expression )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==KW_ELSE) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2079:6: KW_ELSE expression
                    {
                    KW_ELSE981=(Token)input.LT(1);
                    match(input,KW_ELSE,FOLLOW_KW_ELSE_in_whenExpression15294); 
                    stream_KW_ELSE.add(KW_ELSE981);

                    pushFollow(FOLLOW_expression_in_whenExpression15296);
                    expression982=expression();
                    _fsp--;

                    stream_expression.add(expression982.getTree());

                    }
                    break;

            }

            KW_END983=(Token)input.LT(1);
            match(input,KW_END,FOLLOW_KW_END_in_whenExpression15304); 
            stream_KW_END.add(KW_END983);


            // AST REWRITE
            // elements: KW_WHEN, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2080:12: -> ^( TOK_FUNCTION KW_WHEN ( expression )* )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2080:15: ^( TOK_FUNCTION KW_WHEN ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_KW_WHEN.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2080:38: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.next());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end whenExpression

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start constant
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2083:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );
    public final constant_return constant() throws RecognitionException {
        constant_return retval = new constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Number984=null;
        Token StringLiteral985=null;
        Token BigintLiteral987=null;
        Token SmallintLiteral988=null;
        Token TinyintLiteral989=null;
        stringLiteralSequence_return stringLiteralSequence986 = null;

        charSetStringLiteral_return charSetStringLiteral990 = null;

        booleanValue_return booleanValue991 = null;


        CommonTree Number984_tree=null;
        CommonTree StringLiteral985_tree=null;
        CommonTree BigintLiteral987_tree=null;
        CommonTree SmallintLiteral988_tree=null;
        CommonTree TinyintLiteral989_tree=null;

         msgs.push("constant"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2086:5: ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue )
            int alt291=8;
            switch ( input.LA(1) ) {
            case Number:
                {
                alt291=1;
                }
                break;
            case StringLiteral:
                {
                int LA291_2 = input.LA(2);

                if ( (LA291_2==StringLiteral) ) {
                    alt291=3;
                }
                else if ( (LA291_2==EOF||LA291_2==KW_FROM||LA291_2==KW_NOT||LA291_2==KW_AS||LA291_2==KW_OR||(LA291_2>=Identifier && LA291_2<=KW_WITH)||(LA291_2>=RPAREN && LA291_2<=COMMA)||LA291_2==KW_LIKE||LA291_2==KW_IN||LA291_2==EQUAL||LA291_2==DOT||LA291_2==KW_DESC||LA291_2==KW_SELECT||LA291_2==KW_GROUP||(LA291_2>=KW_RECORDWRITER && LA291_2<=KW_ROW)||LA291_2==KW_MAP||LA291_2==KW_ASC||(LA291_2>=LESSTHAN && LA291_2<=GREATERTHAN)||(LA291_2>=KW_UNION && LA291_2<=KW_INSERT)||LA291_2==KW_LIMIT||(LA291_2>=KW_USING && LA291_2<=PLUS)||LA291_2==KW_REDUCE||(LA291_2>=KW_JOIN && LA291_2<=KW_LEFT)||(LA291_2>=KW_RIGHT && LA291_2<=KW_FULL)||LA291_2==KW_WHERE||LA291_2==KW_GROUPING||(LA291_2>=KW_HAVING && LA291_2<=KW_SORT)||(LA291_2>=KW_WHEN && LA291_2<=KW_END)||(LA291_2>=LSQUARE && LA291_2<=MINUS)||(LA291_2>=KW_IS && LA291_2<=KW_AND)) ) {
                    alt291=2;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("2083:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );", 291, 2, input);

                    throw nvae;
                }
                }
                break;
            case BigintLiteral:
                {
                alt291=4;
                }
                break;
            case SmallintLiteral:
                {
                alt291=5;
                }
                break;
            case TinyintLiteral:
                {
                alt291=6;
                }
                break;
            case CharSetName:
                {
                alt291=7;
                }
                break;
            case KW_TRUE:
            case KW_FALSE:
                {
                alt291=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("2083:1: constant : ( Number | StringLiteral | stringLiteralSequence | BigintLiteral | SmallintLiteral | TinyintLiteral | charSetStringLiteral | booleanValue );", 291, 0, input);

                throw nvae;
            }

            switch (alt291) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2087:5: Number
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Number984=(Token)input.LT(1);
                    match(input,Number,FOLLOW_Number_in_constant15346); 
                    Number984_tree = (CommonTree)adaptor.create(Number984);
                    adaptor.addChild(root_0, Number984_tree);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2088:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    StringLiteral985=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_constant15354); 
                    StringLiteral985_tree = (CommonTree)adaptor.create(StringLiteral985);
                    adaptor.addChild(root_0, StringLiteral985_tree);


                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2089:7: stringLiteralSequence
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringLiteralSequence_in_constant15362);
                    stringLiteralSequence986=stringLiteralSequence();
                    _fsp--;

                    adaptor.addChild(root_0, stringLiteralSequence986.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2090:7: BigintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    BigintLiteral987=(Token)input.LT(1);
                    match(input,BigintLiteral,FOLLOW_BigintLiteral_in_constant15370); 
                    BigintLiteral987_tree = (CommonTree)adaptor.create(BigintLiteral987);
                    adaptor.addChild(root_0, BigintLiteral987_tree);


                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2091:7: SmallintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SmallintLiteral988=(Token)input.LT(1);
                    match(input,SmallintLiteral,FOLLOW_SmallintLiteral_in_constant15378); 
                    SmallintLiteral988_tree = (CommonTree)adaptor.create(SmallintLiteral988);
                    adaptor.addChild(root_0, SmallintLiteral988_tree);


                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2092:7: TinyintLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    TinyintLiteral989=(Token)input.LT(1);
                    match(input,TinyintLiteral,FOLLOW_TinyintLiteral_in_constant15386); 
                    TinyintLiteral989_tree = (CommonTree)adaptor.create(TinyintLiteral989);
                    adaptor.addChild(root_0, TinyintLiteral989_tree);


                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2093:7: charSetStringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_charSetStringLiteral_in_constant15394);
                    charSetStringLiteral990=charSetStringLiteral();
                    _fsp--;

                    adaptor.addChild(root_0, charSetStringLiteral990.getTree());

                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2094:7: booleanValue
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_booleanValue_in_constant15402);
                    booleanValue991=booleanValue();
                    _fsp--;

                    adaptor.addChild(root_0, booleanValue991.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end constant

    public static class stringLiteralSequence_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start stringLiteralSequence
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2097:1: stringLiteralSequence : StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) ;
    public final stringLiteralSequence_return stringLiteralSequence() throws RecognitionException {
        stringLiteralSequence_return retval = new stringLiteralSequence_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token StringLiteral992=null;
        Token StringLiteral993=null;

        CommonTree StringLiteral992_tree=null;
        CommonTree StringLiteral993_tree=null;
        RewriteRuleTokenStream stream_StringLiteral=new RewriteRuleTokenStream(adaptor,"token StringLiteral");

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2098:5: ( StringLiteral ( StringLiteral )+ -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2099:5: StringLiteral ( StringLiteral )+
            {
            StringLiteral992=(Token)input.LT(1);
            match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence15423); 
            stream_StringLiteral.add(StringLiteral992);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2099:19: ( StringLiteral )+
            int cnt292=0;
            loop292:
            do {
                int alt292=2;
                int LA292_0 = input.LA(1);

                if ( (LA292_0==StringLiteral) ) {
                    alt292=1;
                }


                switch (alt292) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2099:19: StringLiteral
            	    {
            	    StringLiteral993=(Token)input.LT(1);
            	    match(input,StringLiteral,FOLLOW_StringLiteral_in_stringLiteralSequence15425); 
            	    stream_StringLiteral.add(StringLiteral993);


            	    }
            	    break;

            	default :
            	    if ( cnt292 >= 1 ) break loop292;
                        EarlyExitException eee =
                            new EarlyExitException(292, input);
                        throw eee;
                }
                cnt292++;
            } while (true);


            // AST REWRITE
            // elements: StringLiteral, StringLiteral
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2099:34: -> ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2099:37: ^( TOK_STRINGLITERALSEQUENCE StringLiteral ( StringLiteral )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_STRINGLITERALSEQUENCE, "TOK_STRINGLITERALSEQUENCE"), root_1);

                adaptor.addChild(root_1, stream_StringLiteral.next());
                if ( !(stream_StringLiteral.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_StringLiteral.hasNext() ) {
                    adaptor.addChild(root_1, stream_StringLiteral.next());

                }
                stream_StringLiteral.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end stringLiteralSequence

    public static class charSetStringLiteral_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start charSetStringLiteral
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2102:1: charSetStringLiteral : csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) ;
    public final charSetStringLiteral_return charSetStringLiteral() throws RecognitionException {
        charSetStringLiteral_return retval = new charSetStringLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token csName=null;
        Token csLiteral=null;

        CommonTree csName_tree=null;
        CommonTree csLiteral_tree=null;
        RewriteRuleTokenStream stream_CharSetLiteral=new RewriteRuleTokenStream(adaptor,"token CharSetLiteral");
        RewriteRuleTokenStream stream_CharSetName=new RewriteRuleTokenStream(adaptor,"token CharSetName");

         msgs.push("character string literal"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2105:5: (csName= CharSetName csLiteral= CharSetLiteral -> ^( TOK_CHARSETLITERAL $csName $csLiteral) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2106:5: csName= CharSetName csLiteral= CharSetLiteral
            {
            csName=(Token)input.LT(1);
            match(input,CharSetName,FOLLOW_CharSetName_in_charSetStringLiteral15470); 
            stream_CharSetName.add(csName);

            csLiteral=(Token)input.LT(1);
            match(input,CharSetLiteral,FOLLOW_CharSetLiteral_in_charSetStringLiteral15474); 
            stream_CharSetLiteral.add(csLiteral);


            // AST REWRITE
            // elements: csName, csLiteral
            // token labels: csName, csLiteral
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleTokenStream stream_csName=new RewriteRuleTokenStream(adaptor,"token csName",csName);
            RewriteRuleTokenStream stream_csLiteral=new RewriteRuleTokenStream(adaptor,"token csLiteral",csLiteral);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2106:49: -> ^( TOK_CHARSETLITERAL $csName $csLiteral)
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2106:52: ^( TOK_CHARSETLITERAL $csName $csLiteral)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_CHARSETLITERAL, "TOK_CHARSETLITERAL"), root_1);

                adaptor.addChild(root_1, stream_csName.next());
                adaptor.addChild(root_1, stream_csLiteral.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end charSetStringLiteral

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2109:1: expression : precedenceOrExpression ;
    public final expression_return expression() throws RecognitionException {
        expression_return retval = new expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceOrExpression_return precedenceOrExpression994 = null;



         msgs.push("expression specification"); 
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2112:5: ( precedenceOrExpression )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2113:5: precedenceOrExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceOrExpression_in_expression15517);
            precedenceOrExpression994=precedenceOrExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceOrExpression994.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

             msgs.pop(); 
        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expression

    public static class atomExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start atomExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2116:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );
    public final atomExpression_return atomExpression() throws RecognitionException {
        atomExpression_return retval = new atomExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NULL995=null;
        Token LPAREN1002=null;
        Token RPAREN1004=null;
        constant_return constant996 = null;

        function_return function997 = null;

        castExpression_return castExpression998 = null;

        caseExpression_return caseExpression999 = null;

        whenExpression_return whenExpression1000 = null;

        tableOrColumn_return tableOrColumn1001 = null;

        expression_return expression1003 = null;


        CommonTree KW_NULL995_tree=null;
        CommonTree LPAREN1002_tree=null;
        CommonTree RPAREN1004_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2117:5: ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN )
            int alt293=8;
            switch ( input.LA(1) ) {
            case KW_NULL:
                {
                alt293=1;
                }
                break;
            case StringLiteral:
            case Number:
            case BigintLiteral:
            case SmallintLiteral:
            case TinyintLiteral:
            case CharSetName:
            case KW_TRUE:
            case KW_FALSE:
                {
                alt293=2;
                }
                break;
            case Identifier:
                {
                int LA293_10 = input.LA(2);

                if ( (LA293_10==LPAREN) ) {
                    alt293=3;
                }
                else if ( (LA293_10==EOF||LA293_10==KW_FROM||LA293_10==KW_NOT||LA293_10==KW_AS||LA293_10==KW_OR||(LA293_10>=Identifier && LA293_10<=KW_WITH)||(LA293_10>=RPAREN && LA293_10<=COMMA)||LA293_10==KW_LIKE||LA293_10==KW_IN||LA293_10==EQUAL||LA293_10==DOT||LA293_10==KW_DESC||LA293_10==KW_SELECT||LA293_10==KW_GROUP||(LA293_10>=KW_RECORDWRITER && LA293_10<=KW_ROW)||LA293_10==KW_MAP||LA293_10==KW_ASC||(LA293_10>=LESSTHAN && LA293_10<=GREATERTHAN)||(LA293_10>=KW_UNION && LA293_10<=KW_INSERT)||LA293_10==KW_LIMIT||(LA293_10>=KW_USING && LA293_10<=PLUS)||LA293_10==KW_REDUCE||(LA293_10>=KW_JOIN && LA293_10<=KW_LEFT)||(LA293_10>=KW_RIGHT && LA293_10<=KW_FULL)||LA293_10==KW_WHERE||LA293_10==KW_GROUPING||(LA293_10>=KW_HAVING && LA293_10<=KW_SORT)||(LA293_10>=KW_WHEN && LA293_10<=KW_END)||(LA293_10>=LSQUARE && LA293_10<=MINUS)||(LA293_10>=KW_IS && LA293_10<=KW_AND)) ) {
                    alt293=7;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("2116:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 293, 10, input);

                    throw nvae;
                }
                }
                break;
            case KW_CAST:
                {
                alt293=4;
                }
                break;
            case KW_CASE:
                {
                int LA293_12 = input.LA(2);

                if ( (LA293_12==StringLiteral||LA293_12==KW_IF||LA293_12==KW_NOT||LA293_12==Identifier||LA293_12==LPAREN||LA293_12==Number||LA293_12==KW_MAP||LA293_12==KW_ARRAY||(LA293_12>=KW_STRUCT && LA293_12<=KW_UNIONTYPE)||LA293_12==PLUS||(LA293_12>=KW_CAST && LA293_12<=KW_CASE)||(LA293_12>=BigintLiteral && LA293_12<=CharSetName)||LA293_12==KW_NULL||(LA293_12>=MINUS && LA293_12<=TILDE)||(LA293_12>=KW_TRUE && LA293_12<=KW_FALSE)) ) {
                    alt293=5;
                }
                else if ( (LA293_12==KW_WHEN) ) {
                    alt293=6;
                }
                else {
                    NoViableAltException nvae =
                        new NoViableAltException("2116:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 293, 12, input);

                    throw nvae;
                }
                }
                break;
            case KW_IF:
            case KW_MAP:
            case KW_ARRAY:
            case KW_STRUCT:
            case KW_UNIONTYPE:
                {
                alt293=3;
                }
                break;
            case LPAREN:
                {
                alt293=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("2116:1: atomExpression : ( KW_NULL -> TOK_NULL | constant | function | castExpression | caseExpression | whenExpression | tableOrColumn | LPAREN expression RPAREN );", 293, 0, input);

                throw nvae;
            }

            switch (alt293) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2118:5: KW_NULL
                    {
                    KW_NULL995=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_atomExpression15538); 
                    stream_KW_NULL.add(KW_NULL995);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2118:13: -> TOK_NULL
                    {
                        adaptor.addChild(root_0, adaptor.create(TOK_NULL, "TOK_NULL"));

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2119:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_atomExpression15550);
                    constant996=constant();
                    _fsp--;

                    adaptor.addChild(root_0, constant996.getTree());

                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2120:7: function
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_function_in_atomExpression15558);
                    function997=function();
                    _fsp--;

                    adaptor.addChild(root_0, function997.getTree());

                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2121:7: castExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_atomExpression15566);
                    castExpression998=castExpression();
                    _fsp--;

                    adaptor.addChild(root_0, castExpression998.getTree());

                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2122:7: caseExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_caseExpression_in_atomExpression15574);
                    caseExpression999=caseExpression();
                    _fsp--;

                    adaptor.addChild(root_0, caseExpression999.getTree());

                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2123:7: whenExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_whenExpression_in_atomExpression15582);
                    whenExpression1000=whenExpression();
                    _fsp--;

                    adaptor.addChild(root_0, whenExpression1000.getTree());

                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2124:7: tableOrColumn
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_tableOrColumn_in_atomExpression15590);
                    tableOrColumn1001=tableOrColumn();
                    _fsp--;

                    adaptor.addChild(root_0, tableOrColumn1001.getTree());

                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2125:7: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN1002=(Token)input.LT(1);
                    match(input,LPAREN,FOLLOW_LPAREN_in_atomExpression15598); 
                    pushFollow(FOLLOW_expression_in_atomExpression15601);
                    expression1003=expression();
                    _fsp--;

                    adaptor.addChild(root_0, expression1003.getTree());
                    RPAREN1004=(Token)input.LT(1);
                    match(input,RPAREN,FOLLOW_RPAREN_in_atomExpression15603); 

                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end atomExpression

    public static class precedenceFieldExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceFieldExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2129:1: precedenceFieldExpression : atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )* ;
    public final precedenceFieldExpression_return precedenceFieldExpression() throws RecognitionException {
        precedenceFieldExpression_return retval = new precedenceFieldExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LSQUARE1006=null;
        Token RSQUARE1008=null;
        Token DOT1009=null;
        Token Identifier1010=null;
        atomExpression_return atomExpression1005 = null;

        expression_return expression1007 = null;


        CommonTree LSQUARE1006_tree=null;
        CommonTree RSQUARE1008_tree=null;
        CommonTree DOT1009_tree=null;
        CommonTree Identifier1010_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2130:5: ( atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:5: atomExpression ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_atomExpression_in_precedenceFieldExpression15626);
            atomExpression1005=atomExpression();
            _fsp--;

            adaptor.addChild(root_0, atomExpression1005.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:20: ( ( LSQUARE expression RSQUARE ) | ( DOT Identifier ) )*
            loop294:
            do {
                int alt294=3;
                int LA294_0 = input.LA(1);

                if ( (LA294_0==LSQUARE) ) {
                    alt294=1;
                }
                else if ( (LA294_0==DOT) ) {
                    alt294=2;
                }


                switch (alt294) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:21: ( LSQUARE expression RSQUARE )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:21: ( LSQUARE expression RSQUARE )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:22: LSQUARE expression RSQUARE
            	    {
            	    LSQUARE1006=(Token)input.LT(1);
            	    match(input,LSQUARE,FOLLOW_LSQUARE_in_precedenceFieldExpression15630); 
            	    LSQUARE1006_tree = (CommonTree)adaptor.create(LSQUARE1006);
            	    root_0 = (CommonTree)adaptor.becomeRoot(LSQUARE1006_tree, root_0);

            	    pushFollow(FOLLOW_expression_in_precedenceFieldExpression15633);
            	    expression1007=expression();
            	    _fsp--;

            	    adaptor.addChild(root_0, expression1007.getTree());
            	    RSQUARE1008=(Token)input.LT(1);
            	    match(input,RSQUARE,FOLLOW_RSQUARE_in_precedenceFieldExpression15635); 

            	    }


            	    }
            	    break;
            	case 2 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:54: ( DOT Identifier )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:54: ( DOT Identifier )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2131:55: DOT Identifier
            	    {
            	    DOT1009=(Token)input.LT(1);
            	    match(input,DOT,FOLLOW_DOT_in_precedenceFieldExpression15642); 
            	    DOT1009_tree = (CommonTree)adaptor.create(DOT1009);
            	    root_0 = (CommonTree)adaptor.becomeRoot(DOT1009_tree, root_0);

            	    Identifier1010=(Token)input.LT(1);
            	    match(input,Identifier,FOLLOW_Identifier_in_precedenceFieldExpression15645); 
            	    Identifier1010_tree = (CommonTree)adaptor.create(Identifier1010);
            	    adaptor.addChild(root_0, Identifier1010_tree);


            	    }


            	    }
            	    break;

            	default :
            	    break loop294;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceFieldExpression

    public static class precedenceUnaryOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnaryOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2134:1: precedenceUnaryOperator : ( PLUS | MINUS | TILDE );
    public final precedenceUnaryOperator_return precedenceUnaryOperator() throws RecognitionException {
        precedenceUnaryOperator_return retval = new precedenceUnaryOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set1011=null;

        CommonTree set1011_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2135:5: ( PLUS | MINUS | TILDE )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1011=(Token)input.LT(1);
            if ( input.LA(1)==PLUS||(input.LA(1)>=MINUS && input.LA(1)<=TILDE) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set1011));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceUnaryOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnaryOperator

    public static class nullCondition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start nullCondition
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2139:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );
    public final nullCondition_return nullCondition() throws RecognitionException {
        nullCondition_return retval = new nullCondition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NULL1012=null;
        Token KW_NOT1013=null;
        Token KW_NULL1014=null;

        CommonTree KW_NULL1012_tree=null;
        CommonTree KW_NOT1013_tree=null;
        CommonTree KW_NULL1014_tree=null;
        RewriteRuleTokenStream stream_KW_NULL=new RewriteRuleTokenStream(adaptor,"token KW_NULL");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2140:5: ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) )
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==KW_NULL) ) {
                alt295=1;
            }
            else if ( (LA295_0==KW_NOT) ) {
                alt295=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("2139:1: nullCondition : ( KW_NULL -> ^( TOK_ISNULL ) | KW_NOT KW_NULL -> ^( TOK_ISNOTNULL ) );", 295, 0, input);

                throw nvae;
            }
            switch (alt295) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2141:5: KW_NULL
                    {
                    KW_NULL1012=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition15698); 
                    stream_KW_NULL.add(KW_NULL1012);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2141:13: -> ^( TOK_ISNULL )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2141:16: ^( TOK_ISNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ISNULL, "TOK_ISNULL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2142:7: KW_NOT KW_NULL
                    {
                    KW_NOT1013=(Token)input.LT(1);
                    match(input,KW_NOT,FOLLOW_KW_NOT_in_nullCondition15712); 
                    stream_KW_NOT.add(KW_NOT1013);

                    KW_NULL1014=(Token)input.LT(1);
                    match(input,KW_NULL,FOLLOW_KW_NULL_in_nullCondition15714); 
                    stream_KW_NULL.add(KW_NULL1014);


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 2142:22: -> ^( TOK_ISNOTNULL )
                    {
                        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2142:25: ^( TOK_ISNOTNULL )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_ISNOTNULL, "TOK_ISNOTNULL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }



                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end nullCondition

    public static class precedenceUnaryPrefixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnaryPrefixExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2145:1: precedenceUnaryPrefixExpression : ( precedenceUnaryOperator )* precedenceFieldExpression ;
    public final precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression() throws RecognitionException {
        precedenceUnaryPrefixExpression_return retval = new precedenceUnaryPrefixExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceUnaryOperator_return precedenceUnaryOperator1015 = null;

        precedenceFieldExpression_return precedenceFieldExpression1016 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2146:5: ( ( precedenceUnaryOperator )* precedenceFieldExpression )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2147:5: ( precedenceUnaryOperator )* precedenceFieldExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2147:5: ( precedenceUnaryOperator )*
            loop296:
            do {
                int alt296=2;
                int LA296_0 = input.LA(1);

                if ( (LA296_0==PLUS||(LA296_0>=MINUS && LA296_0<=TILDE)) ) {
                    alt296=1;
                }


                switch (alt296) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2147:6: precedenceUnaryOperator
            	    {
            	    pushFollow(FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression15742);
            	    precedenceUnaryOperator1015=precedenceUnaryOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceUnaryOperator1015.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop296;
                }
            } while (true);

            pushFollow(FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression15747);
            precedenceFieldExpression1016=precedenceFieldExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceFieldExpression1016.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnaryPrefixExpression

    public static class precedenceUnarySuffixExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceUnarySuffixExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2150:1: precedenceUnarySuffixExpression : precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression ;
    public final precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression() throws RecognitionException {
        precedenceUnarySuffixExpression_return retval = new precedenceUnarySuffixExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        precedenceUnaryPrefixExpression_return precedenceUnaryPrefixExpression1017 = null;

        nullCondition_return nullCondition1018 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_KW_IS=new RewriteRuleTokenStream(adaptor,"token KW_IS");
        RewriteRuleSubtreeStream stream_precedenceUnaryPrefixExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceUnaryPrefixExpression");
        RewriteRuleSubtreeStream stream_nullCondition=new RewriteRuleSubtreeStream(adaptor,"rule nullCondition");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2151:5: ( precedenceUnaryPrefixExpression (a= KW_IS nullCondition )? -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression ) -> precedenceUnaryPrefixExpression )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2151:7: precedenceUnaryPrefixExpression (a= KW_IS nullCondition )?
            {
            pushFollow(FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression15764);
            precedenceUnaryPrefixExpression1017=precedenceUnaryPrefixExpression();
            _fsp--;

            stream_precedenceUnaryPrefixExpression.add(precedenceUnaryPrefixExpression1017.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2151:39: (a= KW_IS nullCondition )?
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==KW_IS) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2151:40: a= KW_IS nullCondition
                    {
                    a=(Token)input.LT(1);
                    match(input,KW_IS,FOLLOW_KW_IS_in_precedenceUnarySuffixExpression15769); 
                    stream_KW_IS.add(a);

                    pushFollow(FOLLOW_nullCondition_in_precedenceUnarySuffixExpression15771);
                    nullCondition1018=nullCondition();
                    _fsp--;

                    stream_nullCondition.add(nullCondition1018.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: precedenceUnaryPrefixExpression, nullCondition, precedenceUnaryPrefixExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2152:5: -> {$a != null}? ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
            if (a != null) {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2152:22: ^( TOK_FUNCTION nullCondition precedenceUnaryPrefixExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

                adaptor.addChild(root_1, stream_nullCondition.next());
                adaptor.addChild(root_1, stream_precedenceUnaryPrefixExpression.next());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 2153:5: -> precedenceUnaryPrefixExpression
            {
                adaptor.addChild(root_0, stream_precedenceUnaryPrefixExpression.next());

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceUnarySuffixExpression

    public static class precedenceBitwiseXorOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseXorOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2157:1: precedenceBitwiseXorOperator : BITWISEXOR ;
    public final precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator() throws RecognitionException {
        precedenceBitwiseXorOperator_return retval = new precedenceBitwiseXorOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BITWISEXOR1019=null;

        CommonTree BITWISEXOR1019_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2158:5: ( BITWISEXOR )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2159:5: BITWISEXOR
            {
            root_0 = (CommonTree)adaptor.nil();

            BITWISEXOR1019=(Token)input.LT(1);
            match(input,BITWISEXOR,FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator15819); 
            BITWISEXOR1019_tree = (CommonTree)adaptor.create(BITWISEXOR1019);
            adaptor.addChild(root_0, BITWISEXOR1019_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseXorOperator

    public static class precedenceBitwiseXorExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseXorExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2162:1: precedenceBitwiseXorExpression : precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )* ;
    public final precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression() throws RecognitionException {
        precedenceBitwiseXorExpression_return retval = new precedenceBitwiseXorExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression1020 = null;

        precedenceBitwiseXorOperator_return precedenceBitwiseXorOperator1021 = null;

        precedenceUnarySuffixExpression_return precedenceUnarySuffixExpression1022 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2163:5: ( precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2164:5: precedenceUnarySuffixExpression ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15840);
            precedenceUnarySuffixExpression1020=precedenceUnarySuffixExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceUnarySuffixExpression1020.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2164:37: ( precedenceBitwiseXorOperator precedenceUnarySuffixExpression )*
            loop298:
            do {
                int alt298=2;
                int LA298_0 = input.LA(1);

                if ( (LA298_0==BITWISEXOR) ) {
                    alt298=1;
                }


                switch (alt298) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2164:38: precedenceBitwiseXorOperator precedenceUnarySuffixExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression15843);
            	    precedenceBitwiseXorOperator1021=precedenceBitwiseXorOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseXorOperator1021.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15846);
            	    precedenceUnarySuffixExpression1022=precedenceUnarySuffixExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceUnarySuffixExpression1022.getTree());

            	    }
            	    break;

            	default :
            	    break loop298;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseXorExpression

    public static class precedenceStarOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceStarOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2168:1: precedenceStarOperator : ( STAR | DIVIDE | MOD | DIV );
    public final precedenceStarOperator_return precedenceStarOperator() throws RecognitionException {
        precedenceStarOperator_return retval = new precedenceStarOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set1023=null;

        CommonTree set1023_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2169:5: ( STAR | DIVIDE | MOD | DIV )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1023=(Token)input.LT(1);
            if ( (input.LA(1)>=DIVIDE && input.LA(1)<=STAR)||(input.LA(1)>=MOD && input.LA(1)<=DIV) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set1023));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceStarOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceStarOperator

    public static class precedenceStarExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceStarExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2173:1: precedenceStarExpression : precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )* ;
    public final precedenceStarExpression_return precedenceStarExpression() throws RecognitionException {
        precedenceStarExpression_return retval = new precedenceStarExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression1024 = null;

        precedenceStarOperator_return precedenceStarOperator1025 = null;

        precedenceBitwiseXorExpression_return precedenceBitwiseXorExpression1026 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2174:5: ( precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2175:5: precedenceBitwiseXorExpression ( precedenceStarOperator precedenceBitwiseXorExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15903);
            precedenceBitwiseXorExpression1024=precedenceBitwiseXorExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceBitwiseXorExpression1024.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2175:36: ( precedenceStarOperator precedenceBitwiseXorExpression )*
            loop299:
            do {
                int alt299=2;
                int LA299_0 = input.LA(1);

                if ( ((LA299_0>=DIVIDE && LA299_0<=STAR)||(LA299_0>=MOD && LA299_0<=DIV)) ) {
                    alt299=1;
                }


                switch (alt299) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2175:37: precedenceStarOperator precedenceBitwiseXorExpression
            	    {
            	    pushFollow(FOLLOW_precedenceStarOperator_in_precedenceStarExpression15906);
            	    precedenceStarOperator1025=precedenceStarOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceStarOperator1025.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15909);
            	    precedenceBitwiseXorExpression1026=precedenceBitwiseXorExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceBitwiseXorExpression1026.getTree());

            	    }
            	    break;

            	default :
            	    break loop299;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceStarExpression

    public static class precedencePlusOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedencePlusOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2179:1: precedencePlusOperator : ( PLUS | MINUS );
    public final precedencePlusOperator_return precedencePlusOperator() throws RecognitionException {
        precedencePlusOperator_return retval = new precedencePlusOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set1027=null;

        CommonTree set1027_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2180:5: ( PLUS | MINUS )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1027=(Token)input.LT(1);
            if ( input.LA(1)==PLUS||input.LA(1)==MINUS ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set1027));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedencePlusOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedencePlusOperator

    public static class precedencePlusExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedencePlusExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2184:1: precedencePlusExpression : precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )* ;
    public final precedencePlusExpression_return precedencePlusExpression() throws RecognitionException {
        precedencePlusExpression_return retval = new precedencePlusExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceStarExpression_return precedenceStarExpression1028 = null;

        precedencePlusOperator_return precedencePlusOperator1029 = null;

        precedenceStarExpression_return precedenceStarExpression1030 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2185:5: ( precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:5: precedenceStarExpression ( precedencePlusOperator precedenceStarExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression15958);
            precedenceStarExpression1028=precedenceStarExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceStarExpression1028.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:30: ( precedencePlusOperator precedenceStarExpression )*
            loop300:
            do {
                int alt300=2;
                int LA300_0 = input.LA(1);

                if ( (LA300_0==PLUS||LA300_0==MINUS) ) {
                    alt300=1;
                }


                switch (alt300) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2186:31: precedencePlusOperator precedenceStarExpression
            	    {
            	    pushFollow(FOLLOW_precedencePlusOperator_in_precedencePlusExpression15961);
            	    precedencePlusOperator1029=precedencePlusOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedencePlusOperator1029.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceStarExpression_in_precedencePlusExpression15964);
            	    precedenceStarExpression1030=precedenceStarExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceStarExpression1030.getTree());

            	    }
            	    break;

            	default :
            	    break loop300;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedencePlusExpression

    public static class precedenceAmpersandOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAmpersandOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2190:1: precedenceAmpersandOperator : AMPERSAND ;
    public final precedenceAmpersandOperator_return precedenceAmpersandOperator() throws RecognitionException {
        precedenceAmpersandOperator_return retval = new precedenceAmpersandOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AMPERSAND1031=null;

        CommonTree AMPERSAND1031_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2191:5: ( AMPERSAND )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2192:5: AMPERSAND
            {
            root_0 = (CommonTree)adaptor.nil();

            AMPERSAND1031=(Token)input.LT(1);
            match(input,AMPERSAND,FOLLOW_AMPERSAND_in_precedenceAmpersandOperator15988); 
            AMPERSAND1031_tree = (CommonTree)adaptor.create(AMPERSAND1031);
            adaptor.addChild(root_0, AMPERSAND1031_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAmpersandOperator

    public static class precedenceAmpersandExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAmpersandExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2195:1: precedenceAmpersandExpression : precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )* ;
    public final precedenceAmpersandExpression_return precedenceAmpersandExpression() throws RecognitionException {
        precedenceAmpersandExpression_return retval = new precedenceAmpersandExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedencePlusExpression_return precedencePlusExpression1032 = null;

        precedenceAmpersandOperator_return precedenceAmpersandOperator1033 = null;

        precedencePlusExpression_return precedencePlusExpression1034 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2196:5: ( precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2197:5: precedencePlusExpression ( precedenceAmpersandOperator precedencePlusExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression16009);
            precedencePlusExpression1032=precedencePlusExpression();
            _fsp--;

            adaptor.addChild(root_0, precedencePlusExpression1032.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2197:30: ( precedenceAmpersandOperator precedencePlusExpression )*
            loop301:
            do {
                int alt301=2;
                int LA301_0 = input.LA(1);

                if ( (LA301_0==AMPERSAND) ) {
                    alt301=1;
                }


                switch (alt301) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2197:31: precedenceAmpersandOperator precedencePlusExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression16012);
            	    precedenceAmpersandOperator1033=precedenceAmpersandOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAmpersandOperator1033.getTree(), root_0);
            	    pushFollow(FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression16015);
            	    precedencePlusExpression1034=precedencePlusExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedencePlusExpression1034.getTree());

            	    }
            	    break;

            	default :
            	    break loop301;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAmpersandExpression

    public static class precedenceBitwiseOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseOrOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2201:1: precedenceBitwiseOrOperator : BITWISEOR ;
    public final precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator() throws RecognitionException {
        precedenceBitwiseOrOperator_return retval = new precedenceBitwiseOrOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BITWISEOR1035=null;

        CommonTree BITWISEOR1035_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2202:5: ( BITWISEOR )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2203:5: BITWISEOR
            {
            root_0 = (CommonTree)adaptor.nil();

            BITWISEOR1035=(Token)input.LT(1);
            match(input,BITWISEOR,FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator16039); 
            BITWISEOR1035_tree = (CommonTree)adaptor.create(BITWISEOR1035);
            adaptor.addChild(root_0, BITWISEOR1035_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseOrOperator

    public static class precedenceBitwiseOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceBitwiseOrExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2206:1: precedenceBitwiseOrExpression : precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )* ;
    public final precedenceBitwiseOrExpression_return precedenceBitwiseOrExpression() throws RecognitionException {
        precedenceBitwiseOrExpression_return retval = new precedenceBitwiseOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceAmpersandExpression_return precedenceAmpersandExpression1036 = null;

        precedenceBitwiseOrOperator_return precedenceBitwiseOrOperator1037 = null;

        precedenceAmpersandExpression_return precedenceAmpersandExpression1038 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2207:5: ( precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2208:5: precedenceAmpersandExpression ( precedenceBitwiseOrOperator precedenceAmpersandExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression16060);
            precedenceAmpersandExpression1036=precedenceAmpersandExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceAmpersandExpression1036.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2208:35: ( precedenceBitwiseOrOperator precedenceAmpersandExpression )*
            loop302:
            do {
                int alt302=2;
                int LA302_0 = input.LA(1);

                if ( (LA302_0==BITWISEOR) ) {
                    alt302=1;
                }


                switch (alt302) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2208:36: precedenceBitwiseOrOperator precedenceAmpersandExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression16063);
            	    precedenceBitwiseOrOperator1037=precedenceBitwiseOrOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceBitwiseOrOperator1037.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression16066);
            	    precedenceAmpersandExpression1038=precedenceAmpersandExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceAmpersandExpression1038.getTree());

            	    }
            	    break;

            	default :
            	    break loop302;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceBitwiseOrExpression

    public static class precedenceEqualNegatableOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualNegatableOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2213:1: precedenceEqualNegatableOperator : ( KW_LIKE | KW_RLIKE | KW_REGEXP );
    public final precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator() throws RecognitionException {
        precedenceEqualNegatableOperator_return retval = new precedenceEqualNegatableOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set1039=null;

        CommonTree set1039_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2214:5: ( KW_LIKE | KW_RLIKE | KW_REGEXP )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1039=(Token)input.LT(1);
            if ( input.LA(1)==KW_LIKE||(input.LA(1)>=KW_RLIKE && input.LA(1)<=KW_REGEXP) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set1039));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_precedenceEqualNegatableOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualNegatableOperator

    public static class precedenceEqualOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2218:1: precedenceEqualOperator : ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );
    public final precedenceEqualOperator_return precedenceEqualOperator() throws RecognitionException {
        precedenceEqualOperator_return retval = new precedenceEqualOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUAL1041=null;
        Token EQUAL_NS1042=null;
        Token NOTEQUAL1043=null;
        Token LESSTHANOREQUALTO1044=null;
        Token LESSTHAN1045=null;
        Token GREATERTHANOREQUALTO1046=null;
        Token GREATERTHAN1047=null;
        precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator1040 = null;


        CommonTree EQUAL1041_tree=null;
        CommonTree EQUAL_NS1042_tree=null;
        CommonTree NOTEQUAL1043_tree=null;
        CommonTree LESSTHANOREQUALTO1044_tree=null;
        CommonTree LESSTHAN1045_tree=null;
        CommonTree GREATERTHANOREQUALTO1046_tree=null;
        CommonTree GREATERTHAN1047_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2219:5: ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN )
            int alt303=8;
            switch ( input.LA(1) ) {
            case KW_LIKE:
            case KW_RLIKE:
            case KW_REGEXP:
                {
                alt303=1;
                }
                break;
            case EQUAL:
                {
                alt303=2;
                }
                break;
            case EQUAL_NS:
                {
                alt303=3;
                }
                break;
            case NOTEQUAL:
                {
                alt303=4;
                }
                break;
            case LESSTHANOREQUALTO:
                {
                alt303=5;
                }
                break;
            case LESSTHAN:
                {
                alt303=6;
                }
                break;
            case GREATERTHANOREQUALTO:
                {
                alt303=7;
                }
                break;
            case GREATERTHAN:
                {
                alt303=8;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("2218:1: precedenceEqualOperator : ( precedenceEqualNegatableOperator | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );", 303, 0, input);

                throw nvae;
            }

            switch (alt303) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:5: precedenceEqualNegatableOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator16120);
                    precedenceEqualNegatableOperator1040=precedenceEqualNegatableOperator();
                    _fsp--;

                    adaptor.addChild(root_0, precedenceEqualNegatableOperator1040.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:40: EQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EQUAL1041=(Token)input.LT(1);
                    match(input,EQUAL,FOLLOW_EQUAL_in_precedenceEqualOperator16124); 
                    EQUAL1041_tree = (CommonTree)adaptor.create(EQUAL1041);
                    adaptor.addChild(root_0, EQUAL1041_tree);


                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:48: EQUAL_NS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EQUAL_NS1042=(Token)input.LT(1);
                    match(input,EQUAL_NS,FOLLOW_EQUAL_NS_in_precedenceEqualOperator16128); 
                    EQUAL_NS1042_tree = (CommonTree)adaptor.create(EQUAL_NS1042);
                    adaptor.addChild(root_0, EQUAL_NS1042_tree);


                    }
                    break;
                case 4 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:59: NOTEQUAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOTEQUAL1043=(Token)input.LT(1);
                    match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_precedenceEqualOperator16132); 
                    NOTEQUAL1043_tree = (CommonTree)adaptor.create(NOTEQUAL1043);
                    adaptor.addChild(root_0, NOTEQUAL1043_tree);


                    }
                    break;
                case 5 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:70: LESSTHANOREQUALTO
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESSTHANOREQUALTO1044=(Token)input.LT(1);
                    match(input,LESSTHANOREQUALTO,FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator16136); 
                    LESSTHANOREQUALTO1044_tree = (CommonTree)adaptor.create(LESSTHANOREQUALTO1044);
                    adaptor.addChild(root_0, LESSTHANOREQUALTO1044_tree);


                    }
                    break;
                case 6 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:90: LESSTHAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LESSTHAN1045=(Token)input.LT(1);
                    match(input,LESSTHAN,FOLLOW_LESSTHAN_in_precedenceEqualOperator16140); 
                    LESSTHAN1045_tree = (CommonTree)adaptor.create(LESSTHAN1045);
                    adaptor.addChild(root_0, LESSTHAN1045_tree);


                    }
                    break;
                case 7 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:101: GREATERTHANOREQUALTO
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATERTHANOREQUALTO1046=(Token)input.LT(1);
                    match(input,GREATERTHANOREQUALTO,FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator16144); 
                    GREATERTHANOREQUALTO1046_tree = (CommonTree)adaptor.create(GREATERTHANOREQUALTO1046);
                    adaptor.addChild(root_0, GREATERTHANOREQUALTO1046_tree);


                    }
                    break;
                case 8 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2220:124: GREATERTHAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    GREATERTHAN1047=(Token)input.LT(1);
                    match(input,GREATERTHAN,FOLLOW_GREATERTHAN_in_precedenceEqualOperator16148); 
                    GREATERTHAN1047_tree = (CommonTree)adaptor.create(GREATERTHAN1047);
                    adaptor.addChild(root_0, GREATERTHAN1047_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualOperator

    public static class precedenceEqualExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceEqualExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2223:1: precedenceEqualExpression : (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )* ;
    public final precedenceEqualExpression_return precedenceEqualExpression() throws RecognitionException {
        precedenceEqualExpression_return retval = new precedenceEqualExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NOT1048=null;
        Token KW_NOT1051=null;
        Token KW_IN1052=null;
        Token KW_IN1054=null;
        Token KW_NOT1056=null;
        Token KW_BETWEEN1057=null;
        Token KW_AND1058=null;
        Token KW_BETWEEN1059=null;
        Token KW_AND1060=null;
        precedenceBitwiseOrExpression_return left = null;

        precedenceBitwiseOrExpression_return notExpr = null;

        precedenceBitwiseOrExpression_return equalExpr = null;

        precedenceBitwiseOrExpression_return min = null;

        precedenceBitwiseOrExpression_return max = null;

        precedenceEqualNegatableOperator_return precedenceEqualNegatableOperator1049 = null;

        precedenceEqualOperator_return precedenceEqualOperator1050 = null;

        expressions_return expressions1053 = null;

        expressions_return expressions1055 = null;


        CommonTree KW_NOT1048_tree=null;
        CommonTree KW_NOT1051_tree=null;
        CommonTree KW_IN1052_tree=null;
        CommonTree KW_IN1054_tree=null;
        CommonTree KW_NOT1056_tree=null;
        CommonTree KW_BETWEEN1057_tree=null;
        CommonTree KW_AND1058_tree=null;
        CommonTree KW_BETWEEN1059_tree=null;
        CommonTree KW_AND1060_tree=null;
        RewriteRuleTokenStream stream_KW_IN=new RewriteRuleTokenStream(adaptor,"token KW_IN");
        RewriteRuleTokenStream stream_KW_BETWEEN=new RewriteRuleTokenStream(adaptor,"token KW_BETWEEN");
        RewriteRuleTokenStream stream_KW_AND=new RewriteRuleTokenStream(adaptor,"token KW_AND");
        RewriteRuleTokenStream stream_KW_NOT=new RewriteRuleTokenStream(adaptor,"token KW_NOT");
        RewriteRuleSubtreeStream stream_precedenceEqualNegatableOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualNegatableOperator");
        RewriteRuleSubtreeStream stream_precedenceEqualOperator=new RewriteRuleSubtreeStream(adaptor,"rule precedenceEqualOperator");
        RewriteRuleSubtreeStream stream_precedenceBitwiseOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule precedenceBitwiseOrExpression");
        RewriteRuleSubtreeStream stream_expressions=new RewriteRuleSubtreeStream(adaptor,"rule expressions");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2224:5: ( (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2225:5: (left= precedenceBitwiseOrExpression -> $left) ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )*
            {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2225:5: (left= precedenceBitwiseOrExpression -> $left)
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2225:6: left= precedenceBitwiseOrExpression
            {
            pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16172);
            left=precedenceBitwiseOrExpression();
            _fsp--;

            stream_precedenceBitwiseOrExpression.add(left.getTree());

            // AST REWRITE
            // elements: left
            // token labels: 
            // rule labels: retval, left
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2225:41: -> $left
            {
                adaptor.addChild(root_0, stream_left.next());

            }



            }

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2226:5: ( ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression ) -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) ) | ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression ) -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr) | ( KW_NOT KW_IN expressions ) -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) ) | ( KW_IN expressions ) -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) | ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max) | ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) ) -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max) )*
            loop304:
            do {
                int alt304=7;
                switch ( input.LA(1) ) {
                case KW_NOT:
                    {
                    switch ( input.LA(2) ) {
                    case KW_BETWEEN:
                        {
                        alt304=5;
                        }
                        break;
                    case KW_IN:
                        {
                        alt304=3;
                        }
                        break;
                    case KW_LIKE:
                    case KW_RLIKE:
                    case KW_REGEXP:
                        {
                        alt304=1;
                        }
                        break;

                    }

                    }
                    break;
                case KW_LIKE:
                case EQUAL:
                case LESSTHAN:
                case GREATERTHAN:
                case KW_RLIKE:
                case KW_REGEXP:
                case EQUAL_NS:
                case NOTEQUAL:
                case LESSTHANOREQUALTO:
                case GREATERTHANOREQUALTO:
                    {
                    alt304=2;
                    }
                    break;
                case KW_IN:
                    {
                    alt304=4;
                    }
                    break;
                case KW_BETWEEN:
                    {
                    alt304=6;
                    }
                    break;

                }

                switch (alt304) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2227:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2227:8: ( KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2227:9: KW_NOT precedenceEqualNegatableOperator notExpr= precedenceBitwiseOrExpression
            	    {
            	    KW_NOT1048=(Token)input.LT(1);
            	    match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression16194); 
            	    stream_KW_NOT.add(KW_NOT1048);

            	    pushFollow(FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression16196);
            	    precedenceEqualNegatableOperator1049=precedenceEqualNegatableOperator();
            	    _fsp--;

            	    stream_precedenceEqualNegatableOperator.add(precedenceEqualNegatableOperator1049.getTree());
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16200);
            	    notExpr=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(notExpr.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: notExpr, KW_NOT, precedenceEqualNegatableOperator, precedenceEqualExpression
            	    // token labels: 
            	    // rule labels: retval, notExpr
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_notExpr=new RewriteRuleSubtreeStream(adaptor,"token notExpr",notExpr!=null?notExpr.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2228:8: -> ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
            	    {
            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2228:11: ^( KW_NOT ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_KW_NOT.next(), root_1);

            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2228:20: ^( precedenceEqualNegatableOperator $precedenceEqualExpression $notExpr)
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualNegatableOperator.nextNode(), root_2);

            	        adaptor.addChild(root_2, stream_retval.next());
            	        adaptor.addChild(root_2, stream_notExpr.next());

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 2 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2229:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2229:7: ( precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2229:8: precedenceEqualOperator equalExpr= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression16233);
            	    precedenceEqualOperator1050=precedenceEqualOperator();
            	    _fsp--;

            	    stream_precedenceEqualOperator.add(precedenceEqualOperator1050.getTree());
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16237);
            	    equalExpr=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(equalExpr.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: equalExpr, precedenceEqualExpression, precedenceEqualOperator
            	    // token labels: 
            	    // rule labels: equalExpr, retval
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_equalExpr=new RewriteRuleSubtreeStream(adaptor,"token equalExpr",equalExpr!=null?equalExpr.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2230:8: -> ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
            	    {
            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2230:11: ^( precedenceEqualOperator $precedenceEqualExpression $equalExpr)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_precedenceEqualOperator.nextNode(), root_1);

            	        adaptor.addChild(root_1, stream_retval.next());
            	        adaptor.addChild(root_1, stream_equalExpr.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 3 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2231:7: ( KW_NOT KW_IN expressions )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2231:7: ( KW_NOT KW_IN expressions )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2231:8: KW_NOT KW_IN expressions
            	    {
            	    KW_NOT1051=(Token)input.LT(1);
            	    match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression16266); 
            	    stream_KW_NOT.add(KW_NOT1051);

            	    KW_IN1052=(Token)input.LT(1);
            	    match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression16268); 
            	    stream_KW_IN.add(KW_IN1052);

            	    pushFollow(FOLLOW_expressions_in_precedenceEqualExpression16270);
            	    expressions1053=expressions();
            	    _fsp--;

            	    stream_expressions.add(expressions1053.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: KW_IN, KW_NOT, precedenceEqualExpression, expressions
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2232:8: -> ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
            	    {
            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2232:11: ^( KW_NOT ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions ) )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(stream_KW_NOT.next(), root_1);

            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2232:20: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	        {
            	        CommonTree root_2 = (CommonTree)adaptor.nil();
            	        root_2 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_2);

            	        adaptor.addChild(root_2, stream_KW_IN.next());
            	        adaptor.addChild(root_2, stream_retval.next());
            	        adaptor.addChild(root_2, stream_expressions.next());

            	        adaptor.addChild(root_1, root_2);
            	        }

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 4 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2233:7: ( KW_IN expressions )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2233:7: ( KW_IN expressions )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2233:8: KW_IN expressions
            	    {
            	    KW_IN1054=(Token)input.LT(1);
            	    match(input,KW_IN,FOLLOW_KW_IN_in_precedenceEqualExpression16304); 
            	    stream_KW_IN.add(KW_IN1054);

            	    pushFollow(FOLLOW_expressions_in_precedenceEqualExpression16306);
            	    expressions1055=expressions();
            	    _fsp--;

            	    stream_expressions.add(expressions1055.getTree());

            	    }


            	    // AST REWRITE
            	    // elements: KW_IN, expressions, precedenceEqualExpression
            	    // token labels: 
            	    // rule labels: retval
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2234:8: -> ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	    {
            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2234:11: ^( TOK_FUNCTION KW_IN $precedenceEqualExpression expressions )
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

            	        adaptor.addChild(root_1, stream_KW_IN.next());
            	        adaptor.addChild(root_1, stream_retval.next());
            	        adaptor.addChild(root_1, stream_expressions.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 5 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2235:7: ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2235:7: ( KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2235:9: KW_NOT KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression )
            	    {
            	    KW_NOT1056=(Token)input.LT(1);
            	    match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceEqualExpression16337); 
            	    stream_KW_NOT.add(KW_NOT1056);

            	    KW_BETWEEN1057=(Token)input.LT(1);
            	    match(input,KW_BETWEEN,FOLLOW_KW_BETWEEN_in_precedenceEqualExpression16339); 
            	    stream_KW_BETWEEN.add(KW_BETWEEN1057);

            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2235:27: (min= precedenceBitwiseOrExpression )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2235:28: min= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16344);
            	    min=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(min.getTree());

            	    }

            	    KW_AND1058=(Token)input.LT(1);
            	    match(input,KW_AND,FOLLOW_KW_AND_in_precedenceEqualExpression16347); 
            	    stream_KW_AND.add(KW_AND1058);

            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2235:70: (max= precedenceBitwiseOrExpression )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2235:71: max= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16352);
            	    max=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(max.getTree());

            	    }


            	    }


            	    // AST REWRITE
            	    // elements: min, max, left
            	    // token labels: 
            	    // rule labels: min, retval, max, left
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"token min",min!=null?min.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"token max",max!=null?max.tree:null);
            	    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2236:8: -> ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max)
            	    {
            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2236:11: ^( TOK_FUNCTION Identifier[\"between\"] KW_TRUE $left $min $max)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

            	        adaptor.addChild(root_1, adaptor.create(Identifier, "between"));
            	        adaptor.addChild(root_1, adaptor.create(KW_TRUE, "KW_TRUE"));
            	        adaptor.addChild(root_1, stream_left.next());
            	        adaptor.addChild(root_1, stream_min.next());
            	        adaptor.addChild(root_1, stream_max.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;
            	case 6 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:7: ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    {
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:7: ( KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression ) )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:9: KW_BETWEEN (min= precedenceBitwiseOrExpression ) KW_AND (max= precedenceBitwiseOrExpression )
            	    {
            	    KW_BETWEEN1059=(Token)input.LT(1);
            	    match(input,KW_BETWEEN,FOLLOW_KW_BETWEEN_in_precedenceEqualExpression16392); 
            	    stream_KW_BETWEEN.add(KW_BETWEEN1059);

            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:20: (min= precedenceBitwiseOrExpression )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:21: min= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16397);
            	    min=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(min.getTree());

            	    }

            	    KW_AND1060=(Token)input.LT(1);
            	    match(input,KW_AND,FOLLOW_KW_AND_in_precedenceEqualExpression16400); 
            	    stream_KW_AND.add(KW_AND1060);

            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:63: (max= precedenceBitwiseOrExpression )
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2237:64: max= precedenceBitwiseOrExpression
            	    {
            	    pushFollow(FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16405);
            	    max=precedenceBitwiseOrExpression();
            	    _fsp--;

            	    stream_precedenceBitwiseOrExpression.add(max.getTree());

            	    }


            	    }


            	    // AST REWRITE
            	    // elements: max, left, min
            	    // token labels: 
            	    // rule labels: min, retval, max, left
            	    // token list labels: 
            	    // rule list labels: 
            	    retval.tree = root_0;
            	    RewriteRuleSubtreeStream stream_min=new RewriteRuleSubtreeStream(adaptor,"token min",min!=null?min.tree:null);
            	    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            	    RewriteRuleSubtreeStream stream_max=new RewriteRuleSubtreeStream(adaptor,"token max",max!=null?max.tree:null);
            	    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"token left",left!=null?left.tree:null);

            	    root_0 = (CommonTree)adaptor.nil();
            	    // 2238:8: -> ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max)
            	    {
            	        // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2238:11: ^( TOK_FUNCTION Identifier[\"between\"] KW_FALSE $left $min $max)
            	        {
            	        CommonTree root_1 = (CommonTree)adaptor.nil();
            	        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_FUNCTION, "TOK_FUNCTION"), root_1);

            	        adaptor.addChild(root_1, adaptor.create(Identifier, "between"));
            	        adaptor.addChild(root_1, adaptor.create(KW_FALSE, "KW_FALSE"));
            	        adaptor.addChild(root_1, stream_left.next());
            	        adaptor.addChild(root_1, stream_min.next());
            	        adaptor.addChild(root_1, stream_max.next());

            	        adaptor.addChild(root_0, root_1);
            	        }

            	    }



            	    }
            	    break;

            	default :
            	    break loop304;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceEqualExpression

    public static class expressions_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start expressions
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2242:1: expressions : LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* ;
    public final expressions_return expressions() throws RecognitionException {
        expressions_return retval = new expressions_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN1061=null;
        Token COMMA1063=null;
        Token RPAREN1065=null;
        expression_return expression1062 = null;

        expression_return expression1064 = null;


        CommonTree LPAREN1061_tree=null;
        CommonTree COMMA1063_tree=null;
        CommonTree RPAREN1065_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2243:5: ( LPAREN expression ( COMMA expression )* RPAREN -> ( expression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2244:5: LPAREN expression ( COMMA expression )* RPAREN
            {
            LPAREN1061=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_expressions16463); 
            stream_LPAREN.add(LPAREN1061);

            pushFollow(FOLLOW_expression_in_expressions16465);
            expression1062=expression();
            _fsp--;

            stream_expression.add(expression1062.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2244:23: ( COMMA expression )*
            loop305:
            do {
                int alt305=2;
                int LA305_0 = input.LA(1);

                if ( (LA305_0==COMMA) ) {
                    alt305=1;
                }


                switch (alt305) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2244:24: COMMA expression
            	    {
            	    COMMA1063=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_expressions16468); 
            	    stream_COMMA.add(COMMA1063);

            	    pushFollow(FOLLOW_expression_in_expressions16470);
            	    expression1064=expression();
            	    _fsp--;

            	    stream_expression.add(expression1064.getTree());

            	    }
            	    break;

            	default :
            	    break loop305;
                }
            } while (true);

            RPAREN1065=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_expressions16474); 
            stream_RPAREN.add(RPAREN1065);


            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2244:50: -> ( expression )*
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2244:53: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_0, stream_expression.next());

                }
                stream_expression.reset();

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end expressions

    public static class precedenceNotOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceNotOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2247:1: precedenceNotOperator : KW_NOT ;
    public final precedenceNotOperator_return precedenceNotOperator() throws RecognitionException {
        precedenceNotOperator_return retval = new precedenceNotOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_NOT1066=null;

        CommonTree KW_NOT1066_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2248:5: ( KW_NOT )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2249:5: KW_NOT
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_NOT1066=(Token)input.LT(1);
            match(input,KW_NOT,FOLLOW_KW_NOT_in_precedenceNotOperator16500); 
            KW_NOT1066_tree = (CommonTree)adaptor.create(KW_NOT1066);
            adaptor.addChild(root_0, KW_NOT1066_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceNotOperator

    public static class precedenceNotExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceNotExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2252:1: precedenceNotExpression : ( precedenceNotOperator )* precedenceEqualExpression ;
    public final precedenceNotExpression_return precedenceNotExpression() throws RecognitionException {
        precedenceNotExpression_return retval = new precedenceNotExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceNotOperator_return precedenceNotOperator1067 = null;

        precedenceEqualExpression_return precedenceEqualExpression1068 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2253:5: ( ( precedenceNotOperator )* precedenceEqualExpression )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2254:5: ( precedenceNotOperator )* precedenceEqualExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2254:5: ( precedenceNotOperator )*
            loop306:
            do {
                int alt306=2;
                int LA306_0 = input.LA(1);

                if ( (LA306_0==KW_NOT) ) {
                    alt306=1;
                }


                switch (alt306) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2254:6: precedenceNotOperator
            	    {
            	    pushFollow(FOLLOW_precedenceNotOperator_in_precedenceNotExpression16522);
            	    precedenceNotOperator1067=precedenceNotOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceNotOperator1067.getTree(), root_0);

            	    }
            	    break;

            	default :
            	    break loop306;
                }
            } while (true);

            pushFollow(FOLLOW_precedenceEqualExpression_in_precedenceNotExpression16527);
            precedenceEqualExpression1068=precedenceEqualExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceEqualExpression1068.getTree());

            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceNotExpression

    public static class precedenceAndOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAndOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2258:1: precedenceAndOperator : KW_AND ;
    public final precedenceAndOperator_return precedenceAndOperator() throws RecognitionException {
        precedenceAndOperator_return retval = new precedenceAndOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_AND1069=null;

        CommonTree KW_AND1069_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2259:5: ( KW_AND )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2260:5: KW_AND
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_AND1069=(Token)input.LT(1);
            match(input,KW_AND,FOLLOW_KW_AND_in_precedenceAndOperator16549); 
            KW_AND1069_tree = (CommonTree)adaptor.create(KW_AND1069);
            adaptor.addChild(root_0, KW_AND1069_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAndOperator

    public static class precedenceAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceAndExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2263:1: precedenceAndExpression : precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )* ;
    public final precedenceAndExpression_return precedenceAndExpression() throws RecognitionException {
        precedenceAndExpression_return retval = new precedenceAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceNotExpression_return precedenceNotExpression1070 = null;

        precedenceAndOperator_return precedenceAndOperator1071 = null;

        precedenceNotExpression_return precedenceNotExpression1072 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2264:5: ( precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2265:5: precedenceNotExpression ( precedenceAndOperator precedenceNotExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression16570);
            precedenceNotExpression1070=precedenceNotExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceNotExpression1070.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2265:29: ( precedenceAndOperator precedenceNotExpression )*
            loop307:
            do {
                int alt307=2;
                int LA307_0 = input.LA(1);

                if ( (LA307_0==KW_AND) ) {
                    alt307=1;
                }


                switch (alt307) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2265:30: precedenceAndOperator precedenceNotExpression
            	    {
            	    pushFollow(FOLLOW_precedenceAndOperator_in_precedenceAndExpression16573);
            	    precedenceAndOperator1071=precedenceAndOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceAndOperator1071.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceNotExpression_in_precedenceAndExpression16576);
            	    precedenceNotExpression1072=precedenceNotExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceNotExpression1072.getTree());

            	    }
            	    break;

            	default :
            	    break loop307;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceAndExpression

    public static class precedenceOrOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceOrOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2269:1: precedenceOrOperator : KW_OR ;
    public final precedenceOrOperator_return precedenceOrOperator() throws RecognitionException {
        precedenceOrOperator_return retval = new precedenceOrOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_OR1073=null;

        CommonTree KW_OR1073_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2270:5: ( KW_OR )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2271:5: KW_OR
            {
            root_0 = (CommonTree)adaptor.nil();

            KW_OR1073=(Token)input.LT(1);
            match(input,KW_OR,FOLLOW_KW_OR_in_precedenceOrOperator16600); 
            KW_OR1073_tree = (CommonTree)adaptor.create(KW_OR1073);
            adaptor.addChild(root_0, KW_OR1073_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceOrOperator

    public static class precedenceOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start precedenceOrExpression
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2274:1: precedenceOrExpression : precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )* ;
    public final precedenceOrExpression_return precedenceOrExpression() throws RecognitionException {
        precedenceOrExpression_return retval = new precedenceOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        precedenceAndExpression_return precedenceAndExpression1074 = null;

        precedenceOrOperator_return precedenceOrOperator1075 = null;

        precedenceAndExpression_return precedenceAndExpression1076 = null;



        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2275:5: ( precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )* )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2276:5: precedenceAndExpression ( precedenceOrOperator precedenceAndExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression16621);
            precedenceAndExpression1074=precedenceAndExpression();
            _fsp--;

            adaptor.addChild(root_0, precedenceAndExpression1074.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2276:29: ( precedenceOrOperator precedenceAndExpression )*
            loop308:
            do {
                int alt308=2;
                int LA308_0 = input.LA(1);

                if ( (LA308_0==KW_OR) ) {
                    alt308=1;
                }


                switch (alt308) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2276:30: precedenceOrOperator precedenceAndExpression
            	    {
            	    pushFollow(FOLLOW_precedenceOrOperator_in_precedenceOrExpression16624);
            	    precedenceOrOperator1075=precedenceOrOperator();
            	    _fsp--;

            	    root_0 = (CommonTree)adaptor.becomeRoot(precedenceOrOperator1075.getTree(), root_0);
            	    pushFollow(FOLLOW_precedenceAndExpression_in_precedenceOrExpression16627);
            	    precedenceAndExpression1076=precedenceAndExpression();
            	    _fsp--;

            	    adaptor.addChild(root_0, precedenceAndExpression1076.getTree());

            	    }
            	    break;

            	default :
            	    break loop308;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end precedenceOrExpression

    public static class booleanValue_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start booleanValue
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2280:1: booleanValue : ( KW_TRUE | KW_FALSE );
    public final booleanValue_return booleanValue() throws RecognitionException {
        booleanValue_return retval = new booleanValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_TRUE1077=null;
        Token KW_FALSE1078=null;

        CommonTree KW_TRUE1077_tree=null;
        CommonTree KW_FALSE1078_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2281:5: ( KW_TRUE | KW_FALSE )
            int alt309=2;
            int LA309_0 = input.LA(1);

            if ( (LA309_0==KW_TRUE) ) {
                alt309=1;
            }
            else if ( (LA309_0==KW_FALSE) ) {
                alt309=2;
            }
            else {
                NoViableAltException nvae =
                    new NoViableAltException("2280:1: booleanValue : ( KW_TRUE | KW_FALSE );", 309, 0, input);

                throw nvae;
            }
            switch (alt309) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2282:5: KW_TRUE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KW_TRUE1077=(Token)input.LT(1);
                    match(input,KW_TRUE,FOLLOW_KW_TRUE_in_booleanValue16651); 
                    KW_TRUE1077_tree = (CommonTree)adaptor.create(KW_TRUE1077);
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_TRUE1077_tree, root_0);


                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2282:16: KW_FALSE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    KW_FALSE1078=(Token)input.LT(1);
                    match(input,KW_FALSE,FOLLOW_KW_FALSE_in_booleanValue16656); 
                    KW_FALSE1078_tree = (CommonTree)adaptor.create(KW_FALSE1078);
                    root_0 = (CommonTree)adaptor.becomeRoot(KW_FALSE1078_tree, root_0);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end booleanValue

    public static class tableOrPartition_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start tableOrPartition
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2285:1: tableOrPartition : tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) ;
    public final tableOrPartition_return tableOrPartition() throws RecognitionException {
        tableOrPartition_return retval = new tableOrPartition_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        tableName_return tableName1079 = null;

        partitionSpec_return partitionSpec1080 = null;


        RewriteRuleSubtreeStream stream_tableName=new RewriteRuleSubtreeStream(adaptor,"rule tableName");
        RewriteRuleSubtreeStream stream_partitionSpec=new RewriteRuleSubtreeStream(adaptor,"rule partitionSpec");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2286:4: ( tableName ( partitionSpec )? -> ^( TOK_TAB tableName ( partitionSpec )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2287:4: tableName ( partitionSpec )?
            {
            pushFollow(FOLLOW_tableName_in_tableOrPartition16676);
            tableName1079=tableName();
            _fsp--;

            stream_tableName.add(tableName1079.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2287:14: ( partitionSpec )?
            int alt310=2;
            int LA310_0 = input.LA(1);

            if ( (LA310_0==KW_PARTITION) ) {
                alt310=1;
            }
            switch (alt310) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2287:14: partitionSpec
                    {
                    pushFollow(FOLLOW_partitionSpec_in_tableOrPartition16678);
                    partitionSpec1080=partitionSpec();
                    _fsp--;

                    stream_partitionSpec.add(partitionSpec1080.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: tableName, partitionSpec
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2287:29: -> ^( TOK_TAB tableName ( partitionSpec )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2287:32: ^( TOK_TAB tableName ( partitionSpec )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_TAB, "TOK_TAB"), root_1);

                adaptor.addChild(root_1, stream_tableName.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2287:52: ( partitionSpec )?
                if ( stream_partitionSpec.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionSpec.next());

                }
                stream_partitionSpec.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end tableOrPartition

    public static class partitionSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionSpec
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2290:1: partitionSpec : KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) ;
    public final partitionSpec_return partitionSpec() throws RecognitionException {
        partitionSpec_return retval = new partitionSpec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITION1081=null;
        Token LPAREN1082=null;
        Token COMMA1084=null;
        Token RPAREN1086=null;
        partitionVal_return partitionVal1083 = null;

        partitionVal_return partitionVal1085 = null;


        CommonTree KW_PARTITION1081_tree=null;
        CommonTree LPAREN1082_tree=null;
        CommonTree COMMA1084_tree=null;
        CommonTree RPAREN1086_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_partitionVal=new RewriteRuleSubtreeStream(adaptor,"rule partitionVal");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2291:5: ( KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN -> ^( TOK_PARTSPEC ( partitionVal )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2292:5: KW_PARTITION LPAREN partitionVal ( COMMA partitionVal )* RPAREN
            {
            KW_PARTITION1081=(Token)input.LT(1);
            match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_partitionSpec16710); 
            stream_KW_PARTITION.add(KW_PARTITION1081);

            LPAREN1082=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_partitionSpec16717); 
            stream_LPAREN.add(LPAREN1082);

            pushFollow(FOLLOW_partitionVal_in_partitionSpec16719);
            partitionVal1083=partitionVal();
            _fsp--;

            stream_partitionVal.add(partitionVal1083.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2293:26: ( COMMA partitionVal )*
            loop311:
            do {
                int alt311=2;
                int LA311_0 = input.LA(1);

                if ( (LA311_0==COMMA) ) {
                    alt311=1;
                }


                switch (alt311) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2293:27: COMMA partitionVal
            	    {
            	    COMMA1084=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_partitionSpec16722); 
            	    stream_COMMA.add(COMMA1084);

            	    pushFollow(FOLLOW_partitionVal_in_partitionSpec16725);
            	    partitionVal1085=partitionVal();
            	    _fsp--;

            	    stream_partitionVal.add(partitionVal1085.getTree());

            	    }
            	    break;

            	default :
            	    break loop311;
                }
            } while (true);

            RPAREN1086=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_partitionSpec16730); 
            stream_RPAREN.add(RPAREN1086);


            // AST REWRITE
            // elements: partitionVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2293:57: -> ^( TOK_PARTSPEC ( partitionVal )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2293:60: ^( TOK_PARTSPEC ( partitionVal )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC"), root_1);

                if ( !(stream_partitionVal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_partitionVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_partitionVal.next());

                }
                stream_partitionVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionSpec

    public static class partitionVal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start partitionVal
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2296:1: partitionVal : Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) ;
    public final partitionVal_return partitionVal() throws RecognitionException {
        partitionVal_return retval = new partitionVal_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier1087=null;
        Token EQUAL1088=null;
        constant_return constant1089 = null;


        CommonTree Identifier1087_tree=null;
        CommonTree EQUAL1088_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleTokenStream stream_EQUAL=new RewriteRuleTokenStream(adaptor,"token EQUAL");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2297:5: ( Identifier ( EQUAL constant )? -> ^( TOK_PARTVAL Identifier ( constant )? ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2298:5: Identifier ( EQUAL constant )?
            {
            Identifier1087=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_partitionVal16761); 
            stream_Identifier.add(Identifier1087);

            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2298:16: ( EQUAL constant )?
            int alt312=2;
            int LA312_0 = input.LA(1);

            if ( (LA312_0==EQUAL) ) {
                alt312=1;
            }
            switch (alt312) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2298:17: EQUAL constant
                    {
                    EQUAL1088=(Token)input.LT(1);
                    match(input,EQUAL,FOLLOW_EQUAL_in_partitionVal16764); 
                    stream_EQUAL.add(EQUAL1088);

                    pushFollow(FOLLOW_constant_in_partitionVal16766);
                    constant1089=constant();
                    _fsp--;

                    stream_constant.add(constant1089.getTree());

                    }
                    break;

            }


            // AST REWRITE
            // elements: Identifier, constant
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2298:34: -> ^( TOK_PARTVAL Identifier ( constant )? )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2298:37: ^( TOK_PARTVAL Identifier ( constant )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTVAL, "TOK_PARTVAL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2298:62: ( constant )?
                if ( stream_constant.hasNext() ) {
                    adaptor.addChild(root_1, stream_constant.next());

                }
                stream_constant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end partitionVal

    public static class dropPartitionSpec_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropPartitionSpec
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2301:1: dropPartitionSpec : KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN -> ^( TOK_PARTSPEC ( dropPartitionVal )+ ) ;
    public final dropPartitionSpec_return dropPartitionSpec() throws RecognitionException {
        dropPartitionSpec_return retval = new dropPartitionSpec_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token KW_PARTITION1090=null;
        Token LPAREN1091=null;
        Token COMMA1093=null;
        Token RPAREN1095=null;
        dropPartitionVal_return dropPartitionVal1092 = null;

        dropPartitionVal_return dropPartitionVal1094 = null;


        CommonTree KW_PARTITION1090_tree=null;
        CommonTree LPAREN1091_tree=null;
        CommonTree COMMA1093_tree=null;
        CommonTree RPAREN1095_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_KW_PARTITION=new RewriteRuleTokenStream(adaptor,"token KW_PARTITION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_dropPartitionVal=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionVal");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2302:5: ( KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN -> ^( TOK_PARTSPEC ( dropPartitionVal )+ ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2303:5: KW_PARTITION LPAREN dropPartitionVal ( COMMA dropPartitionVal )* RPAREN
            {
            KW_PARTITION1090=(Token)input.LT(1);
            match(input,KW_PARTITION,FOLLOW_KW_PARTITION_in_dropPartitionSpec16800); 
            stream_KW_PARTITION.add(KW_PARTITION1090);

            LPAREN1091=(Token)input.LT(1);
            match(input,LPAREN,FOLLOW_LPAREN_in_dropPartitionSpec16807); 
            stream_LPAREN.add(LPAREN1091);

            pushFollow(FOLLOW_dropPartitionVal_in_dropPartitionSpec16809);
            dropPartitionVal1092=dropPartitionVal();
            _fsp--;

            stream_dropPartitionVal.add(dropPartitionVal1092.getTree());
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2304:30: ( COMMA dropPartitionVal )*
            loop313:
            do {
                int alt313=2;
                int LA313_0 = input.LA(1);

                if ( (LA313_0==COMMA) ) {
                    alt313=1;
                }


                switch (alt313) {
            	case 1 :
            	    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2304:31: COMMA dropPartitionVal
            	    {
            	    COMMA1093=(Token)input.LT(1);
            	    match(input,COMMA,FOLLOW_COMMA_in_dropPartitionSpec16812); 
            	    stream_COMMA.add(COMMA1093);

            	    pushFollow(FOLLOW_dropPartitionVal_in_dropPartitionSpec16815);
            	    dropPartitionVal1094=dropPartitionVal();
            	    _fsp--;

            	    stream_dropPartitionVal.add(dropPartitionVal1094.getTree());

            	    }
            	    break;

            	default :
            	    break loop313;
                }
            } while (true);

            RPAREN1095=(Token)input.LT(1);
            match(input,RPAREN,FOLLOW_RPAREN_in_dropPartitionSpec16820); 
            stream_RPAREN.add(RPAREN1095);


            // AST REWRITE
            // elements: dropPartitionVal
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2304:65: -> ^( TOK_PARTSPEC ( dropPartitionVal )+ )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2304:68: ^( TOK_PARTSPEC ( dropPartitionVal )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTSPEC, "TOK_PARTSPEC"), root_1);

                if ( !(stream_dropPartitionVal.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_dropPartitionVal.hasNext() ) {
                    adaptor.addChild(root_1, stream_dropPartitionVal.next());

                }
                stream_dropPartitionVal.reset();

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropPartitionSpec

    public static class dropPartitionVal_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropPartitionVal
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2307:1: dropPartitionVal : Identifier dropPartitionOperator constant -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant ) ;
    public final dropPartitionVal_return dropPartitionVal() throws RecognitionException {
        dropPartitionVal_return retval = new dropPartitionVal_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier1096=null;
        dropPartitionOperator_return dropPartitionOperator1097 = null;

        constant_return constant1098 = null;


        CommonTree Identifier1096_tree=null;
        RewriteRuleTokenStream stream_Identifier=new RewriteRuleTokenStream(adaptor,"token Identifier");
        RewriteRuleSubtreeStream stream_dropPartitionOperator=new RewriteRuleSubtreeStream(adaptor,"rule dropPartitionOperator");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2308:5: ( Identifier dropPartitionOperator constant -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant ) )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2309:5: Identifier dropPartitionOperator constant
            {
            Identifier1096=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_dropPartitionVal16851); 
            stream_Identifier.add(Identifier1096);

            pushFollow(FOLLOW_dropPartitionOperator_in_dropPartitionVal16853);
            dropPartitionOperator1097=dropPartitionOperator();
            _fsp--;

            stream_dropPartitionOperator.add(dropPartitionOperator1097.getTree());
            pushFollow(FOLLOW_constant_in_dropPartitionVal16855);
            constant1098=constant();
            _fsp--;

            stream_constant.add(constant1098.getTree());

            // AST REWRITE
            // elements: dropPartitionOperator, constant, Identifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 2309:47: -> ^( TOK_PARTVAL Identifier dropPartitionOperator constant )
            {
                // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2309:50: ^( TOK_PARTVAL Identifier dropPartitionOperator constant )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(TOK_PARTVAL, "TOK_PARTVAL"), root_1);

                adaptor.addChild(root_1, stream_Identifier.next());
                adaptor.addChild(root_1, stream_dropPartitionOperator.next());
                adaptor.addChild(root_1, stream_constant.next());

                adaptor.addChild(root_0, root_1);
                }

            }



            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropPartitionVal

    public static class dropPartitionOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start dropPartitionOperator
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2312:1: dropPartitionOperator : ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN );
    public final dropPartitionOperator_return dropPartitionOperator() throws RecognitionException {
        dropPartitionOperator_return retval = new dropPartitionOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set1099=null;

        CommonTree set1099_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2313:5: ( EQUAL | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1099=(Token)input.LT(1);
            if ( input.LA(1)==EQUAL||(input.LA(1)>=LESSTHAN && input.LA(1)<=GREATERTHAN)||(input.LA(1)>=NOTEQUAL && input.LA(1)<=GREATERTHANOREQUALTO) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set1099));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_dropPartitionOperator0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end dropPartitionOperator

    public static class sysFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start sysFuncNames
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2317:1: sysFuncNames : ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN | KW_BETWEEN );
    public final sysFuncNames_return sysFuncNames() throws RecognitionException {
        sysFuncNames_return retval = new sysFuncNames_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token set1100=null;

        CommonTree set1100_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2318:5: ( KW_AND | KW_OR | KW_NOT | KW_LIKE | KW_IF | KW_CASE | KW_WHEN | KW_TINYINT | KW_SMALLINT | KW_INT | KW_BIGINT | KW_FLOAT | KW_DOUBLE | KW_BOOLEAN | KW_STRING | KW_BINARY | KW_ARRAY | KW_MAP | KW_STRUCT | KW_UNIONTYPE | EQUAL | EQUAL_NS | NOTEQUAL | LESSTHANOREQUALTO | LESSTHAN | GREATERTHANOREQUALTO | GREATERTHAN | DIVIDE | PLUS | MINUS | STAR | MOD | DIV | AMPERSAND | TILDE | BITWISEOR | BITWISEXOR | KW_RLIKE | KW_REGEXP | KW_IN | KW_BETWEEN )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:
            {
            root_0 = (CommonTree)adaptor.nil();

            set1100=(Token)input.LT(1);
            if ( input.LA(1)==KW_IF||input.LA(1)==KW_NOT||input.LA(1)==KW_OR||input.LA(1)==KW_LIKE||input.LA(1)==KW_IN||input.LA(1)==EQUAL||input.LA(1)==KW_MAP||(input.LA(1)>=KW_TINYINT && input.LA(1)<=KW_DOUBLE)||(input.LA(1)>=KW_STRING && input.LA(1)<=KW_UNIONTYPE)||(input.LA(1)>=DIVIDE && input.LA(1)<=PLUS)||(input.LA(1)>=KW_CASE && input.LA(1)<=KW_WHEN)||(input.LA(1)>=MINUS && input.LA(1)<=TILDE)||(input.LA(1)>=BITWISEXOR && input.LA(1)<=KW_AND) ) {
                input.consume();
                adaptor.addChild(root_0, adaptor.create(set1100));
                errorRecovery=false;
            }
            else {
                MismatchedSetException mse =
                    new MismatchedSetException(null,input);
                recoverFromMismatchedSet(input,mse,FOLLOW_set_in_sysFuncNames0);    throw mse;
            }


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end sysFuncNames

    public static class descFuncNames_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start descFuncNames
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2362:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );
    public final descFuncNames_return descFuncNames() throws RecognitionException {
        descFuncNames_return retval = new descFuncNames_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token StringLiteral1102=null;
        Token Identifier1103=null;
        sysFuncNames_return sysFuncNames1101 = null;


        CommonTree StringLiteral1102_tree=null;
        CommonTree Identifier1103_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2363:5: ( sysFuncNames | StringLiteral | Identifier )
            int alt314=3;
            switch ( input.LA(1) ) {
            case KW_IF:
            case KW_NOT:
            case KW_OR:
            case KW_LIKE:
            case KW_IN:
            case EQUAL:
            case KW_MAP:
            case KW_TINYINT:
            case KW_SMALLINT:
            case KW_INT:
            case KW_BIGINT:
            case KW_BOOLEAN:
            case KW_FLOAT:
            case KW_DOUBLE:
            case KW_STRING:
            case KW_BINARY:
            case KW_ARRAY:
            case LESSTHAN:
            case GREATERTHAN:
            case KW_STRUCT:
            case KW_UNIONTYPE:
            case DIVIDE:
            case STAR:
            case PLUS:
            case KW_CASE:
            case KW_WHEN:
            case MINUS:
            case TILDE:
            case BITWISEXOR:
            case MOD:
            case DIV:
            case AMPERSAND:
            case BITWISEOR:
            case KW_RLIKE:
            case KW_REGEXP:
            case EQUAL_NS:
            case NOTEQUAL:
            case LESSTHANOREQUALTO:
            case GREATERTHANOREQUALTO:
            case KW_BETWEEN:
            case KW_AND:
                {
                alt314=1;
                }
                break;
            case StringLiteral:
                {
                alt314=2;
                }
                break;
            case Identifier:
                {
                alt314=3;
                }
                break;
            default:
                NoViableAltException nvae =
                    new NoViableAltException("2362:1: descFuncNames : ( sysFuncNames | StringLiteral | Identifier );", 314, 0, input);

                throw nvae;
            }

            switch (alt314) {
                case 1 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2364:7: sysFuncNames
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_sysFuncNames_in_descFuncNames17274);
                    sysFuncNames1101=sysFuncNames();
                    _fsp--;

                    adaptor.addChild(root_0, sysFuncNames1101.getTree());

                    }
                    break;
                case 2 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2365:7: StringLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    StringLiteral1102=(Token)input.LT(1);
                    match(input,StringLiteral,FOLLOW_StringLiteral_in_descFuncNames17282); 
                    StringLiteral1102_tree = (CommonTree)adaptor.create(StringLiteral1102);
                    adaptor.addChild(root_0, StringLiteral1102_tree);


                    }
                    break;
                case 3 :
                    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2366:7: Identifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    Identifier1103=(Token)input.LT(1);
                    match(input,Identifier,FOLLOW_Identifier_in_descFuncNames17290); 
                    Identifier1103_tree = (CommonTree)adaptor.create(Identifier1103);
                    adaptor.addChild(root_0, Identifier1103_tree);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end descFuncNames

    public static class kwUser_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwUser
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2371:1: kwUser : {...}? Identifier ;
    public final kwUser_return kwUser() throws RecognitionException {
        kwUser_return retval = new kwUser_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier1104=null;

        CommonTree Identifier1104_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2372:1: ({...}? Identifier )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2373:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("user")) ) {
                throw new FailedPredicateException(input, "kwUser", "input.LT(1).getText().equalsIgnoreCase(\"user\")");
            }
            Identifier1104=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwUser17307); 
            Identifier1104_tree = (CommonTree)adaptor.create(Identifier1104);
            adaptor.addChild(root_0, Identifier1104_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwUser

    public static class kwRole_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwRole
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2375:1: kwRole : {...}? Identifier ;
    public final kwRole_return kwRole() throws RecognitionException {
        kwRole_return retval = new kwRole_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier1105=null;

        CommonTree Identifier1105_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2376:1: ({...}? Identifier )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2377:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("role")) ) {
                throw new FailedPredicateException(input, "kwRole", "input.LT(1).getText().equalsIgnoreCase(\"role\")");
            }
            Identifier1105=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwRole17317); 
            Identifier1105_tree = (CommonTree)adaptor.create(Identifier1105);
            adaptor.addChild(root_0, Identifier1105_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwRole

    public static class kwInner_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start kwInner
    // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2379:1: kwInner : {...}? Identifier ;
    public final kwInner_return kwInner() throws RecognitionException {
        kwInner_return retval = new kwInner_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token Identifier1106=null;

        CommonTree Identifier1106_tree=null;

        try {
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2380:1: ({...}? Identifier )
            // /home/foo/comitter/hive-trunk/ql/src/java/org/apache/hadoop/hive/ql/parse/Hive.g:2381:1: {...}? Identifier
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !(input.LT(1).getText().equalsIgnoreCase("inner")) ) {
                throw new FailedPredicateException(input, "kwInner", "input.LT(1).getText().equalsIgnoreCase(\"inner\")");
            }
            Identifier1106=(Token)input.LT(1);
            match(input,Identifier,FOLLOW_Identifier_in_kwInner17327); 
            Identifier1106_tree = (CommonTree)adaptor.create(Identifier1106);
            adaptor.addChild(root_0, Identifier1106_tree);


            }

            retval.stop = input.LT(-1);

                retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);

        }

        catch (RecognitionException e) {
         reportError(e);
          throw e;
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end kwInner


 

    public static final BitSet FOLLOW_explainStatement_in_statement844 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_execStatement_in_statement851 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_statement853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPLAIN_in_explainStatement874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00813004002A03C0L,0x044E404580000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_explainStatement879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00813004002A0200L,0x044E404580000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_explainStatement883 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00813004002A0200L,0x044E404580000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_KW_DEPENDENCY_in_explainStatement887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00813004002A0200L,0x044E404580000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_execStatement_in_explainStatement891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatementExpression_in_execStatement933 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loadStatement_in_execStatement941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportStatement_in_execStatement949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_importStatement_in_execStatement957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ddlStatement_in_execStatement965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOAD_in_loadStatement992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_KW_DATA_in_loadStatement994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_KW_LOCAL_in_loadStatement999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_INPATH_in_loadStatement1003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_loadStatement1008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_loadStatement1014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_INTO_in_loadStatement1018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_loadStatement1020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_loadStatement1025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_EXPORT_in_exportStatement1077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_exportStatement1079 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_exportStatement1084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_TO_in_exportStatement1087 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_exportStatement1092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IMPORT_in_importStatement1133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000310000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_importStatement1139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_importStatement1143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_importStatement1148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_FROM_in_importStatement1153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_importStatement1158 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableLocation_in_importStatement1161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createDatabaseStatement_in_ddlStatement1213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchDatabaseStatement_in_ddlStatement1221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropDatabaseStatement_in_ddlStatement1229 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createTableStatement_in_ddlStatement1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropTableStatement_in_ddlStatement1245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_truncateTableStatement_in_ddlStatement1253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatement_in_ddlStatement1261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descStatement_in_ddlStatement1269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStatement_in_ddlStatement1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_metastoreCheck_in_ddlStatement1285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createViewStatement_in_ddlStatement1293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropViewStatement_in_ddlStatement1301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createFunctionStatement_in_ddlStatement1309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexStatement_in_ddlStatement1317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropIndexStatement_in_ddlStatement1325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropFunctionStatement_in_ddlStatement1333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_analyzeStatement_in_ddlStatement1341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lockStatement_in_ddlStatement1349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unlockStatement_in_ddlStatement1357 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createRoleStatement_in_ddlStatement1365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dropRoleStatement_in_ddlStatement1373 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantPrivileges_in_ddlStatement1381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokePrivileges_in_ddlStatement1389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showGrants_in_ddlStatement1397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showRoleGrants_in_ddlStatement1405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_grantRole_in_ddlStatement1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_revokeRole_in_ddlStatement1421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifExists1448 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifExists1450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RESTRICT_in_restrictOrCascade1487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASCADE_in_restrictOrCascade1505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IF_in_ifNotExists1542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_NOT_in_ifNotExists1544 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_EXISTS_in_ifNotExists1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_storedAsDirs1583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_storedAsDirs1585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_KW_DIRECTORIES_in_storedAsDirs1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OR_in_orReplace1624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_orReplace1626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IGNORE_in_ignoreProtection1667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_PROTECTION_in_ignoreProtection1669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createDatabaseStatement1714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_createDatabaseStatement1717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_createDatabaseStatement1719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifNotExists_in_createDatabaseStatement1730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_createDatabaseStatement1743 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000414000000000L});
    public static final BitSet FOLLOW_databaseComment_in_createDatabaseStatement1753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000014000000000L});
    public static final BitSet FOLLOW_dbLocation_in_createDatabaseStatement1764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_createDatabaseStatement1776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_createDatabaseStatement1778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_dbProperties_in_createDatabaseStatement1782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_dbLocation1843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_dbLocation1847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_dbProperties1889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_dbPropertiesList_in_dbProperties1891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_dbProperties1893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_dbPropertiesList1937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_keyValueProperty_in_dbPropertiesList1939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_USE_in_switchDatabaseStatement1978 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_switchDatabaseStatement1980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropDatabaseStatement2019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001800000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_dropDatabaseStatement2022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_KW_SCHEMA_in_dropDatabaseStatement2024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifExists_in_dropDatabaseStatement2027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_dropDatabaseStatement2030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_restrictOrCascade_in_dropDatabaseStatement2032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_databaseComment2078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_databaseComment2082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createTableStatement2122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000110000L});
    public static final BitSet FOLLOW_KW_EXTERNAL_in_createTableStatement2127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createTableStatement2131 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifNotExists_in_createTableStatement2133 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_createTableStatement2138 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C30018000000L,0x2000000000080210L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_LIKE_in_createTableStatement2151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_createTableStatement2155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement2166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createTableStatement2179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_createTableStatement2181 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createTableStatement2183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000410018000000L,0x2000000000080210L,0x0000000000000004L});
    public static final BitSet FOLLOW_tableComment_in_createTableStatement2196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010018000000L,0x2000000000080210L,0x0000000000000004L});
    public static final BitSet FOLLOW_tablePartition_in_createTableStatement2208 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010018000000L,0x0000000000080210L,0x0000000000000004L});
    public static final BitSet FOLLOW_tableBuckets_in_createTableStatement2220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010018000000L,0x0000000000000210L,0x0000000000000004L});
    public static final BitSet FOLLOW_tableSkewed_in_createTableStatement2232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010018000000L,0x0000000000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_tableRowFormat_in_createTableStatement2244 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010018000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tableFileFormat_in_createTableStatement2256 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010010000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tableLocation_in_createTableStatement2268 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createTableStatement2280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_createTableStatement2293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000200000000400L});
    public static final BitSet FOLLOW_selectStatement_in_createTableStatement2295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRUNCATE_in_truncateTableStatement2498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_truncateTableStatement2500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tablePartitionPrefix_in_truncateTableStatement2502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createIndexStatement2532 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_INDEX_in_createIndexStatement2534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_createIndexStatement2538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_createIndexStatement2546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_createIndexStatement2548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_createIndexStatement2552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexStatement2554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameList_in_createIndexStatement2558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexStatement2560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_createIndexStatement2568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_createIndexStatement2572 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060414008000000L,0x0000000000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_autoRebuild_in_createIndexStatement2580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0060410008000000L,0x0000000000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_indexPropertiesPrefixed_in_createIndexStatement2589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020410008000000L,0x0000000000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_indexTblName_in_createIndexStatement2598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000410008000000L,0x0000000000000010L,0x0000000000000004L});
    public static final BitSet FOLLOW_tableRowFormat_in_createIndexStatement2607 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000410008000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tableFileFormat_in_createIndexStatement2616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000410000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tableLocation_in_createIndexStatement2625 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createIndexStatement2634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_indexComment_in_createIndexStatement2643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_indexComment2800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_indexComment2804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WITH_in_autoRebuild2845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_DEFERRED_in_autoRebuild2847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_REBUILD_in_autoRebuild2849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IN_in_indexTblName2885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_indexTblName2887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_indexTblName2891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_indexPropertiesPrefixed2938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_indexProperties_in_indexPropertiesPrefixed2941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_indexProperties2974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_indexPropertiesList_in_indexProperties2976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_indexProperties2978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3019 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_indexPropertiesList3022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_keyValueProperty_in_indexPropertiesList3024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_DROP_in_dropIndexStatement3062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_KW_INDEX_in_dropIndexStatement3064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifExists_in_dropIndexStatement3066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_dropIndexStatement3071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_dropIndexStatement3073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_dropIndexStatement3077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropTableStatement3122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_dropTableStatement3124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifExists_in_dropTableStatement3126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_dropTableStatement3129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_alterStatement3167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0102000800010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_alterStatement3192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_alterTableStatementSuffix_in_alterStatement3195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_VIEW_in_alterStatement3219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_alterViewStatementSuffix_in_alterStatement3222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INDEX_in_alterStatement3246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_alterIndexStatementSuffix_in_alterStatement3249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATABASE_in_alterStatement3273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_alterDatabaseStatementSuffix_in_alterStatement3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterTableStatementSuffix3313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddCol_in_alterTableStatementSuffix3321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenameCol_in_alterTableStatementSuffix3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterTableStatementSuffix3337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterTableStatementSuffix3345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixTouch_in_alterTableStatementSuffix3353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixArchive_in_alterTableStatementSuffix3361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixUnArchive_in_alterTableStatementSuffix3369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProperties_in_alterTableStatementSuffix3377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatement_in_alterTableStatementSuffix3385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixClusterbySortby_in_alterTableStatementSuffix3393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSkewedby_in_alterTableStatementSuffix3401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterViewSuffixProperties_in_alterViewStatementSuffix3428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRename_in_alterViewStatementSuffix3436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixAddPartitions_in_alterViewStatementSuffix3460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixDropPartitions_in_alterViewStatementSuffix3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_alterViewStatementSuffix3510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_alterViewStatementSuffix3512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000200000000400L});
    public static final BitSet FOLLOW_selectStatement_in_alterViewStatementSuffix3514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_alterIndexStatementSuffix3571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterIndexStatementSuffix3575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0210000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterIndexStatementSuffix3584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0210000000000000L});
    public static final BitSet FOLLOW_KW_REBUILD_in_alterIndexStatementSuffix3599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterIndexStatementSuffix3633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_IDXPROPERTIES_in_alterIndexStatementSuffix3635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_indexProperties_in_alterIndexStatementSuffix3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterDatabaseSuffixProperties_in_alterDatabaseStatementSuffix3695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterDatabaseSuffixProperties3724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterDatabaseSuffixProperties3726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_KW_DBPROPERTIES_in_alterDatabaseSuffixProperties3728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_dbProperties_in_alterDatabaseSuffixProperties3730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRename3776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRename3778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRename3782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddCol3825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000080000000L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddCol3830 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_REPLACE_in_alterStatementSuffixAddCol3836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_alterStatementSuffixAddCol3839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_alterStatementSuffixAddCol3841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_alterStatementSuffixAddCol3843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_alterStatementSuffixAddCol3845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3918 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_KW_CHANGE_in_alterStatementSuffixRenameCol3920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000002000000000L});
    public static final BitSet FOLLOW_KW_COLUMN_in_alterStatementSuffixRenameCol3922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3927 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixRenameCol3931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000CFFF8400L});
    public static final BitSet FOLLOW_colType_in_alterStatementSuffixRenameCol3933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000400000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_COMMENT_in_alterStatementSuffixRenameCol3936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixRenameCol3940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_alterStatementChangeColPosition_in_alterStatementSuffixRenameCol3944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIRST_in_alterStatementChangeColPosition3990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AFTER_in_alterStatementChangeColPosition3992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementChangeColPosition3996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixAddPartitions4048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_ADD_in_alterStatementSuffixAddPartitions4050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ifNotExists_in_alterStatementSuffixAddPartitions4052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions4055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions4057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixAddPartitions4061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionLocation_in_alterStatementSuffixAddPartitions4063 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixTouch4116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TOUCH_in_alterStatementSuffixTouch4118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixTouch4121 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixArchive4167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_ARCHIVE_in_alterStatementSuffixArchive4169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixArchive4172 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixUnArchive4218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_UNARCHIVE_in_alterStatementSuffixUnArchive4220 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixUnArchive4223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_partitionLocation4275 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_partitionLocation4279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixDropPartitions4315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_DROP_in_alterStatementSuffixDropPartitions4317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixDropPartitions4319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4322 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080100000000L});
    public static final BitSet FOLLOW_COMMA_in_alterStatementSuffixDropPartitions4325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_dropPartitionSpec_in_alterStatementSuffixDropPartitions4327 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080100000000L});
    public static final BitSet FOLLOW_ignoreProtection_in_alterStatementSuffixDropPartitions4331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixProperties4382 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixProperties4384 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties4388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixProperties4413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_UNSET_in_alterStatementSuffixProperties4415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterStatementSuffixProperties4417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000400000L});
    public static final BitSet FOLLOW_ifExists_in_alterStatementSuffixProperties4419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixProperties4422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterViewSuffixProperties4469 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_KW_SET_in_alterViewSuffixProperties4471 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties4475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterViewSuffixProperties4500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_KW_UNSET_in_alterViewSuffixProperties4502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_alterViewSuffixProperties4504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000400000L});
    public static final BitSet FOLLOW_ifExists_in_alterViewSuffixProperties4506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterViewSuffixProperties4509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_SERDE_in_alterStatementSuffixSerdeProperties4556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixSerdeProperties4560 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_alterStatementSuffixSerdeProperties4563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixSerdeProperties4593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_alterStatementSuffixSerdeProperties4595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_alterStatementSuffixSerdeProperties4597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tablePartitionPrefix4635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_tablePartitionPrefix4637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tablePartitionPrefix_in_alterTblPartitionStatement4675 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0600000000008000L,0x0000000000003800L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffix_in_alterTblPartitionStatement4677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixFileFormat_in_alterTblPartitionStatementSuffix4712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixLocation_in_alterTblPartitionStatementSuffix4718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixProtectMode_in_alterTblPartitionStatementSuffix4724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixMergeFiles_in_alterTblPartitionStatementSuffix4730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixSerdeProperties_in_alterTblPartitionStatementSuffix4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixRenamePart_in_alterTblPartitionStatementSuffix4742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterStatementSuffixBucketNum_in_alterTblPartitionStatementSuffix4748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterTblPartitionStatementSuffixSkewedLocation_in_alterTblPartitionStatementSuffix4754 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixFileFormat4776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_KW_FILEFORMAT_in_alterStatementSuffixFileFormat4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000F00000L});
    public static final BitSet FOLLOW_fileFormat_in_alterStatementSuffixFileFormat4780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterTblPartitionStatementSuffixSkewedLocation4811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_SKEWED_in_alterTblPartitionStatementSuffixSkewedLocation4813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterTblPartitionStatementSuffixSkewedLocation4815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_skewedLocations_in_alterTblPartitionStatementSuffixSkewedLocation4817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_skewedLocations4860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000002000L,0x0000000000020000L,0x0000000000000000L,0x0000018000078000L});
    public static final BitSet FOLLOW_skewedLocationsList_in_skewedLocations4862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_skewedLocations4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList4905 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_skewedLocationsList4908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000002000L,0x0000000000020000L,0x0000000000000000L,0x0000018000078000L});
    public static final BitSet FOLLOW_skewedLocationMap_in_skewedLocationsList4910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_skewedValueLocationElement_in_skewedLocationMap4956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_EQUAL_in_skewedLocationMap4958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_skewedLocationMap4962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SET_in_alterStatementSuffixLocation4999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_KW_LOCATION_in_alterStatementSuffixLocation5001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_alterStatementSuffixLocation5005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSkewedby5040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_tableSkewed_in_alterStatementSuffixSkewedby5042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSkewedby5061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_SKEWED_in_alterStatementSuffixSkewedby5065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixSkewedby5082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixSkewedby5084 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_storedAsDirs_in_alterStatementSuffixSkewedby5086 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_alterProtectMode_in_alterStatementSuffixProtectMode5121 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RENAME_in_alterStatementSuffixRenamePart5160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_TO_in_alterStatementSuffixRenamePart5162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_alterStatementSuffixRenamePart5164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CONCATENATE_in_alterStatementSuffixMergeFiles5202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ENABLE_in_alterProtectMode5239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001C000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode5241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISABLE_in_alterProtectMode5258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001C000L});
    public static final BitSet FOLLOW_alterProtectModeMode_in_alterProtectMode5260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_OFFLINE_in_alterProtectModeMode5296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NO_DROP_in_alterProtectModeMode5311 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_CASCADE_in_alterProtectModeMode5313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_READONLY_in_alterProtectModeMode5331 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INTO_in_alterStatementSuffixBucketNum5365 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_Number_in_alterStatementSuffixBucketNum5369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_alterStatementSuffixBucketNum5371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_tableBuckets_in_alterStatementSuffixClusterbySortby5410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_alterStatementSuffixClusterbySortby5429 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_NOT_in_alterStatementSuffixClusterbySortby5431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_alterStatementSuffixClusterbySortby5433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_fileFormat5466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_fileFormat5481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RCFILE_in_fileFormat5496 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_fileFormat5511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_fileFormat5517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_fileFormat5524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_fileFormat5530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_fileFormat5534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_fileFormat5572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tabTypeExpr5608 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_DOT_in_tabTypeExpr5611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000070000000L});
    public static final BitSet FOLLOW_set_in_tabTypeExpr5614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Identifier_in_descTabTypeExpr5656 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_DOT_in_descTabTypeExpr5659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000070000000L});
    public static final BitSet FOLLOW_set_in_descTabTypeExpr5662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_Identifier_in_descTabTypeExpr5680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tabTypeExpr_in_partTypeExpr5708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_partTypeExpr5710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_descTabTypeExpr_in_descPartTypeExpr5750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_descPartTypeExpr5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000020000000C0L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000020000000C0L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_descStatement5800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_descPartTypeExpr_in_descStatement5811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_descStatement5839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020802044402040L,0x0000000000000400L,0x00000380FE3F8400L,0x0000007FFD800C00L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020802044402000L,0x0000000000000400L,0x00000380FE3F8400L,0x0000007FFD800C00L});
    public static final BitSet FOLLOW_descFuncNames_in_descStatement5847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESCRIBE_in_descStatement5869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_DESC_in_descStatement5871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_descStatement5874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_descStatement5876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_descStatement5882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ANALYZE_in_analyzeStatement5922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_analyzeStatement5924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_analyzeStatement5929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_KW_COMPUTE_in_analyzeStatement5932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_KW_STATISTICS_in_analyzeStatement5934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_FOR_in_analyzeStatement5937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_analyzeStatement5939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameList_in_analyzeStatement5943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement5985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000018000000000L});
    public static final BitSet FOLLOW_KW_DATABASES_in_showStatement5988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_SCHEMAS_in_showStatement5990 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement5994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement5996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_KW_TABLES_in_showStatement6017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020802000202000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6021 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement6028 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000802000002000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement6033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_COLUMNS_in_showStatement6067 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000200000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement6077 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000200000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6081 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement6088 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_FUNCTIONS_in_showStatement6118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_PARTITIONS_in_showStatement6141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement6143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement6145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_CREATE_in_showStatement6167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement6169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_showStatement6173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6190 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_showStatement6192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement6194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800000200000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement6205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_KW_LIKE_in_showStatement6209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_showStatement6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_showStatement6243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement6247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_showStatement6250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_showStatement6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_showStatement6256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_KW_LOCKS_in_showStatement6281 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000040L});
    public static final BitSet FOLLOW_partTypeExpr_in_showStatement6286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_EXTENDED_in_showStatement6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showStatement6317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000080L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_FORMATTED_in_showStatement6322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0002000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_KW_INDEX_in_showStatement6327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_INDEXES_in_showStatement6329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_showStatement6332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000002000L});
    public static final BitSet FOLLOW_showStmtIdentifier_in_showStatement6334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000200000L});
    public static final BitSet FOLLOW_KW_FROM_in_showStatement6338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_IN_in_showStatement6340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_showStatement6345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_lockStatement6394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_lockStatement6396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_lockStatement6398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_lockStatement6400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001800000000000L});
    public static final BitSet FOLLOW_lockMode_in_lockStatement6403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_lockMode0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNLOCK_in_unlockStatement6474 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_unlockStatement6476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_unlockStatement6478 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_unlockStatement6480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createRoleStatement6520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_kwRole_in_createRoleStatement6522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_createRoleStatement6526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropRoleStatement6566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_kwRole_in_dropRoleStatement6568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_dropRoleStatement6572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantPrivileges6612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0082200400000000L,0x00F0400000000000L});
    public static final BitSet FOLLOW_privilegeList_in_grantPrivileges6616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000040000L});
    public static final BitSet FOLLOW_privilegeObject_in_grantPrivileges6624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_TO_in_grantPrivileges6633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantPrivileges6635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_grantPrivileges6644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_withOption_in_grantPrivileges6646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokePrivileges6696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0082200400000000L,0x00F0400000000000L});
    public static final BitSet FOLLOW_privilegeList_in_revokePrivileges6698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000200000L});
    public static final BitSet FOLLOW_privilegeObject_in_revokePrivileges6700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokePrivileges6703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokePrivileges6705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_grantRole6749 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_kwRole_in_grantRole6751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_grantRole6753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000040000L});
    public static final BitSet FOLLOW_COMMA_in_grantRole6756 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_grantRole6758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000040000L});
    public static final BitSet FOLLOW_KW_TO_in_grantRole6762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_grantRole6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_REVOKE_in_revokeRole6806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_kwRole_in_revokeRole6808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_revokeRole6810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000200000L});
    public static final BitSet FOLLOW_COMMA_in_revokeRole6813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_revokeRole6815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000200000L});
    public static final BitSet FOLLOW_KW_FROM_in_revokeRole6819 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_principalSpecification_in_revokeRole6821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showRoleGrants6863 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_kwRole_in_showRoleGrants6865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showRoleGrants6867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_principalName_in_showRoleGrants6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_in_showGrants6908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_GRANT_in_showGrants6910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_principalName_in_showGrants6912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_privilegeIncludeColObject_in_showGrants6914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeIncludeColObject6957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_privilegeIncludeColObject6962 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privilegeIncludeColObject6964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_privilegeIncludeColObject6967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_privilegeIncludeColObject6970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameList_in_privilegeIncludeColObject6974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privilegeIncludeColObject6976 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_privilegeIncludeColObject6980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ON_in_privilegeObject7031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_privilegeObject7036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_DATABASE_in_privilegeObject7038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_privilegeObject7041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_privilegeObject7043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList7090 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_privilegeList7093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0082200400000000L,0x00F0400000000000L});
    public static final BitSet FOLLOW_privlegeDef_in_privilegeList7095 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_privilegeType_in_privlegeDef7137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_privlegeDef7140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameList_in_privlegeDef7144 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_privlegeDef7146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALL_in_privilegeType7191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ALTER_in_privilegeType7205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UPDATE_in_privilegeType7219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_privilegeType7233 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_privilegeType7247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INDEX_in_privilegeType7261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCK_in_privilegeType7275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_privilegeType7289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SHOW_DATABASE_in_privilegeType7303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification7336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_principalSpecification7339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_principalName_in_principalSpecification7341 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_kwUser_in_principalName7379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_principalName7381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_principalName7397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_principalName7399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kwRole_in_principalName7415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_principalName7417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GRANT_in_withOption7452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_KW_OPTION_in_withOption7454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MSCK_in_metastoreCheck7491 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_REPAIR_in_metastoreCheck7496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_metastoreCheck7501 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_metastoreCheck7505 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck7507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_metastoreCheck7511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_metastoreCheck7513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_CREATE_in_createFunctionStatement7567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_createFunctionStatement7569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_createFunctionStatement7571 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_createFunctionStatement7573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_createFunctionStatement7575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_createFunctionStatement7577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropFunctionStatement7618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_KW_TEMPORARY_in_dropFunctionStatement7620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_KW_FUNCTION_in_dropFunctionStatement7622 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifExists_in_dropFunctionStatement7624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_dropFunctionStatement7627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CREATE_in_createViewStatement7669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000040000000L});
    public static final BitSet FOLLOW_orReplace_in_createViewStatement7672 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_createViewStatement7676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifNotExists_in_createViewStatement7679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableName_in_createViewStatement7685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000420010000000L,0x2000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_createViewStatement7696 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameCommentList_in_createViewStatement7698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createViewStatement7700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400010000000L,0x2000000000000010L});
    public static final BitSet FOLLOW_tableComment_in_createViewStatement7704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x2000000000000010L});
    public static final BitSet FOLLOW_viewPartition_in_createViewStatement7707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_tablePropertiesPrefixed_in_createViewStatement7718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_createViewStatement7729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000200000000400L});
    public static final BitSet FOLLOW_selectStatement_in_createViewStatement7739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_viewPartition7862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_viewPartition7864 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewPartition7866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameList_in_viewPartition7868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewPartition7870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DROP_in_dropViewStatement7909 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_dropViewStatement7911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L});
    public static final BitSet FOLLOW_ifExists_in_dropViewStatement7913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_viewName_in_dropViewStatement7916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_showStmtIdentifier0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COMMENT_in_tableComment7995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableComment7999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITIONED_in_tablePartition8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tablePartition8038 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tablePartition8040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_tablePartition8042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tablePartition8044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTERED_in_tableBuckets8089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets8091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets8093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameList_in_tableBuckets8097 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets8099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L,0x8000000000000000L});
    public static final BitSet FOLLOW_KW_SORTED_in_tableBuckets8102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableBuckets8104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBuckets8106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameOrderList_in_tableBuckets8110 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBuckets8112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_INTO_in_tableBuckets8116 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_Number_in_tableBuckets8120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_KW_BUCKETS_in_tableBuckets8122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SKEWED_in_tableSkewed8174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableSkewed8176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameList_in_tableSkewed8182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed8184 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_tableSkewed8186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableSkewed8188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000002000L,0x0000000000020000L,0x0000000000000000L,0x0000018000078000L});
    public static final BitSet FOLLOW_skewedValueElement_in_tableSkewed8193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableSkewed8196 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_storedAsDirs_in_tableSkewed8199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_rowFormat8247 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_rowFormat8263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDREADER_in_recordReader8312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordReader8314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RECORDWRITER_in_recordWriter8363 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_recordWriter8365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatSerde8414 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatSerde8416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_SERDE_in_rowFormatSerde8418 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_rowFormatSerde8422 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_rowFormatSerde8425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_rowFormatSerde8427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_rowFormatSerde8431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ROW_in_rowFormatDelimited8483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_FORMAT_in_rowFormatDelimited8485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_KW_DELIMITED_in_rowFormatDelimited8487 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001520L});
    public static final BitSet FOLLOW_tableRowFormatFieldIdentifier_in_rowFormatDelimited8489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001500L});
    public static final BitSet FOLLOW_tableRowFormatCollItemsIdentifier_in_rowFormatDelimited8492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_tableRowFormatMapKeysIdentifier_in_rowFormatDelimited8495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_tableRowFormatLinesIdentifier_in_rowFormatDelimited8498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatDelimited_in_tableRowFormat8554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rowFormatSerde_in_tableRowFormat8574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TBLPROPERTIES_in_tablePropertiesPrefixed8621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_tablePropertiesPrefixed8624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_tableProperties8657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_tablePropertiesList_in_tableProperties8659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableProperties8661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList8702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList8705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_keyValueProperty_in_tablePropertiesList8707 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList8732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_tablePropertiesList8735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_keyProperty_in_tablePropertiesList8737 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty8783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_EQUAL_in_keyValueProperty8785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_keyValueProperty8789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_keyProperty8836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FIELDS_in_tableRowFormatFieldIdentifier8880 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatFieldIdentifier8882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_ESCAPED_in_tableRowFormatFieldIdentifier8891 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatFieldIdentifier8893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatFieldIdentifier8897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_COLLECTION_in_tableRowFormatCollItemsIdentifier8949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_KW_ITEMS_in_tableRowFormatCollItemsIdentifier8951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatCollItemsIdentifier8953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatCollItemsIdentifier8955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatCollItemsIdentifier8959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_tableRowFormatMapKeysIdentifier9005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_KEYS_in_tableRowFormatMapKeysIdentifier9007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatMapKeysIdentifier9009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatMapKeysIdentifier9011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatMapKeysIdentifier9015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LINES_in_tableRowFormatLinesIdentifier9061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_KW_TERMINATED_in_tableRowFormatLinesIdentifier9063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableRowFormatLinesIdentifier9065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableRowFormatLinesIdentifier9069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat9115 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat9117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_SEQUENCEFILE_in_tableFileFormat9119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat9134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat9136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_KW_TEXTFILE_in_tableFileFormat9138 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat9153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat9155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_KW_RCFILE_in_tableFileFormat9157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat9172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat9174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_KW_INPUTFORMAT_in_tableFileFormat9176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat9180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_KW_OUTPUTFORMAT_in_tableFileFormat9182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat9186 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_INPUTDRIVER_in_tableFileFormat9189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat9193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_KW_OUTPUTDRIVER_in_tableFileFormat9195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat9199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat9237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_tableFileFormat9239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableFileFormat9243 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_WITH_in_tableFileFormat9255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_KW_SERDEPROPERTIES_in_tableFileFormat9257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_tableProperties_in_tableFileFormat9261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STORED_in_tableFileFormat9292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_tableFileFormat9294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_tableFileFormat9298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCATION_in_tableLocation9346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_tableLocation9350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList9386 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameTypeList9389 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameType_in_columnNameTypeList9391 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList9429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameColonTypeList9432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameColonType_in_columnNameColonTypeList9434 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_columnName_in_columnNameList9472 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameList9475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnName_in_columnNameList9477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_columnName9521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList9548 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameOrderList9551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameOrder_in_columnNameOrderList9553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedValueElement9598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePairList_in_skewedValueElement9607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9634 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValuePairList9637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedColumnValuePairList9639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_skewedColumnValuePair9684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000020000L,0x0000000000000000L,0x0000018000078000L});
    public static final BitSet FOLLOW_skewedColumnValues_in_skewedColumnValuePair9688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_skewedColumnValuePair9690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues9733 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_skewedColumnValues9736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000020000L,0x0000000000000000L,0x0000018000078000L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedColumnValues9738 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_constant_in_skewedColumnValue9782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValue_in_skewedValueLocationElement9816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_skewedColumnValuePair_in_skewedValueLocationElement9825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameOrder9856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnNameOrder9861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnNameOrder9867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList9939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_columnNameCommentList9942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameComment_in_columnNameCommentList9944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_columnNameComment9984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameComment9987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameComment9991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_columnRefOrder10039 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_KW_ASC_in_columnRefOrder10044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DESC_in_columnRefOrder10050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameType10124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000CFFF8400L});
    public static final BitSet FOLLOW_colType_in_columnNameType10126 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameType10129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameType10133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_columnNameColonType10219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_COLON_in_columnNameColonType10221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000CFFF8400L});
    public static final BitSet FOLLOW_colType_in_columnNameColonType10223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_KW_COMMENT_in_columnNameColonType10226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_columnNameColonType10230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_colType10314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_colType_in_colTypeList10341 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_colTypeList10344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000CFFF8400L});
    public static final BitSet FOLLOW_colType_in_colTypeList10346 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_primitiveType_in_type10374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_listType_in_type10382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_structType_in_type10390 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mapType_in_type10398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unionType_in_type10406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TINYINT_in_primitiveType10428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SMALLINT_in_primitiveType10449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INT_in_primitiveType10469 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BIGINT_in_primitiveType10494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BOOLEAN_in_primitiveType10516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FLOAT_in_primitiveType10537 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DOUBLE_in_primitiveType10560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATE_in_primitiveType10582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DATETIME_in_primitiveType10606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TIMESTAMP_in_primitiveType10626 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRING_in_primitiveType10645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_BINARY_in_primitiveType10667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ARRAY_in_listType10708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_listType10710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000CFFF8400L});
    public static final BitSet FOLLOW_type_in_listType10712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_listType10714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STRUCT_in_structType10751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_structType10753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_columnNameColonTypeList_in_structType10755 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_structType10757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_mapType10792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_mapType10794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000007FF8000L});
    public static final BitSet FOLLOW_primitiveType_in_mapType10798 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_mapType10800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000CFFF8400L});
    public static final BitSet FOLLOW_type_in_mapType10804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_mapType10806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIONTYPE_in_unionType10849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_LESSTHAN_in_unionType10851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000CFFF8400L});
    public static final BitSet FOLLOW_colTypeList_in_unionType10853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_GREATERTHAN_in_unionType10855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNION_in_queryOperator10890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_KW_ALL_in_queryOperator10892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression10916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_queryOperator_in_queryStatementExpression10919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0040000000000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_queryStatement_in_queryStatementExpression10922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_fromClause_in_queryStatement10945 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_body_in_queryStatement10955 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_regular_body_in_queryStatement10977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_regular_body10996 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000200000000400L});
    public static final BitSet FOLLOW_selectClause_in_regular_body11001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_fromClause_in_regular_body11006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x8000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_whereClause_in_regular_body11011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_groupByClause_in_regular_body11017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_havingClause_in_regular_body11023 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001E0L});
    public static final BitSet FOLLOW_orderByClause_in_regular_body11029 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_clusterByClause_in_regular_body11035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_distributeByClause_in_regular_body11041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_regular_body11047 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_limitClause_in_regular_body11053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectStatement_in_regular_body11146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectStatement11164 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_fromClause_in_selectStatement11169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x8000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_whereClause_in_selectStatement11174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_groupByClause_in_selectStatement11180 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_havingClause_in_selectStatement11186 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001E0L});
    public static final BitSet FOLLOW_orderByClause_in_selectStatement11192 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_clusterByClause_in_selectStatement11198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_distributeByClause_in_selectStatement11204 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_selectStatement11210 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_limitClause_in_selectStatement11216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_insertClause_in_body11326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L,0x0000200000000400L});
    public static final BitSet FOLLOW_selectClause_in_body11331 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x8000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_whereClause_in_body11336 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_groupByClause_in_body11342 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_havingClause_in_body11348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001E0L});
    public static final BitSet FOLLOW_orderByClause_in_body11354 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_clusterByClause_in_body11360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_distributeByClause_in_body11366 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_body11372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_limitClause_in_body11378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_body11466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x8000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_whereClause_in_body11471 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_groupByClause_in_body11477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001F0L});
    public static final BitSet FOLLOW_havingClause_in_body11483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001E0L});
    public static final BitSet FOLLOW_orderByClause_in_body11489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x00000000000001C0L});
    public static final BitSet FOLLOW_clusterByClause_in_body11495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_distributeByClause_in_body11501 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_sortByClause_in_body11507 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_limitClause_in_body11513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause11628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_OVERWRITE_in_insertClause11630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010800L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_destination_in_insertClause11632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_ifNotExists_in_insertClause11634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_INSERT_in_insertClause11653 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_KW_INTO_in_insertClause11655 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_KW_TABLE_in_insertClause11657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_insertClause11659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LOCAL_in_destination11706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination11708 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_destination11710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DIRECTORY_in_destination11725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_destination11727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLE_in_destination11742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableOrPartition_in_destination11744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LIMIT_in_limitClause11778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_Number_in_limitClause11782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SELECT_in_selectClause11823 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0010000000020000L,0x000003B0C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_hintClause_in_selectClause11825 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0010000000020000L,0x00000330C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_KW_ALL_in_selectClause11831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000300C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_selectClause11837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000300C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_selectList_in_selectClause11841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TRANSFORM_in_selectClause11875 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_selectTrfmClause_in_selectClause11877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_trfmClause_in_selectClause11948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectItem_in_selectList11991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectList11995 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000300C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_selectItem_in_selectList11998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause12037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000300C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_selectExpressionList_in_selectTrfmClause12039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause12041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000006L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause12049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_recordWriter_in_selectTrfmClause12053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_USING_in_selectTrfmClause12059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_selectTrfmClause12061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_KW_AS_in_selectTrfmClause12069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000000000L});
    public static final BitSet FOLLOW_LPAREN_in_selectTrfmClause12073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause12076 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause12080 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_selectTrfmClause12083 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aliasList_in_selectTrfmClause12089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_columnNameTypeList_in_selectTrfmClause12093 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_rowFormat_in_selectTrfmClause12105 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_recordReader_in_selectTrfmClause12109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause12172 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_hintClause12174 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_PLUS_in_hintClause12176 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_hintList_in_hintClause12178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_hintClause12180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_DIVIDE_in_hintClause12182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintItem_in_hintList12221 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_hintList12224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00001C0000000000L});
    public static final BitSet FOLLOW_hintItem_in_hintList12226 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_hintName_in_hintItem12264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_hintItem12267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_hintArgs_in_hintItem12269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_hintItem12271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAPJOIN_in_hintName12315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_STREAMTABLE_in_hintName12327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HOLD_DDLTIME_in_hintName12339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs12374 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_hintArgs12377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_hintArgName_in_hintArgs12379 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_hintArgName12421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectItem12454 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002010000000L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem12459 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem12462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AS_in_selectItem12468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_selectItem12470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem12472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectItem12475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_selectItem12477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_selectItem12481 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_MAP_in_trfmClause12531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000300C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause12536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000006L});
    public static final BitSet FOLLOW_KW_REDUCE_in_trfmClause12546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000300C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_selectExpressionList_in_trfmClause12548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000006L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause12558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000002L});
    public static final BitSet FOLLOW_recordWriter_in_trfmClause12562 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_USING_in_trfmClause12568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_trfmClause12570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_KW_AS_in_trfmClause12578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000000000L});
    public static final BitSet FOLLOW_LPAREN_in_trfmClause12582 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause12585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause12589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_trfmClause12592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_aliasList_in_trfmClause12598 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_columnNameTypeList_in_trfmClause12602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000005L});
    public static final BitSet FOLLOW_rowFormat_in_trfmClause12614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_recordReader_in_trfmClause12618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectExpression12681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableAllColumns_in_selectExpression12685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList12716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectExpressionList12719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000300C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_selectExpression_in_selectExpressionList12721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns12752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableAllColumns12774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_DOT_in_tableAllColumns12776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_tableAllColumns12778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableOrColumn12826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList12865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList12868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_expressionList12870 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_aliasList12912 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_aliasList12915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_aliasList12917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_FROM_in_fromClause12961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000000000L,0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_joinSource_in_fromClause12963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fromSource_in_joinSource12998 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0037000000000000L});
    public static final BitSet FOLLOW_joinToken_in_joinSource13002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000000000L});
    public static final BitSet FOLLOW_fromSource_in_joinSource13005 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004002000000000L,0x0000000000000000L,0x0037000000000000L});
    public static final BitSet FOLLOW_KW_ON_in_joinSource13008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_joinSource13011 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0037000000000000L});
    public static final BitSet FOLLOW_uniqueJoinToken_in_joinSource13024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource13027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_joinSource13030 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000000000L,0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_uniqueJoinSource_in_joinSource13033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_PRESERVE_in_uniqueJoinSource13062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000000000L});
    public static final BitSet FOLLOW_fromSource_in_uniqueJoinSource13065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_uniqueJoinExpr_in_uniqueJoinSource13067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_uniqueJoinExpr13094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr13098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_uniqueJoinExpr13101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_uniqueJoinExpr13105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_uniqueJoinExpr13109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_UNIQUEJOIN_in_uniqueJoinToken13152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken13184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_kwInner_in_joinToken13216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken13219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CROSS_in_joinToken13242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken13244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken13267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken13270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken13272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_RIGHT_in_joinToken13286 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken13288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken13290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FULL_in_joinToken13304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0008000000000000L});
    public static final BitSet FOLLOW_KW_OUTER_in_joinToken13307 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken13309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LEFT_in_joinToken13323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_KW_SEMI_in_joinToken13326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_KW_JOIN_in_joinToken13329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_LATERAL_in_lateralView13360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_KW_VIEW_in_lateralView13362 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000400000L,0x0000000000000000L,0x00000000C8000400L});
    public static final BitSet FOLLOW_function_in_lateralView13364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_tableAlias_in_lateralView13366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_lateralView13368 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_lateralView13370 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_lateralView13373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_lateralView13375 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_Identifier_in_tableAlias13426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableSource_in_fromSource13466 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_subQuerySource_in_fromSource13470 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_lateralView_in_fromSource13474 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_tableBucketSample13508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_tableBucketSample13510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_KW_BUCKET_in_tableBucketSample13512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_Number_in_tableBucketSample13517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_KW_OUT_in_tableBucketSample13520 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_KW_OF_in_tableBucketSample13522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_Number_in_tableBucketSample13527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0004040000000000L});
    public static final BitSet FOLLOW_KW_ON_in_tableBucketSample13531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_tableBucketSample13535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_tableBucketSample13538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_tableBucketSample13542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_tableBucketSample13548 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_splitSample13595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_splitSample13597 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_Number_in_splitSample13603 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x3000000000000000L});
    public static final BitSet FOLLOW_KW_PERCENT_in_splitSample13609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_ROWS_in_splitSample13611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_splitSample13614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_TABLESAMPLE_in_splitSample13658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_splitSample13660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ByteLengthLiteral_in_splitSample13666 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_splitSample13669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableBucketSample_in_tableSample13715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_splitSample_in_tableSample13723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableSource13752 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L,0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_tableSample_in_tableSource13757 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_tableSource13764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableName13820 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_DOT_in_tableName13822 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_tableName13826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_tableName13856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_viewName13903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_DOT_in_viewName13905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_viewName13911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQuerySource13959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L,0x0040000000000000L,0x0000200200000400L});
    public static final BitSet FOLLOW_queryStatementExpression_in_subQuerySource13961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQuerySource13963 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_subQuerySource13965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_WHERE_in_whereClause14008 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_searchCondition_in_whereClause14010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_searchCondition14049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_GROUP_in_groupByClause14083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_groupByClause14085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause14091 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000084000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_COMMA_in_groupByClause14099 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_groupByExpression_in_groupByClause14101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000084000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_WITH_in_groupByClause14114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_KW_ROLLUP_in_groupByClause14116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_WITH_in_groupByClause14124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CUBE_in_groupByClause14126 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_KW_GROUPING_in_groupByClause14139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_KW_SETS_in_groupByClause14141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_groupByClause14148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_groupingSetExpression_in_groupByClause14150 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByClause14154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_groupingSetExpression_in_groupByClause14156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_groupByClause14161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_groupByExpression_in_groupingSetExpression14255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_groupingSetExpression14276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_groupByExpression_in_groupingSetExpression14282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupingSetExpression14285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_groupByExpression_in_groupingSetExpression14287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_groupingSetExpression14294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_groupingSetExpression14316 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_groupingSetExpression14321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByExpression14361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_HAVING_in_havingClause14392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_havingCondition_in_havingClause14394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_havingCondition14433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ORDER_in_orderByClause14465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_orderByClause14467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_orderByClause14473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14475 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByClause14483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14485 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_orderByClause14489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_ORDER_in_orderByClause14510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_orderByClause14512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14518 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByClause14526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_orderByClause14528 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_CLUSTER_in_clusterByClause14570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_clusterByClause14572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_clusterByClause14578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_clusterByClause14583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_clusterByClause14589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CLUSTER_in_clusterByClause14610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_clusterByClause14612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14618 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_clusterByClause14626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_clusterByClause14628 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_DISTRIBUTE_in_distributeByClause14671 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_distributeByClause14673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_distributeByClause14679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_distributeByClause14684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distributeByClause14690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_DISTRIBUTE_in_distributeByClause14711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_distributeByClause14713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14719 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_distributeByClause14722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_distributeByClause14724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_KW_SORT_in_sortByClause14766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_sortByClause14768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_sortByClause14774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_sortByClause14784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sortByClause14790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_SORT_in_sortByClause14811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_KW_BY_in_sortByClause14813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_sortByClause14827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_columnRefOrder_in_sortByClause14829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_functionName_in_function14872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_function14878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000062004402000L,0x0000000000020000L,0x00000310C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_STAR_in_function14899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_KW_DISTINCT_in_function14915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000062004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_function14920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_function14923 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_function14925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_function14943 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_functionName0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CAST_in_castExpression15105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_castExpression15111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_castExpression15123 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_KW_AS_in_castExpression15135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000007FF8000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression15147 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_castExpression15153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_caseExpression15194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_caseExpression15196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_WHEN_in_caseExpression15203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_caseExpression15205 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_THEN_in_caseExpression15207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_caseExpression15209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000006800L});
    public static final BitSet FOLLOW_KW_ELSE_in_caseExpression15218 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_caseExpression15220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_END_in_caseExpression15228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_CASE_in_whenExpression15270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_KW_WHEN_in_whenExpression15279 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_whenExpression15281 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_KW_THEN_in_whenExpression15283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_whenExpression15285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000006800L});
    public static final BitSet FOLLOW_KW_ELSE_in_whenExpression15294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_whenExpression15296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_KW_END_in_whenExpression15304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Number_in_constant15346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_constant15354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringLiteralSequence_in_constant15362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BigintLiteral_in_constant15370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SmallintLiteral_in_constant15378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TinyintLiteral_in_constant15386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_charSetStringLiteral_in_constant15394 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanValue_in_constant15402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence15423 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_StringLiteral_in_stringLiteralSequence15425 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_CharSetName_in_charSetStringLiteral15470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_CharSetLiteral_in_charSetStringLiteral15474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceOrExpression_in_expression15517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_atomExpression15538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_atomExpression15550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_function_in_atomExpression15558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_atomExpression15566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_atomExpression15574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whenExpression_in_atomExpression15582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableOrColumn_in_atomExpression15590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atomExpression15598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_atomExpression15601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_RPAREN_in_atomExpression15603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomExpression_in_precedenceFieldExpression15626 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_LSQUARE_in_precedenceFieldExpression15630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_precedenceFieldExpression15633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RSQUARE_in_precedenceFieldExpression15635 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_DOT_in_precedenceFieldExpression15642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_Identifier_in_precedenceFieldExpression15645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000008000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_set_in_precedenceUnaryOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition15698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_nullCondition15712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_KW_NULL_in_nullCondition15714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryOperator_in_precedenceUnaryPrefixExpression15742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceFieldExpression_in_precedenceUnaryPrefixExpression15747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnaryPrefixExpression_in_precedenceUnarySuffixExpression15764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_KW_IS_in_precedenceUnarySuffixExpression15769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_nullCondition_in_precedenceUnarySuffixExpression15771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BITWISEXOR_in_precedenceBitwiseXorOperator15819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_precedenceBitwiseXorOperator_in_precedenceBitwiseXorExpression15843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceUnarySuffixExpression_in_precedenceBitwiseXorExpression15846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_set_in_precedenceStarOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15903 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000018000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_precedenceStarOperator_in_precedenceStarExpression15906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceBitwiseXorExpression_in_precedenceStarExpression15909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000018000000000L,0x0000000018000000L});
    public static final BitSet FOLLOW_set_in_precedencePlusOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression15958 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_precedencePlusOperator_in_precedencePlusExpression15961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceStarExpression_in_precedencePlusExpression15964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_AMPERSAND_in_precedenceAmpersandOperator15988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression16009 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_precedenceAmpersandOperator_in_precedenceAmpersandExpression16012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedencePlusExpression_in_precedenceAmpersandExpression16015 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_BITWISEOR_in_precedenceBitwiseOrOperator16039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression16060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_precedenceBitwiseOrOperator_in_precedenceBitwiseOrExpression16063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceAmpersandExpression_in_precedenceBitwiseOrExpression16066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_set_in_precedenceEqualNegatableOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualOperator16120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_precedenceEqualOperator16124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_NS_in_precedenceEqualOperator16128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_precedenceEqualOperator16132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHANOREQUALTO_in_precedenceEqualOperator16136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSTHAN_in_precedenceEqualOperator16140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHANOREQUALTO_in_precedenceEqualOperator16144 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATERTHAN_in_precedenceEqualOperator16148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16172 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800004000000L,0x0000000000000400L,0x0000000030000000L,0x0000003F80000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression16194 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180000000L});
    public static final BitSet FOLLOW_precedenceEqualNegatableOperator_in_precedenceEqualExpression16196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16200 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800004000000L,0x0000000000000400L,0x0000000030000000L,0x0000003F80000000L});
    public static final BitSet FOLLOW_precedenceEqualOperator_in_precedenceEqualExpression16233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800004000000L,0x0000000000000400L,0x0000000030000000L,0x0000003F80000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression16266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020000000000000L});
    public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression16268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression16270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800004000000L,0x0000000000000400L,0x0000000030000000L,0x0000003F80000000L});
    public static final BitSet FOLLOW_KW_IN_in_precedenceEqualExpression16304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_expressions_in_precedenceEqualExpression16306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800004000000L,0x0000000000000400L,0x0000000030000000L,0x0000003F80000000L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceEqualExpression16337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_KW_BETWEEN_in_precedenceEqualExpression16339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceEqualExpression16347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16352 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800004000000L,0x0000000000000400L,0x0000000030000000L,0x0000003F80000000L});
    public static final BitSet FOLLOW_KW_BETWEEN_in_precedenceEqualExpression16392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceEqualExpression16400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022000402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceBitwiseOrExpression_in_precedenceEqualExpression16405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020800004000000L,0x0000000000000400L,0x0000000030000000L,0x0000003F80000000L});
    public static final BitSet FOLLOW_LPAREN_in_expressions16463 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_expressions16465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressions16468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_expression_in_expressions16470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_expressions16474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_NOT_in_precedenceNotOperator16500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotOperator_in_precedenceNotExpression16522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceEqualExpression_in_precedenceNotExpression16527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_AND_in_precedenceAndOperator16549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression16570 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_precedenceAndOperator_in_precedenceAndExpression16573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceNotExpression_in_precedenceAndExpression16576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_KW_OR_in_precedenceOrOperator16600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression16621 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_precedenceOrOperator_in_precedenceOrExpression16624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000022004402000L,0x0000000000020000L,0x00000200C8000400L,0x0000018001978600L});
    public static final BitSet FOLLOW_precedenceAndExpression_in_precedenceOrExpression16627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_KW_TRUE_in_booleanValue16651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_FALSE_in_booleanValue16656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tableName_in_tableOrPartition16676 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_partitionSpec_in_tableOrPartition16678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_partitionSpec16710 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_partitionSpec16717 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec16719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_partitionSpec16722 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_partitionVal_in_partitionSpec16725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_partitionSpec16730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_partitionVal16761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_EQUAL_in_partitionVal16764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000020000L,0x0000000000000000L,0x0000018000078000L});
    public static final BitSet FOLLOW_constant_in_partitionVal16766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_KW_PARTITION_in_dropPartitionSpec16800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_LPAREN_in_dropPartitionSpec16807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_dropPartitionVal_in_dropPartitionSpec16809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_COMMA_in_dropPartitionSpec16812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_dropPartitionVal_in_dropPartitionSpec16815 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_RPAREN_in_dropPartitionSpec16820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_dropPartitionVal16851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L,0x0000000030000000L,0x0000001C00000000L});
    public static final BitSet FOLLOW_dropPartitionOperator_in_dropPartitionVal16853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L,0x0000000000020000L,0x0000000000000000L,0x0000018000078000L});
    public static final BitSet FOLLOW_constant_in_dropPartitionVal16855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_dropPartitionOperator0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sysFuncNames0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sysFuncNames_in_descFuncNames17274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_descFuncNames17282 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_descFuncNames17290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwUser17307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwRole17317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_kwInner17327 = new BitSet(new long[]{0x0000000000000002L});

}